<!DOCTYPE html>
<html lang="es">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Gestor de Finanzas Personales</title>
    <script src="https://cdn.tailwindcss.com"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/Chart.js/4.4.0/chart.umd.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/xlsx/0.18.5/xlsx.full.min.js"></script>
    <style>
        /* Mejoras de contraste */
        .bg-primary { background-color: #2563eb; }
        .text-primary { color: #2563eb; }
        .border-primary { border-color: #2563eb; }
        
        /* Dark mode mejorado */
        .dark .bg-card { background-color: #1f2937; }
        .dark .border-card { border-color: #374151; }
        .dark .text-card { color: #f9fafb; }
        .dark .text-muted { color: #9ca3af; }
        
        /* Light mode mejorado */
        .bg-card { background-color: #ffffff; }
        .border-card { border-color: #e5e7eb; }
        .text-card { color: #111827; }
        .text-muted { color: #6b7280; }
        
        /* Hover mejorado */
        .hover-bg:hover { background-color: #f3f4f6; }
        .dark .hover-bg:hover { background-color: #374151; }
        
        /* Botones mejorados */
        .btn-primary {
            background: linear-gradient(135deg, #2563eb 0%, #1d4ed8 100%);
            color: white;
            font-weight: 600;
            transition: all 0.2s ease;
        }
        .btn-primary:hover {
            transform: translateY(-1px);
            box-shadow: 0 4px 12px rgba(37, 99, 235, 0.4);
        }
        
        .btn-success {
            background: linear-gradient(135deg, #10b981 0%, #059669 100%);
            color: white;
            font-weight: 600;
            transition: all 0.2s ease;
        }
        .btn-success:hover {
            transform: translateY(-1px);
            box-shadow: 0 4px 12px rgba(16, 185, 129, 0.4);
        }
        
        /* Charts container */
        .chart-container {
            position: relative;
            height: 300px;
            width: 100%;
        }
        
        /* Drag and drop styles */
        .drag-drop-area {
            border: 2px dashed #d1d5db;
            border-radius: 8px;
            transition: all 0.3s ease;
        }
        .drag-drop-area.dragover {
            border-color: #2563eb;
            background-color: #eff6ff;
        }
        .dark .drag-drop-area.dragover {
            background-color: #1e3a8a;
        }
        
        /* Preview table styles */
        .preview-table {
            max-height: 300px;
            overflow-y: auto;
        }
        .preview-table table {
            width: 100%;
            border-collapse: collapse;
        }
        .preview-table th,
        .preview-table td {
            padding: 8px 12px;
            border: 1px solid #e5e7eb;
            text-align: left;
        }
        .dark .preview-table th,
        .dark .preview-table td {
            border-color: #374151;
        }
        .preview-table th {
            background-color: #f9fafb;
            font-weight: 600;
        }
        .dark .preview-table th {
            background-color: #374151;
        }
    </style>
</head>
<body class="bg-gray-50 dark:bg-gray-900 text-card transition-colors duration-300">
<header class="bg-gray-800 text-white shadow-lg sticky top-0 z-50">
        <div class="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
            <div class="flex items-center justify-between h-16">
                <div class="flex items-center">
                    <span class="font-bold text-xl">Mi App Personal</span>
                </div>
                <div class="flex space-x-4">
                    <button onclick="showMainSection('home-finance')" class="main-section-btn bg-gray-900 text-white px-3 py-2 rounded-md text-sm font-medium">
                        💰 Finanzas del Hogar
                    </button>
                    <button onclick="showMainSection('personal-goals')" class="main-section-btn text-gray-300 hover:bg-gray-700 hover:text-white px-3 py-2 rounded-md text-sm font-medium">
                        🎯 Objetivos Personales
                    </button>
                    <button onclick="showMainSection('investments')" class="main-section-btn text-gray-300 hover:bg-gray-700 hover:text-white px-3 py-2 rounded-md text-sm font-medium">
                        📈 Inversiones
                    </button>
                </div>
            </div>
        </div>
    </header>
    <div id="main-content">

        <div id="home-finance-section" class="main-section">
    <div id="app" class="min-h-screen">
        <!-- Header mejorado -->
        <header class="bg-card border-card shadow-sm border-b sticky top-0 z-40">
            <div class="max-w-7xl mx-auto px-3 sm:px-4 lg:px-6 py-3 sm:py-4">
                <div class="flex flex-col sm:flex-row sm:justify-between sm:items-center space-y-3 sm:space-y-0">
                    <div class="flex items-center space-x-3">
                        <div class="w-8 h-8 sm:w-10 sm:h-10 bg-gradient-to-br from-blue-500 to-purple-600 rounded-lg flex items-center justify-center text-white text-lg sm:text-xl font-bold">
                            €
                        </div>
                        <h1 class="text-lg sm:text-2xl font-bold text-card">Finanzas Personales</h1>
                    </div>
                    
                    <div class="flex flex-col sm:flex-row sm:items-center space-y-2 sm:space-y-0 sm:space-x-4">
                        <!-- Selector de mes y año en móvil más compacto -->
                        <div class="flex items-center space-x-2">
                            <select id="month-selector" onchange="updateDateFilter()" 
                                class="flex-1 sm:flex-none px-2 sm:px-3 py-2 border border-card rounded-lg bg-card text-card focus:ring-2 focus:ring-blue-500 focus:border-transparent text-xs sm:text-sm">
                                <option value="">Todos los meses</option>
                            </select>
                            <select id="year-selector" onchange="updateDateFilter()" 
                                class="flex-1 sm:flex-none px-2 sm:px-3 py-2 border border-card rounded-lg bg-card text-card focus:ring-2 focus:ring-blue-500 focus:border-transparent text-xs sm:text-sm">
                                <option value="">Todos los años</option>
                            </select>
                        </div>
                        
                        <button onclick="toggleTheme()" 
                            class="self-center sm:self-auto p-2 sm:p-3 rounded-lg bg-gray-100 dark:bg-gray-700 hover:bg-gray-200 dark:hover:bg-gray-600 transition-colors">
                            <span id="theme-icon">🌙</span>
                        </button>
                    </div>
                </div>
            </div>
        </header>

        <!-- Navigation mejorada -->
        <nav class="bg-card border-card border-b">
            <div class="max-w-7xl mx-auto px-3 sm:px-4 lg:px-6">
                <div class="flex space-x-2 sm:space-x-8 overflow-x-auto scrollbar-hide">
                    <button onclick="showTab('dashboard')" class="tab-btn py-3 sm:py-4 px-2 sm:px-1 border-b-2 font-medium text-xs sm:text-sm transition-colors whitespace-nowrap flex-shrink-0" data-tab="dashboard">
                        <span class="sm:hidden">📊</span>
                        <span class="hidden sm:inline">📊 Dashboard</span>
                    </button>
                    <button onclick="showTab('transactions')" class="tab-btn py-3 sm:py-4 px-2 sm:px-1 border-b-2 font-medium text-xs sm:text-sm transition-colors whitespace-nowrap flex-shrink-0" data-tab="transactions">
                        <span class="sm:hidden">📋</span>
                        <span class="hidden sm:inline">📋 Transacciones</span>
                    </button>
                    <button onclick="showTab('categories')" class="tab-btn py-3 sm:py-4 px-2 sm:px-1 border-b-2 font-medium text-xs sm:text-sm transition-colors whitespace-nowrap flex-shrink-0" data-tab="categories">
                        <span class="sm:hidden">🏷️</span>
                        <span class="hidden sm:inline">🏷️ Categorías</span>
                    </button>
                    <button onclick="showTab('recurring')" class="tab-btn py-3 sm:py-4 px-2 sm:px-1 border-b-2 font-medium text-xs sm:text-sm transition-colors whitespace-nowrap flex-shrink-0" data-tab="recurring">
                        <span class="sm:hidden">🔄</span>
                        <span class="hidden sm:inline">🔄 Recurrentes</span>
                    </button>
                    <button onclick="showTab('goals')" class="tab-btn py-3 sm:py-4 px-2 sm:px-1 border-b-2 font-medium text-xs sm:text-sm transition-colors whitespace-nowrap flex-shrink-0" data-tab="goals">
                        <span class="sm:hidden">🎯</span>
                        <span class="hidden sm:inline">🎯 Objetivos</span>
                    </button>
                    <button onclick="showTab('analytics')" class="tab-btn py-3 sm:py-4 px-2 sm:px-1 border-b-2 font-medium text-xs sm:text-sm transition-colors whitespace-nowrap flex-shrink-0" data-tab="analytics">
                        <span class="sm:hidden">📈</span>
                        <span class="hidden sm:inline">📈 Análisis</span>
                    </button>
                </div>
            </div>
        </nav>

        <!-- Content -->
        <main class="max-w-7xl mx-auto px-4 py-8">
            <!-- Dashboard Tab -->
            <div id="dashboard-tab" class="tab-content">
                <div class="grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 gap-4 sm:gap-6 mb-6 sm:mb-8">
                    <div class="bg-card border-card rounded-xl p-6 shadow-sm border">
                        <div class="flex items-center justify-between">
                            <div>
                                <p class="text-sm font-medium text-muted">Ingresos</p>
                                <p class="text-3xl font-bold text-green-600" id="total-income">€0.00</p>
                            </div>
                            <div class="w-12 h-12 bg-green-100 dark:bg-green-900/20 rounded-lg flex items-center justify-center">
                                <span class="text-2xl">📈</span>
                            </div>
                        </div>
                    </div>
                    <div class="bg-card border-card rounded-xl p-6 shadow-sm border">
                        <div class="flex items-center justify-between">
                            <div>
                                <p class="text-sm font-medium text-muted">Gastos</p>
                                <p class="text-3xl font-bold text-red-600" id="total-expenses">€0.00</p>
                            </div>
                            <div class="w-12 h-12 bg-red-100 dark:bg-red-900/20 rounded-lg flex items-center justify-center">
                                <span class="text-2xl">📉</span>
                            </div>
                        </div>
                    </div>
                    <div class="bg-card border-card rounded-xl p-6 shadow-sm border">
                        <div class="flex items-center justify-between">
                            <div>
                                <p class="text-sm font-medium text-muted">Balance</p>
                                <p class="text-3xl font-bold" id="balance">€0.00</p>
                            </div>
                            <div class="w-12 h-12 bg-blue-100 dark:bg-blue-900/20 rounded-lg flex items-center justify-center">
                                <span class="text-2xl" id="balance-icon">💰</span>
                            </div>
                        </div>
                    </div>
                </div>

                <!-- Período actual -->
                <div class="bg-card border-card rounded-xl p-4 sm:p-6 shadow-sm border mb-4 sm:mb-6">
                    <h3 class="text-lg font-semibold mb-2 text-card">Período seleccionado</h3>
                    <p class="text-muted" id="current-period">Todos los registros</p>
                </div>

                <!-- Ranking de categorías -->
                <div class="bg-card border-card rounded-xl p-4 sm:p-6 shadow-sm border mb-4 sm:mb-6">
                    <h3 class="text-lg font-semibold mb-4 text-card">Ranking de Gastos por Categoría</h3>
                    <div id="category-ranking">
                        <!-- Ranking se cargará aquí -->
                    </div>
                </div>

                <div class="bg-card border-card rounded-xl p-6 shadow-sm border">
                    <div class="flex justify-between items-center mb-4">
                        <h3 class="text-lg font-semibold text-card">Transacciones Recientes</h3>
                        <button onclick="showTab('transactions')" class="text-primary hover:text-blue-700 text-sm font-medium">
                            Ver todas →
                        </button>
                    </div>
                    <div id="recent-transactions" class="space-y-3">
                        <!-- Transacciones recientes se cargarán aquí -->
                    </div>
                </div>
            </div>

            <!-- Transactions Tab -->
            <div id="transactions-tab" class="tab-content hidden">
                <div class="flex flex-col sm:flex-row justify-between items-start sm:items-center gap-4 mb-6">
                    <h2 class="text-2xl font-bold text-card">Transacciones</h2>
                    <div class="flex flex-col sm:flex-row gap-3">
                        <button onclick="showImportExcel()" class="btn-success px-6 py-3 rounded-lg flex items-center gap-2">
                            📊 Importar Excel
                        </button>
                        <button onclick="exportToExcel()" class="bg-gradient-to-r from-green-600 to-green-700 hover:from-green-700 hover:to-green-800 text-white px-6 py-3 rounded-lg flex items-center gap-2 transition-all duration-200 hover:transform hover:scale-105">
                            📤 Exportar Excel
                        </button>
                        <button onclick="showAddTransaction()" class="btn-primary px-6 py-3 rounded-lg">
                            + Nueva Transacción
                        </button>
                    </div>
                </div>

                <!-- Filtros de transacciones mejorados -->
                <div class="bg-card border-card rounded-xl p-4 sm:p-6 shadow-sm border mb-6">
                    <div class="flex flex-col sm:flex-row justify-between items-start sm:items-center gap-4 mb-4">
                        <h3 class="text-lg font-semibold text-card">🔍 Búsqueda Inteligente</h3>
                        <div class="flex flex-col sm:flex-row gap-2">
                            <button onclick="showAdvancedSearch()" class="btn-primary px-4 py-2 rounded-lg text-sm">
                                ⚙️ Búsqueda Avanzada
                            </button>
                            <button onclick="showSavedSearches()" class="bg-green-600 hover:bg-green-700 text-white px-4 py-2 rounded-lg text-sm transition-colors">
                                📚 Guardadas
                            </button>
                        </div>
                    </div>
                    
                    <!-- Búsqueda rápida -->
                    <div class="grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-4 gap-3 sm:gap-4 mb-4">
                        <div>
                            <label class="block text-sm font-medium text-card mb-1">Buscar</label>
                            <input type="text" id="search-input" placeholder="Descripción..." 
                                onkeyup="filterTransactions()"
                                class="w-full px-3 py-2 border border-card rounded-lg bg-card text-card focus:ring-2 focus:ring-blue-500 focus:border-transparent text-sm">
                        </div>
                        <div>
                            <label class="block text-sm font-medium text-card mb-1">Categoría</label>
                            <select id="category-filter" onchange="filterTransactions()"
                                class="w-full px-3 py-2 border border-card rounded-lg bg-card text-card focus:ring-2 focus:ring-blue-500 focus:border-transparent text-sm">
                                <option value="">Todas</option>
                            </select>
                        </div>
                        <div>
                            <label class="block text-sm font-medium text-card mb-1">Tipo</label>
                            <select id="type-filter" onchange="onTypeFilterChange()"
                                class="w-full px-3 py-2 border border-card rounded-lg bg-card text-card focus:ring-2 focus:ring-blue-500 focus:border-transparent text-sm">
                                <option value="">Todos</option>
                                <option value="income">Ingresos</option>
                                <option value="expense">Gastos</option>
                            </select>
                        </div>
                        <div>
                            <label class="block text-sm font-medium text-card mb-1">Ordenar por</label>
                            <select id="sort-filter" onchange="filterTransactions()"
                                class="w-full px-3 py-2 border border-card rounded-lg bg-card text-card focus:ring-2 focus:ring-blue-500 focus:border-transparent text-sm">
                                <option value="date-desc">Fecha (más reciente)</option>
                                <option value="date-asc">Fecha (más antigua)</option>
                                <option value="amount-desc">Cantidad (mayor)</option>
                                <option value="amount-asc">Cantidad (menor)</option>
                            </select>
                        </div>
                    </div>
                    
                    <!-- Búsquedas predefinidas -->
                    <div class="flex flex-wrap gap-2 mb-4">
                        <span class="text-sm font-medium text-muted">Búsquedas rápidas:</span>
                        <button onclick="applyQuickSearch('large-expenses')" class="px-3 py-1 bg-blue-100 dark:bg-blue-900/20 text-blue-800 dark:text-blue-300 rounded-full text-xs hover:bg-blue-200 dark:hover:bg-blue-900/40 transition-colors">
                            💸 Gastos > €100
                        </button>
                        <button onclick="applyQuickSearch('this-week')" class="px-3 py-1 bg-green-100 dark:bg-green-900/20 text-green-800 dark:text-green-300 rounded-full text-xs hover:bg-green-200 dark:hover:bg-green-900/40 transition-colors">
                            📅 Esta semana
                        </button>
                        <button onclick="applyQuickSearch('food-expenses')" class="px-3 py-1 bg-orange-100 dark:bg-orange-900/20 text-orange-800 dark:text-orange-300 rounded-full text-xs hover:bg-orange-200 dark:hover:bg-orange-900/40 transition-colors">
                            🍽️ Alimentación
                        </button>
                        <button onclick="applyQuickSearch('recurring-transactions')" class="px-3 py-1 bg-purple-100 dark:bg-purple-900/20 text-purple-800 dark:text-purple-300 rounded-full text-xs hover:bg-purple-200 dark:hover:bg-purple-900/40 transition-colors">
                            🔄 Recurrentes
                        </button>
                        <button onclick="clearAllFilters()" class="px-3 py-1 bg-gray-100 dark:bg-gray-700 text-gray-800 dark:text-gray-300 rounded-full text-xs hover:bg-gray-200 dark:hover:bg-gray-600 transition-colors">
                            🗑️ Limpiar
                        </button>
                    </div>
                    
                    <!-- Resumen de filtros activos -->
                    <div id="active-filters-summary" class="hidden bg-blue-50 dark:bg-blue-900/20 p-3 rounded-lg border border-blue-200 dark:border-blue-800">
                        <div class="flex items-center justify-between">
                            <div id="filters-text" class="text-sm text-blue-800 dark:text-blue-200"></div>
                            <button onclick="saveCurrentSearch()" class="text-xs text-blue-600 dark:text-blue-400 hover:text-blue-800 dark:hover:text-blue-200 underline">
                                💾 Guardar búsqueda
                            </button>
                        </div>
                    </div>
                </div>

                <div class="bg-card border-card rounded-xl shadow-sm border overflow-hidden">
                    <div id="transactions-list" class="divide-y divide-gray-200 dark:divide-gray-700">
                        <!-- Lista de transacciones se cargará aquí -->
                    </div>
                </div>
            </div>

            <!-- Categories Tab -->
            <div id="categories-tab" class="tab-content hidden">
                <div class="flex flex-col sm:flex-row justify-between items-start sm:items-center gap-4 mb-6">
                    <h2 class="text-2xl font-bold text-card">Categorías</h2>
                    <button onclick="showAddCategory()" class="btn-primary px-6 py-3 rounded-lg">
                        + Nueva Categoría
                    </button>
                </div>

                <!-- Separación por tipo -->
                <div class="space-y-6 sm:space-y-8">
                    <div>
                        <h3 class="text-lg font-semibold text-card mb-4">Categorías de Gastos</h3>
                        <div class="grid grid-cols-1 md:grid-cols-2 xl:grid-cols-3 gap-4 sm:gap-6" id="expense-categories">
                            <!-- Categorías de gastos se cargarán aquí -->
                        </div>
                    </div>
                    
                    <div>
                        <h3 class="text-lg font-semibold text-card mb-4">Categorías de Ingresos</h3>
                        <div class="grid grid-cols-1 md:grid-cols-2 xl:grid-cols-3 gap-4 sm:gap-6" id="income-categories">
                            <!-- Categorías de ingresos se cargarán aquí -->
                        </div>
                    </div>
                </div>
            </div>

            <!-- Recurring Tab -->
            <div id="recurring-tab" class="tab-content hidden">
                <div class="flex flex-col sm:flex-row justify-between items-start sm:items-center gap-4 mb-6">
                    <h2 class="text-2xl font-bold text-card">Transacciones Recurrentes</h2>
                    <button onclick="showAddRecurring()" class="btn-primary px-6 py-3 rounded-lg">
                        + Nueva Recurrente
                    </button>
                </div>

                <!-- Transacciones pendientes de actualizar -->
                <div id="pending-updates-section" class="bg-card border-card rounded-xl p-6 shadow-sm border mb-6 hidden">
                    <h3 class="text-lg font-semibold mb-4 text-card">⏳ Pendientes de Actualizar</h3>
                    <p class="text-sm text-muted mb-4">Transacciones con valor variable que necesitan el importe real:</p>
                    <div id="pending-updates-list" class="space-y-3">
                        <!-- Transacciones pendientes se cargarán aquí -->
                    </div>
                </div>

                <!-- Próximas transacciones -->
                <div class="bg-card border-card rounded-xl p-6 shadow-sm border mb-6">
                    <h3 class="text-lg font-semibold mb-4 text-card">📅 Próximas Transacciones (30 días)</h3>
                    <div id="upcoming-transactions" class="space-y-3">
                        <!-- Próximas transacciones se cargarán aquí -->
                    </div>
                </div>

                <!-- Lista de transacciones recurrentes activas -->
                <div class="bg-card border-card rounded-xl shadow-sm border overflow-hidden">
                    <div class="p-6 border-b border-card">
                        <h3 class="text-lg font-semibold text-card">🔄 Configuraciones Activas</h3>
                    </div>
                    <div id="recurring-list" class="divide-y divide-gray-200 dark:divide-gray-700">
                        <!-- Lista de recurrentes se cargará aquí -->
                    </div>
                </div>
            </div>

            <!-- Goals Tab -->
            <div id="goals-tab" class="tab-content hidden">
                <div class="flex flex-col sm:flex-row justify-between items-start sm:items-center gap-4 mb-6">
                    <h2 class="text-2xl font-bold text-card">Objetivos de Ahorro</h2>
                    <button onclick="showAddGoal()" class="btn-primary px-6 py-3 rounded-lg">
                        + Nuevo Objetivo
                    </button>
                </div>

                <!-- Resumen de objetivos -->
                <div class="grid grid-cols-1 md:grid-cols-3 gap-4 sm:gap-6 mb-6 sm:mb-8">
                    <div class="bg-card border-card rounded-xl p-6 shadow-sm border">
                        <div class="flex items-center justify-between">
                            <div>
                                <p class="text-sm font-medium text-muted">Objetivos Activos</p>
                                <p class="text-3xl font-bold text-blue-600" id="active-goals">0</p>
                            </div>
                            <div class="w-12 h-12 bg-blue-100 dark:bg-blue-900/20 rounded-lg flex items-center justify-center">
                                <span class="text-2xl">🎯</span>
                            </div>
                        </div>
                    </div>
                    <div class="bg-card border-card rounded-xl p-6 shadow-sm border">
                        <div class="flex items-center justify-between">
                            <div>
                                <p class="text-sm font-medium text-muted">Progreso Promedio</p>
                                <p class="text-3xl font-bold text-green-600" id="average-progress">0%</p>
                            </div>
                            <div class="w-12 h-12 bg-green-100 dark:bg-green-900/20 rounded-lg flex items-center justify-center">
                                <span class="text-2xl">📊</span>
                            </div>
                        </div>
                    </div>
                    <div class="bg-card border-card rounded-xl p-6 shadow-sm border">
                        <div class="flex items-center justify-between">
                            <div>
                                <p class="text-sm font-medium text-muted">Total a Ahorrar</p>
                                <p class="text-3xl font-bold text-purple-600" id="total-target">€0</p>
                            </div>
                            <div class="w-12 h-12 bg-purple-100 dark:bg-purple-900/20 rounded-lg flex items-center justify-center">
                                <span class="text-2xl">💰</span>
                            </div>
                        </div>
                    </div>
                </div>

                <!-- Objetivos por cumplir pronto -->
                <div id="urgent-goals-section" class="bg-card border-card rounded-xl p-6 shadow-sm border mb-6 hidden">
                    <h3 class="text-lg font-semibold mb-4 text-card">⏰ Objetivos con Fecha Próxima</h3>
                    <div id="urgent-goals-list" class="space-y-3">
                        <!-- Objetivos urgentes se cargarán aquí -->
                    </div>
                </div>

                <!-- Distribución de ahorro (solo mostrar si hay múltiples objetivos auto-calculados) -->
                <div id="savings-distribution-section" class="bg-card border-card rounded-xl p-6 shadow-sm border mb-6 hidden">
                    <h3 class="text-lg font-semibold mb-4 text-card">📊 Distribución Actual de Ahorro</h3>
                    <div id="savings-distribution-content">
                        <!-- Contenido de distribución se cargará aquí -->
                    </div>
                </div>

                <!-- Lista de todos los objetivos -->
                <div class="space-y-6">
                    <div>
                        <h3 class="text-lg font-semibold text-card mb-4">📋 Todos los Objetivos</h3>
                        <div id="goals-list" class="space-y-4">
                            <!-- Lista de objetivos se cargará aquí -->
                        </div>
                    </div>
                </div>
            </div>

            <!-- Analytics Tab mejorado -->
            <div id="analytics-tab" class="tab-content hidden">
                <h2 class="text-xl sm:text-2xl font-bold text-card mb-4 sm:mb-6">Análisis Financiero</h2>
                
                <!-- Métricas principales -->
                <div class="grid grid-cols-2 lg:grid-cols-4 gap-3 sm:gap-6 mb-6 sm:mb-8">
                    <div class="bg-card border-card rounded-xl p-6 shadow-sm border">
                        <div class="flex items-center space-x-3">
                            <div class="w-10 h-10 bg-purple-100 dark:bg-purple-900/20 rounded-lg flex items-center justify-center">
                                <span class="text-lg">📊</span>
                            </div>
                            <div>
                                <p class="text-sm font-medium text-muted">Transacciones</p>
                                <p class="text-xl font-bold text-card" id="total-transactions">0</p>
                            </div>
                        </div>
                    </div>
                    
                    <div class="bg-card border-card rounded-xl p-6 shadow-sm border">
                        <div class="flex items-center space-x-3">
                            <div class="w-10 h-10 bg-orange-100 dark:bg-orange-900/20 rounded-lg flex items-center justify-center">
                                <span class="text-lg">💰</span>
                            </div>
                            <div>
                                <p class="text-sm font-medium text-muted">Ahorro total</p>
                                <p class="text-xl font-bold text-card" id="monthly-savings">€0</p>
                            </div>
                        </div>
                    </div>
                    
                    <div class="bg-card border-card rounded-xl p-6 shadow-sm border">
                        <div class="flex items-center space-x-3">
                            <div class="w-10 h-10 bg-green-100 dark:bg-green-900/20 rounded-lg flex items-center justify-center">
                                <span class="text-lg">🎯</span>
                            </div>
                            <div>
                                <p class="text-sm font-medium text-muted">Tasa de ahorro</p>
                                <p class="text-xl font-bold text-card" id="savings-rate">0%</p>
                            </div>
                        </div>
                    </div>
                    
                    <div class="bg-card border-card rounded-xl p-6 shadow-sm border">
                        <div class="flex items-center space-x-3">
                            <div class="w-10 h-10 bg-blue-100 dark:bg-blue-900/20 rounded-lg flex items-center justify-center">
                                <span class="text-lg">🎯</span>
                            </div>
                            <div>
                                <p class="text-sm font-medium text-muted">Gasto promedio</p>
                                <p class="text-xl font-bold text-card" id="biggest-expense">€0</p>
                            </div>
                        </div>
                    </div>
                </div>
                
                <!-- Gráficos -->
                <div class="grid grid-cols-1 xl:grid-cols-2 gap-4 sm:gap-6 mb-6 sm:mb-8">
                    <div class="bg-card border-card rounded-xl p-6 shadow-sm border">
                        <div class="flex justify-between items-center mb-4">
                            <h3 class="text-lg font-semibold text-card">Distribución Financiera</h3>
                            <select id="chart-type-selector" onchange="updateDistributionChart()" 
                                class="px-3 py-2 border border-card rounded-lg bg-card text-card focus:ring-2 focus:ring-blue-500 focus:border-transparent text-sm">
                                <option value="expenses">Solo Gastos</option>
                                <option value="income">Solo Ingresos</option>
                                <option value="combined">Gastos vs Ingresos (%)</option>
                            </select>
                        </div>
                        <div class="chart-container">
                            <canvas id="expensesChart"></canvas>
                        </div>
                    </div>
                    
                    <div class="bg-card border-card rounded-xl p-6 shadow-sm border">
                        <h3 class="text-lg font-semibold mb-4 text-card">Evolución Mensual</h3>
                        <div class="chart-container">
                            <canvas id="trendChart"></canvas>
                        </div>
                    </div>
                </div>
                
                <!-- Análisis detallado -->
                <div class="grid grid-cols-1 xl:grid-cols-2 gap-4 sm:gap-6 mb-6 sm:mb-8">
                    <div class="bg-card border-card rounded-xl p-6 shadow-sm border">
                        <h3 class="text-lg font-semibold mb-4 text-card">Top 5 Gastos</h3>
                        <div id="top-expenses" class="space-y-3">
                            <!-- Top gastos se cargarán aquí -->
                        </div>
                    </div>
                    
                    <div class="bg-card border-card rounded-xl p-6 shadow-sm border">
                        <h3 class="text-lg font-semibold mb-4 text-card">Categorías con Presupuesto Excedido</h3>
                        <div id="budget-alerts" class="space-y-3">
                            <!-- Alertas de presupuesto se cargarán aquí -->
                        </div>
                    </div>
                </div>

                <!-- Sección de Comparativas Temporales (movida al final) -->
                <div class="bg-card border-card rounded-xl p-6 shadow-sm border mb-6 sm:mb-8">
                    <div class="flex flex-col sm:flex-row justify-between items-start sm:items-center gap-4 mb-6">
                        <h3 class="text-lg font-semibold text-card">📈 Comparativas Temporales</h3>
                        <div class="flex flex-col sm:flex-row gap-3">
                            <select id="comparison-type" onchange="updateComparison()" 
                                class="px-3 py-2 border border-card rounded-lg bg-card text-card focus:ring-2 focus:ring-blue-500 focus:border-transparent text-sm">
                                <option value="month-vs-month">Mes vs Mes</option>
                                <option value="month-vs-avg">Mes vs Promedio</option>
                                <option value="year-vs-year">Año vs Año</option>
                                <option value="quarter-vs-quarter">Trimestre vs Trimestre</option>
                            </select>
                            <button onclick="updateComparison()" class="btn-primary px-4 py-2 rounded-lg text-sm">
                                🔄 Actualizar
                            </button>
                        </div>
                    </div>
                    
                    <!-- Selectores de período -->
                    <div id="comparison-selectors" class="grid grid-cols-2 gap-4 mb-6">
                        <!-- Se llenarán dinámicamente según el tipo de comparación -->
                    </div>
                    
                    <!-- Métricas de comparación -->
                    <div id="comparison-metrics" class="grid grid-cols-1 md:grid-cols-3 gap-4 mb-6">
                        <!-- Métricas se cargarán aquí -->
                    </div>
                    
                    <!-- Gráfico comparativo -->
                    <div class="chart-container mb-6">
                        <canvas id="comparisonChart"></canvas>
                    </div>
                    
                    <!-- Insights automáticos -->
                    <div id="comparison-insights" class="bg-blue-50 dark:bg-blue-900/20 p-4 rounded-lg border border-blue-200 dark:border-blue-800">
                        <!-- Insights se cargarán aquí -->
                    </div>
                </div>
            </div>
        </main>
    </div>

    <!-- Modal para agregar/editar transacción -->
    <div id="transaction-modal" class="fixed inset-0 bg-black bg-opacity-50 hidden z-50">
        <div class="flex items-center justify-center min-h-screen p-4">
            <div class="bg-card border-card rounded-xl p-6 w-full max-w-md shadow-xl border">
                <h3 class="text-lg font-semibold mb-4 text-card" id="transaction-modal-title">Nueva Transacción</h3>
                
                <div class="space-y-4">
                    <div>
                        <label class="block text-sm font-medium mb-1 text-card">Descripción</label>
                        <input type="text" id="transaction-description" 
                            class="w-full px-3 py-2 border border-card rounded-lg bg-card text-card focus:ring-2 focus:ring-blue-500 focus:border-transparent">
                    </div>
                    
                    <div class="grid grid-cols-2 gap-4">
                        <div>
                            <label class="block text-sm font-medium mb-1 text-card">Cantidad</label>
                            <input type="number" id="transaction-amount" step="0.01" 
                                class="w-full px-3 py-2 border border-card rounded-lg bg-card text-card focus:ring-2 focus:ring-blue-500 focus:border-transparent">
                        </div>
                        <div>
                            <label class="block text-sm font-medium mb-1 text-card">Tipo</label>
                            <select id="transaction-type" 
                                class="w-full px-3 py-2 border border-card rounded-lg bg-card text-card focus:ring-2 focus:ring-blue-500 focus:border-transparent">
                                <option value="expense">Gasto</option>
                                <option value="income">Ingreso</option>
                            </select>
                        </div>
                    </div>
                    
                    <div>
                        <label class="block text-sm font-medium mb-1 text-card">Categoría</label>
                        <select id="transaction-category" 
                            class="w-full px-3 py-2 border border-card rounded-lg bg-card text-card focus:ring-2 focus:ring-blue-500 focus:border-transparent">
                            <!-- Opciones se cargarán dinámicamente -->
                        </select>
                    </div>
                    
                    <div>
                        <label class="block text-sm font-medium mb-1 text-card">Fecha</label>
                        <input type="date" id="transaction-date" 
                            class="w-full px-3 py-2 border border-card rounded-lg bg-card text-card focus:ring-2 focus:ring-blue-500 focus:border-transparent">
                    </div>
                </div>
                
                <div class="flex justify-end space-x-3 mt-6">
                    <button onclick="closeTransactionModal()" 
                        class="px-4 py-2 text-muted hover-bg rounded-lg transition-colors">
                        Cancelar
                    </button>
                    <button onclick="saveTransaction()" 
                        class="btn-primary px-4 py-2 rounded-lg">
                        Guardar
                    </button>
                </div>
            </div>
        </div>
    </div>

    <!-- Modal para agregar/editar categoría -->
    <div id="category-modal" class="fixed inset-0 bg-black bg-opacity-50 hidden z-50">
        <div class="flex items-center justify-center min-h-screen p-4">
            <div class="bg-card border-card rounded-xl p-6 w-full max-w-md shadow-xl border">
                <h3 class="text-lg font-semibold mb-4 text-card" id="category-modal-title">Nueva Categoría</h3>
                
                <div class="space-y-4">
                    <div>
                        <label class="block text-sm font-medium mb-1 text-card">Nombre</label>
                        <input type="text" id="category-name" 
                            class="w-full px-3 py-2 border border-card rounded-lg bg-card text-card focus:ring-2 focus:ring-blue-500 focus:border-transparent">
                    </div>
                    
                    <div class="grid grid-cols-2 gap-4">
                        <div>
                            <label class="block text-sm font-medium mb-1 text-card">Tipo</label>
                            <select id="category-type" 
                                class="w-full px-3 py-2 border border-card rounded-lg bg-card text-card focus:ring-2 focus:ring-blue-500 focus:border-transparent">
                                <option value="expense">Gasto</option>
                                <option value="income">Ingreso</option>
                            </select>
                        </div>
                        <div>
                            <label class="block text-sm font-medium mb-1 text-card">Presupuesto</label>
                            <input type="number" id="category-budget" step="0.01" 
                                class="w-full px-3 py-2 border border-card rounded-lg bg-card text-card focus:ring-2 focus:ring-blue-500 focus:border-transparent">
                        </div>
                    </div>
                    
                    <div>
                        <label class="block text-sm font-medium mb-1 text-card">Icono</label>
                        <input type="text" id="category-icon" placeholder="🛒" 
                            class="w-full px-3 py-2 border border-card rounded-lg bg-card text-card focus:ring-2 focus:ring-blue-500 focus:border-transparent">
                    </div>
                </div>
                
                <div class="flex justify-end space-x-3 mt-6">
                    <button onclick="closeCategoryModal()" 
                        class="px-4 py-2 text-muted hover-bg rounded-lg transition-colors">
                        Cancelar
                    </button>
                    <button onclick="saveCategory()" 
                        class="btn-primary px-4 py-2 rounded-lg">
                        Guardar
                    </button>
                </div>
            </div>
        </div>
    </div>

    <!-- Modal para búsqueda avanzada -->
    <div id="advanced-search-modal" class="fixed inset-0 bg-black bg-opacity-50 hidden z-50">
        <div class="flex items-center justify-center min-h-screen p-4">
            <div class="bg-card border-card rounded-xl p-6 w-full max-w-2xl shadow-xl border max-h-[90vh] overflow-y-auto">
                <div class="flex justify-between items-center mb-6">
                    <h3 class="text-xl font-semibold text-card">🔍 Búsqueda Avanzada</h3>
                    <button onclick="closeAdvancedSearchModal()" class="p-2 text-muted hover:text-card rounded-lg hover-bg">
                        ✖️
                    </button>
                </div>
                
                <div class="space-y-6">
                    <!-- Filtro por monto -->
                    <div class="bg-gray-50 dark:bg-gray-800 p-4 rounded-lg">
                        <h4 class="font-semibold text-card mb-3">💰 Filtro por Monto</h4>
                        <div class="grid grid-cols-1 sm:grid-cols-3 gap-4">
                            <div>
                                <label class="block text-sm font-medium text-card mb-1">Operador</label>
                                <select id="amount-operator" class="w-full px-3 py-2 border border-card rounded-lg bg-card text-card focus:ring-2 focus:ring-blue-500 focus:border-transparent text-sm">
                                    <option value="">Sin filtro</option>
                                    <option value="gt">Mayor que ></option>
                                    <option value="lt">Menor que <</option>
                                    <option value="eq">Igual a =</option>
                                    <option value="between">Entre</option>
                                </select>
                            </div>
                            <div>
                                <label class="block text-sm font-medium text-card mb-1">Monto</label>
                                <input type="number" id="amount-value" step="0.01" placeholder="100.00" 
                                    class="w-full px-3 py-2 border border-card rounded-lg bg-card text-card focus:ring-2 focus:ring-blue-500 focus:border-transparent text-sm">
                            </div>
                            <div id="amount-value2-container" class="hidden">
                                <label class="block text-sm font-medium text-card mb-1">Monto hasta</label>
                                <input type="number" id="amount-value2" step="0.01" placeholder="500.00" 
                                    class="w-full px-3 py-2 border border-card rounded-lg bg-card text-card focus:ring-2 focus:ring-blue-500 focus:border-transparent text-sm">
                            </div>
                        </div>
                    </div>
                    
                    <!-- Filtro por fechas -->
                    <div class="bg-gray-50 dark:bg-gray-800 p-4 rounded-lg">
                        <h4 class="font-semibold text-card mb-3">📅 Filtro por Fechas</h4>
                        <div class="grid grid-cols-1 sm:grid-cols-3 gap-4">
                            <div>
                                <label class="block text-sm font-medium text-card mb-1">Período</label>
                                <select id="date-filter-type" class="w-full px-3 py-2 border border-card rounded-lg bg-card text-card focus:ring-2 focus:ring-blue-500 focus:border-transparent text-sm">
                                    <option value="">Sin filtro</option>
                                    <option value="today">Hoy</option>
                                    <option value="yesterday">Ayer</option>
                                    <option value="this-week">Esta semana</option>
                                    <option value="last-week">Semana pasada</option>
                                    <option value="this-month">Este mes</option>
                                    <option value="last-month">Mes pasado</option>
                                    <option value="this-year">Este año</option>
                                    <option value="custom">Rango personalizado</option>
                                </select>
                            </div>
                            <div id="date-from-container" class="hidden">
                                <label class="block text-sm font-medium text-card mb-1">Desde</label>
                                <input type="date" id="date-from" 
                                    class="w-full px-3 py-2 border border-card rounded-lg bg-card text-card focus:ring-2 focus:ring-blue-500 focus:border-transparent text-sm">
                            </div>
                            <div id="date-to-container" class="hidden">
                                <label class="block text-sm font-medium text-card mb-1">Hasta</label>
                                <input type="date" id="date-to" 
                                    class="w-full px-3 py-2 border border-card rounded-lg bg-card text-card focus:ring-2 focus:ring-blue-500 focus:border-transparent text-sm">
                            </div>
                        </div>
                    </div>
                    
                    <!-- Filtros adicionales -->
                    <div class="bg-gray-50 dark:bg-gray-800 p-4 rounded-lg">
                        <h4 class="font-semibold text-card mb-3">🎯 Filtros Adicionales</h4>
                        <div class="grid grid-cols-1 sm:grid-cols-2 gap-4">
                            <div>
                                <label class="block text-sm font-medium text-card mb-1">Múltiples categorías</label>
                                <div id="multiple-categories" class="max-h-32 overflow-y-auto border border-card rounded-lg p-2 bg-card">
                                    <!-- Se llenarán dinámicamente -->
                                </div>
                            </div>
                            <div class="space-y-3">
                                <div class="flex items-center space-x-2">
                                    <input type="checkbox" id="include-recurring" class="rounded border-card">
                                    <label for="include-recurring" class="text-sm text-card">Solo transacciones recurrentes</label>
                                </div>
                                <div class="flex items-center space-x-2">
                                    <input type="checkbox" id="include-variable" class="rounded border-card">
                                    <label for="include-variable" class="text-sm text-card">Solo valores variables</label>
                                </div>
                                <div class="flex items-center space-x-2">
                                    <input type="checkbox" id="include-generated" class="rounded border-card">
                                    <label for="include-generated" class="text-sm text-card">Incluir auto-generadas</label>
                                </div>
                            </div>
                        </div>
                    </div>
                    
                    <!-- Descripción avanzada -->
                    <div class="bg-gray-50 dark:bg-gray-800 p-4 rounded-lg">
                        <h4 class="font-semibold text-card mb-3">📝 Búsqueda en Descripción</h4>
                        <div class="grid grid-cols-1 sm:grid-cols-2 gap-4">
                            <div>
                                <label class="block text-sm font-medium text-card mb-1">Texto a buscar</label>
                                <input type="text" id="description-search" placeholder="restaurante, supermercado..." 
                                    class="w-full px-3 py-2 border border-card rounded-lg bg-card text-card focus:ring-2 focus:ring-blue-500 focus:border-transparent text-sm">
                            </div>
                            <div>
                                <label class="block text-sm font-medium text-card mb-1">Modo de búsqueda</label>
                                <select id="description-mode" class="w-full px-3 py-2 border border-card rounded-lg bg-card text-card focus:ring-2 focus:ring-blue-500 focus:border-transparent text-sm">
                                    <option value="contains">Contiene</option>
                                    <option value="starts">Empieza por</option>
                                    <option value="ends">Termina en</option>
                                    <option value="exact">Coincidencia exacta</option>
                                </select>
                            </div>
                        </div>
                    </div>
                </div>
                
                <div class="flex justify-between mt-6">
                    <button onclick="clearAdvancedSearch()" class="px-4 py-2 text-muted hover-bg rounded-lg transition-colors">
                        🗑️ Limpiar todo
                    </button>
                    <div class="flex space-x-3">
                        <button onclick="closeAdvancedSearchModal()" class="px-4 py-2 text-muted hover-bg rounded-lg transition-colors">
                            Cancelar
                        </button>
                        <button onclick="applyAdvancedSearch()" class="btn-primary px-6 py-3 rounded-lg">
                            🔍 Buscar
                        </button>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <!-- Modal para búsquedas guardadas -->
    <div id="saved-searches-modal" class="fixed inset-0 bg-black bg-opacity-50 hidden z-50">
        <div class="flex items-center justify-center min-h-screen p-4">
            <div class="bg-card border-card rounded-xl p-6 w-full max-w-lg shadow-xl border">
                <div class="flex justify-between items-center mb-6">
                    <h3 class="text-lg font-semibold text-card">📚 Búsquedas Guardadas</h3>
                    <button onclick="closeSavedSearchesModal()" class="p-2 text-muted hover:text-card rounded-lg hover-bg">
                        ✖️
                    </button>
                </div>
                
                <div id="saved-searches-list" class="space-y-3">
                    <!-- Lista de búsquedas guardadas se cargará aquí -->
                </div>
                
                <div class="mt-6 pt-4 border-t border-gray-200 dark:border-gray-700">
                    <button onclick="closeSavedSearchesModal()" class="w-full px-4 py-2 text-muted hover-bg rounded-lg transition-colors">
                        Cerrar
                    </button>
                </div>
            </div>
        </div>
    </div>

    <!-- Modal para guardar búsqueda -->
    <div id="save-search-modal" class="fixed inset-0 bg-black bg-opacity-50 hidden z-50">
        <div class="flex items-center justify-center min-h-screen p-4">
            <div class="bg-card border-card rounded-xl p-6 w-full max-w-md shadow-xl border">
                <h3 class="text-lg font-semibold mb-4 text-card">💾 Guardar Búsqueda</h3>
                
                <div class="space-y-4">
                    <div>
                        <label class="block text-sm font-medium mb-1 text-card">Nombre de la búsqueda</label>
                        <input type="text" id="search-name" placeholder="ej: Gastos grandes diciembre" 
                            class="w-full px-3 py-2 border border-card rounded-lg bg-card text-card focus:ring-2 focus:ring-blue-500 focus:border-transparent">
                    </div>
                    
                    <div>
                        <label class="block text-sm font-medium mb-1 text-card">Descripción (opcional)</label>
                        <textarea id="search-description" rows="2" placeholder="Descripción de la búsqueda..." 
                            class="w-full px-3 py-2 border border-card rounded-lg bg-card text-card focus:ring-2 focus:ring-blue-500 focus:border-transparent"></textarea>
                    </div>
                </div>
                
                <div class="flex justify-end space-x-3 mt-6">
                    <button onclick="closeSaveSearchModal()" class="px-4 py-2 text-muted hover-bg rounded-lg transition-colors">
                        Cancelar
                    </button>
                    <button onclick="confirmSaveSearch()" class="btn-primary px-4 py-2 rounded-lg">
                        Guardar
                    </button>
                </div>
            </div>
        </div>
    </div>

    <!-- Modal para agregar/editar objetivo de ahorro -->
    <div id="goal-modal" class="fixed inset-0 bg-black bg-opacity-50 hidden z-50">
        <div class="flex items-center justify-center min-h-screen p-4">
            <div class="bg-card border-card rounded-xl p-6 w-full max-w-md shadow-xl border">
                <h3 class="text-lg font-semibold mb-4 text-card" id="goal-modal-title">Nuevo Objetivo de Ahorro</h3>
                
                <div class="space-y-4">
                    <div>
                        <label class="block text-sm font-medium mb-1 text-card">Nombre del objetivo</label>
                        <input type="text" id="goal-name" placeholder="ej: Vacaciones en Italia" 
                            class="w-full px-3 py-2 border border-card rounded-lg bg-card text-card focus:ring-2 focus:ring-blue-500 focus:border-transparent">
                    </div>
                    
                    <div class="grid grid-cols-2 gap-4">
                        <div>
                            <label class="block text-sm font-medium mb-1 text-card">Cantidad objetivo</label>
                            <input type="number" id="goal-target" step="0.01" placeholder="2000" 
                                class="w-full px-3 py-2 border border-card rounded-lg bg-card text-card focus:ring-2 focus:ring-blue-500 focus:border-transparent">
                        </div>
                        <div>
                            <label class="block text-sm font-medium mb-1 text-card">Fecha inicio</label>
                            <input type="date" id="goal-start-date" 
                                class="w-full px-3 py-2 border border-card rounded-lg bg-card text-card focus:ring-2 focus:ring-blue-500 focus:border-transparent">
                        </div>
                    </div>
                    
                    <div>
                        <label class="block text-sm font-medium mb-1 text-card">Fecha límite</label>
                        <input type="date" id="goal-deadline" 
                            class="w-full px-3 py-2 border border-card rounded-lg bg-card text-card focus:ring-2 focus:ring-blue-500 focus:border-transparent">
                    </div>
                    
                    <div>
                        <label class="block text-sm font-medium mb-1 text-card">Cantidad ya ahorrada</label>
                        <div class="space-y-2">
                            <input type="number" id="goal-current" step="0.01" placeholder="500" 
                                class="w-full px-3 py-2 border border-card rounded-lg bg-card text-card focus:ring-2 focus:ring-blue-500 focus:border-transparent">
                            <div class="flex items-center space-x-2">
                                <input type="checkbox" id="goal-auto-calculate" class="rounded border-card" onchange="toggleAutoCalculate()">
                                <label for="goal-auto-calculate" class="text-sm text-muted">Calcular automáticamente desde la fecha de inicio</label>
                            </div>
                            <div class="text-xs text-blue-600 dark:text-blue-400 mt-1">
                                <p>💡 <strong>Sistema de prioridades:</strong></p>
                                <p>• <strong>Alta prioridad:</strong> Recibe todo el ahorro primero hasta completarse</p>
                                <p>• <strong>Misma prioridad:</strong> Se divide equitativamente entre objetivos (50/50, no proporcional)</p>
                                <p>• Solo cuenta ahorro desde la fecha de inicio de este objetivo</p>
                            </div>
                        </div>
                    </div>
                    
                    <div>
                        <label class="block text-sm font-medium mb-1 text-card">Prioridad</label>
                        <select id="goal-priority" 
                            class="w-full px-3 py-2 border border-card rounded-lg bg-card text-card focus:ring-2 focus:ring-blue-500 focus:border-transparent">
                            <option value="low">🟢 Baja</option>
                            <option value="medium" selected>🟡 Media</option>
                            <option value="high">🔴 Alta</option>
                        </select>
                    </div>
                    
                    <div>
                        <label class="block text-sm font-medium mb-1 text-card">Icono</label>
                        <input type="text" id="goal-icon" placeholder="🏖️" value="🎯" 
                            class="w-full px-3 py-2 border border-card rounded-lg bg-card text-card focus:ring-2 focus:ring-blue-500 focus:border-transparent">
                    </div>
                    
                    <div>
                        <label class="block text-sm font-medium mb-1 text-card">Descripción (opcional)</label>
                        <textarea id="goal-description" rows="2" placeholder="Detalles sobre este objetivo..." 
                            class="w-full px-3 py-2 border border-card rounded-lg bg-card text-card focus:ring-2 focus:ring-blue-500 focus:border-transparent"></textarea>
                    </div>
                </div>
                
                <div class="flex justify-end space-x-3 mt-6">
                    <button onclick="closeGoalModal()" 
                        class="px-4 py-2 text-muted hover-bg rounded-lg transition-colors">
                        Cancelar
                    </button>
                    <button onclick="saveGoal()" 
                        class="btn-primary px-4 py-2 rounded-lg">
                        Guardar
                    </button>
                </div>
            </div>
        </div>
    </div>

    <!-- Modal para agregar/editar transacción recurrente -->
    <div id="recurring-modal" class="fixed inset-0 bg-black bg-opacity-50 hidden z-50">
        <div class="flex items-center justify-center min-h-screen p-4">
            <div class="bg-card border-card rounded-xl p-6 w-full max-w-md shadow-xl border">
                <h3 class="text-lg font-semibold mb-4 text-card" id="recurring-modal-title">Nueva Transacción Recurrente</h3>
                
                <div class="space-y-4">
                    <div>
                        <label class="block text-sm font-medium mb-1 text-card">Descripción</label>
                        <input type="text" id="recurring-description" 
                            class="w-full px-3 py-2 border border-card rounded-lg bg-card text-card focus:ring-2 focus:ring-blue-500 focus:border-transparent">
                    </div>
                    
                    <div class="grid grid-cols-2 gap-4">
                        <div>
                            <label class="block text-sm font-medium mb-1 text-card">Cantidad</label>
                            <input type="number" id="recurring-amount" step="0.01" 
                                class="w-full px-3 py-2 border border-card rounded-lg bg-card text-card focus:ring-2 focus:ring-blue-500 focus:border-transparent">
                        </div>
                        <div>
                            <label class="block text-sm font-medium mb-1 text-card">Tipo</label>
                            <select id="recurring-type" onchange="updateRecurringCategoryOptions()"
                                class="w-full px-3 py-2 border border-card rounded-lg bg-card text-card focus:ring-2 focus:ring-blue-500 focus:border-transparent">
                                <option value="expense">Gasto</option>
                                <option value="income">Ingreso</option>
                            </select>
                        </div>
                    </div>
                    
                    <!-- Campo de valor variable -->
                    <div class="bg-yellow-50 dark:bg-yellow-900/20 p-4 rounded-lg border border-yellow-200 dark:border-yellow-800">
                        <div class="flex items-center space-x-2 mb-3">
                            <input type="checkbox" id="recurring-variable" class="rounded border-card" onchange="toggleVariableAmount()">
                            <label for="recurring-variable" class="text-sm font-medium text-yellow-800 dark:text-yellow-200">
                                💡 Valor variable (ej: recibo luz, gas, agua)
                            </label>
                        </div>
                        <div id="variable-amount-info" class="hidden">
                            <p class="text-xs text-yellow-700 dark:text-yellow-300 mb-2">
                                La cantidad arriba será el <strong>importe estimado/promedio</strong>. Podrás actualizarla fácilmente cuando sepas el importe real.
                            </p>
                            <div class="grid grid-cols-2 gap-3">
                                <div>
                                    <label class="block text-xs font-medium text-yellow-700 dark:text-yellow-300 mb-1">Importe mínimo usual:</label>
                                    <input type="number" id="recurring-min-amount" step="0.01" placeholder="Opcional"
                                        class="w-full px-2 py-1 border border-yellow-300 dark:border-yellow-700 rounded text-xs bg-white dark:bg-gray-800 text-card">
                                </div>
                                <div>
                                    <label class="block text-xs font-medium text-yellow-700 dark:text-yellow-300 mb-1">Importe máximo usual:</label>
                                    <input type="number" id="recurring-max-amount" step="0.01" placeholder="Opcional"
                                        class="w-full px-2 py-1 border border-yellow-300 dark:border-yellow-700 rounded text-xs bg-white dark:bg-gray-800 text-card">
                                </div>
                            </div>
                        </div>
                    </div>
                    
                    <div>
                        <label class="block text-sm font-medium mb-1 text-card">Categoría</label>
                        <select id="recurring-category" 
                            class="w-full px-3 py-2 border border-card rounded-lg bg-card text-card focus:ring-2 focus:ring-blue-500 focus:border-transparent">
                            <!-- Opciones se cargarán dinámicamente -->
                        </select>
                    </div>
                    
                    <div>
                        <label class="block text-sm font-medium mb-1 text-card">Frecuencia</label>
                        <select id="recurring-frequency" onchange="updateRecurringDateFields()"
                            class="w-full px-3 py-2 border border-card rounded-lg bg-card text-card focus:ring-2 focus:ring-blue-500 focus:border-transparent">
                            <option value="daily">Diaria</option>
                            <option value="weekly">Semanal</option>
                            <option value="monthly">Mensual</option>
                            <option value="yearly">Anual</option>
                        </select>
                    </div>
                    
                    <div id="day-of-month-field" class="hidden">
                        <label class="block text-sm font-medium mb-1 text-card">Día del mes</label>
                        <select id="recurring-day-of-month"
                            class="w-full px-3 py-2 border border-card rounded-lg bg-card text-card focus:ring-2 focus:ring-blue-500 focus:border-transparent">
                            <!-- Se llenarán dinámicamente del 1 al 31 -->
                        </select>
                    </div>
                    
                    <div class="grid grid-cols-2 gap-4">
                        <div>
                            <label class="block text-sm font-medium mb-1 text-card">Fecha inicio</label>
                            <input type="date" id="recurring-start-date" 
                                class="w-full px-3 py-2 border border-card rounded-lg bg-card text-card focus:ring-2 focus:ring-blue-500 focus:border-transparent">
                        </div>
                        <div>
                            <label class="block text-sm font-medium mb-1 text-card">Fecha fin (opcional)</label>
                            <input type="date" id="recurring-end-date" 
                                class="w-full px-3 py-2 border border-card rounded-lg bg-card text-card focus:ring-2 focus:ring-blue-500 focus:border-transparent">
                        </div>
                    </div>
                    
                    <div class="flex items-center space-x-2">
                        <input type="checkbox" id="recurring-active" class="rounded border-card">
                        <label for="recurring-active" class="text-sm text-card">Activa (generar transacciones automáticamente)</label>
                    </div>
                </div>
                
                <div class="flex justify-end space-x-3 mt-6">
                    <button onclick="closeRecurringModal()" 
                        class="px-4 py-2 text-muted hover-bg rounded-lg transition-colors">
                        Cancelar
                    </button>
                    <button onclick="saveRecurring()" 
                        class="btn-primary px-4 py-2 rounded-lg">
                        Guardar
                    </button>
                </div>
            </div>
        </div>
    </div>

    <!-- Modal para importar Excel -->
    <div id="excel-import-modal" class="fixed inset-0 bg-black bg-opacity-50 hidden z-50">
        <div class="flex items-center justify-center min-h-screen p-4">
            <div class="bg-card border-card rounded-xl p-6 w-full max-w-4xl shadow-xl border max-h-[90vh] overflow-y-auto">
                <div class="flex justify-between items-center mb-6">
                    <h3 class="text-xl font-semibold text-card">Importar Transacciones desde Excel</h3>
                    <button onclick="closeExcelImportModal()" class="p-2 text-muted hover:text-card rounded-lg hover-bg">
                        ✖️
                    </button>
                </div>
                
                <!-- Paso 1: Seleccionar archivo -->
                <div id="excel-step-1" class="excel-step">
                    <h4 class="text-lg font-medium mb-4 text-card">Paso 1: Seleccionar archivo Excel</h4>
                    
                    <div class="drag-drop-area p-8 text-center bg-gray-50 dark:bg-gray-800 mb-4" id="drop-area">
                        <div class="mb-4">
                            <span class="text-4xl">📊</span>
                        </div>
                        <p class="text-lg font-medium text-card mb-2">Arrastra tu archivo Excel aquí</p>
                        <p class="text-sm text-muted mb-4">o haz clic para seleccionar un archivo</p>
                        <input type="file" id="excel-file-input" accept=".xlsx,.xls" class="hidden">
                        <button onclick="document.getElementById('excel-file-input').click()" 
                            class="btn-primary px-6 py-3 rounded-lg">
                            Seleccionar archivo
                        </button>
                        <p class="text-xs text-muted mt-2">Formatos soportados: .xlsx, .xls</p>
                    </div>
                    
                    <div id="file-info" class="hidden bg-blue-50 dark:bg-blue-900/20 p-4 rounded-lg border border-blue-200 dark:border-blue-800">
                        <div class="flex items-center space-x-3">
                            <span class="text-2xl">📄</span>
                            <div>
                                <p class="font-medium text-card" id="file-name"></p>
                                <p class="text-sm text-muted" id="file-size"></p>
                            </div>
                        </div>
                    </div>
                </div>
                
                <!-- Paso 2: Vista previa y mapeo -->
                <div id="excel-step-2" class="excel-step hidden">
                    <h4 class="text-lg font-medium mb-4 text-card">Paso 2: Mapear columnas del Excel</h4>
                    
                    <div class="mb-6">
                        <label class="block text-sm font-medium text-card mb-2">Hoja a importar:</label>
                        <select id="sheet-selector" class="px-3 py-2 border border-card rounded-lg bg-card text-card focus:ring-2 focus:ring-blue-500 focus:border-transparent">
                            <!-- Opciones se cargarán dinámicamente -->
                        </select>
                    </div>
                    
                    <div class="grid grid-cols-1 lg:grid-cols-2 gap-6 mb-6">
                        <div>
                            <h5 class="font-medium text-card mb-3">Mapeo de columnas:</h5>
                            <div class="space-y-3">
                                <div>
                                    <label class="block text-sm font-medium text-card mb-1">Descripción:</label>
                                    <select id="map-description" class="w-full px-3 py-2 border border-card rounded-lg bg-card text-card focus:ring-2 focus:ring-blue-500 focus:border-transparent text-sm">
                                        <option value="">Seleccionar columna...</option>
                                    </select>
                                </div>
                                <div>
                                    <label class="block text-sm font-medium text-card mb-1">Cantidad:</label>
                                    <select id="map-amount" class="w-full px-3 py-2 border border-card rounded-lg bg-card text-card focus:ring-2 focus:ring-blue-500 focus:border-transparent text-sm">
                                        <option value="">Seleccionar columna...</option>
                                    </select>
                                </div>
                                <div>
                                    <label class="block text-sm font-medium text-card mb-1">Fecha:</label>
                                    <select id="map-date" class="w-full px-3 py-2 border border-card rounded-lg bg-card text-card focus:ring-2 focus:ring-blue-500 focus:border-transparent text-sm">
                                        <option value="">Seleccionar columna...</option>
                                    </select>
                                </div>
                                <div>
                                    <label class="block text-sm font-medium text-card mb-1">Categoría (opcional):</label>
                                    <select id="map-category" class="w-full px-3 py-2 border border-card rounded-lg bg-card text-card focus:ring-2 focus:ring-blue-500 focus:border-transparent text-sm">
                                        <option value="">Seleccionar columna...</option>
                                    </select>
                                </div>
                                <div>
                                    <label class="block text-sm font-medium text-card mb-1">Tipo (opcional):</label>
                                    <select id="map-type" class="w-full px-3 py-2 border border-card rounded-lg bg-card text-card focus:ring-2 focus:ring-blue-500 focus:border-transparent text-sm">
                                        <option value="">Seleccionar columna...</option>
                                    </select>
                                </div>
                            </div>
                            
                            <div class="mt-4 p-3 bg-yellow-50 dark:bg-yellow-900/20 rounded-lg border border-yellow-200 dark:border-yellow-800">
                                <h6 class="font-medium text-yellow-800 dark:text-yellow-200 text-sm mb-2">Configuración por defecto:</h6>
                                <div class="space-y-2 text-sm">
                                    <div>
                                        <label class="block text-yellow-700 dark:text-yellow-300 mb-1">Categoría por defecto:</label>
                                        <select id="default-category" class="w-full px-2 py-1 border border-yellow-300 dark:border-yellow-700 rounded bg-white dark:bg-gray-800 text-card text-xs">
                                            <!-- Se llenarán dinámicamente -->
                                        </select>
                                    </div>
                                    <div>
                                        <label class="block text-yellow-700 dark:text-yellow-300 mb-1">Tipo por defecto:</label>
                                        <select id="default-type" class="w-full px-2 py-1 border border-yellow-300 dark:border-yellow-700 rounded bg-white dark:bg-gray-800 text-card text-xs">
                                            <option value="expense">Gasto</option>
                                            <option value="income">Ingreso</option>
                                        </select>
                                    </div>
                                </div>
                            </div>
                        </div>
                        
                        <div>
                            <h5 class="font-medium text-card mb-3">Vista previa de datos:</h5>
                            <div id="excel-preview" class="preview-table border border-card rounded-lg">
                                <!-- Vista previa se cargará aquí -->
                            </div>
                        </div>
                    </div>
                    
                    <div class="flex justify-between">
                        <button onclick="showExcelStep(1)" class="px-4 py-2 text-muted hover-bg rounded-lg transition-colors">
                            ← Volver
                        </button>
                        <button onclick="processExcelData()" class="btn-success px-6 py-3 rounded-lg">
                            Vista previa de importación →
                        </button>
                    </div>
                </div>
                
                <!-- Paso 3: Confirmación -->
                <div id="excel-step-3" class="excel-step hidden">
                    <h4 class="text-lg font-medium mb-4 text-card">Paso 3: Confirmar importación</h4>
                    
                    <div id="import-summary" class="bg-blue-50 dark:bg-blue-900/20 p-4 rounded-lg border border-blue-200 dark:border-blue-800 mb-6">
                        <!-- Resumen de importación -->
                    </div>
                    
                    <div id="import-preview" class="mb-6">
                        <h5 class="font-medium text-card mb-3">Transacciones a importar:</h5>
                        <div class="preview-table max-h-64 border border-card rounded-lg">
                            <!-- Vista previa de transacciones procesadas -->
                        </div>
                    </div>
                    
                    <div class="flex justify-between">
                        <button onclick="showExcelStep(2)" class="px-4 py-2 text-muted hover-bg rounded-lg transition-colors">
                            ← Volver
                        </button>
                        <button onclick="confirmImportExcel()" class="btn-success px-6 py-3 rounded-lg">
                            ✅ Confirmar importación
                        </button>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <script>
        // Estado global de la aplicación
        let appState = {
            activeTab: 'dashboard',
            transactions: [],
            categories: [],
            recurringTransactions: [],
            savingsGoals: [],
            savedSearches: [],
            editingTransaction: null,
            editingCategory: null,
            editingRecurring: null,
            editingGoal: null,
            currentSearchFilters: {},
            darkMode: false,
            selectedMonth: '',
            selectedYear: '',
            excelData: null,
            excelWorkbook: null,
            processedTransactions: []
        };

        // Categorías por defecto con colores mejorados
        const defaultCategories = [
            { id: 1, name: 'Alimentación', icon: '🍽️', type: 'expense', budget: 500, color: '#10b981' },
            { id: 2, name: 'Transporte', icon: '🚗', type: 'expense', budget: 200, color: '#f59e0b' },
            { id: 3, name: 'Vivienda', icon: '🏠', type: 'expense', budget: 800, color: '#8b5cf6' },
            { id: 4, name: 'Entretenimiento', icon: '🎬', type: 'expense', budget: 150, color: '#ef4444' },
            { id: 5, name: 'Salud', icon: '⚕️', type: 'expense', budget: 100, color: '#06b6d4' },
            { id: 6, name: 'Salario', icon: '💰', type: 'income', budget: 0, color: '#10b981' },
            { id: 7, name: 'Freelance', icon: '💻', type: 'income', budget: 0, color: '#3b82f6' },
            { id: 8, name: 'Inversiones', icon: '📈', type: 'income', budget: 0, color: '#f59e0b' }
        ];

        // Transacciones de ejemplo con fechas variadas
        const defaultTransactions = [
            { id: 1, description: 'Salario enero', amount: 2500, category: 6, type: 'income', date: '2024-01-01' },
            { id: 2, description: 'Alquiler enero', amount: -800, category: 3, type: 'expense', date: '2024-01-01' },
            { id: 3, description: 'Supermercado Mercadona', amount: -120, category: 1, type: 'expense', date: '2024-01-03' },
            { id: 4, description: 'Gasolina Shell', amount: -60, category: 2, type: 'expense', date: '2024-01-05' },
            { id: 5, description: 'Cine con amigos', amount: -25, category: 4, type: 'expense', date: '2024-01-07' },
            { id: 6, description: 'Proyecto freelance', amount: 500, category: 7, type: 'income', date: '2024-01-10' },
            { id: 7, description: 'Farmacia', amount: -35, category: 5, type: 'expense', date: '2024-01-12' },
            { id: 8, description: 'Salario febrero', amount: 2500, category: 6, type: 'income', date: '2024-02-01' },
            { id: 9, description: 'Alquiler febrero', amount: -800, category: 3, type: 'expense', date: '2024-02-01' },
            { id: 10, description: 'Compra semanal', amount: -85, category: 1, type: 'expense', date: '2024-02-04' }
        ];

        // Inicializar aplicación
        function initApp() {
            loadData();
            initializeDateSelectors();
            generatePendingTransactions(); // Generar transacciones pendientes al iniciar
            showTab('dashboard');
            updateTheme();
            setupExcelImportListeners();
        }

        // Cargar datos del localStorage
        function loadData() {
            const savedTransactions = localStorage.getItem('finance-transactions');
            const savedCategories = localStorage.getItem('finance-categories');
            const savedRecurring = localStorage.getItem('finance-recurring');
            const savedGoals = localStorage.getItem('finance-goals');
            const savedSearches = localStorage.getItem('finance-searches');
            const savedTheme = localStorage.getItem('finance-theme');

            appState.transactions = savedTransactions ? JSON.parse(savedTransactions) : defaultTransactions;
            appState.categories = savedCategories ? JSON.parse(savedCategories) : defaultCategories;
            appState.recurringTransactions = savedRecurring ? JSON.parse(savedRecurring) : [];
            appState.savingsGoals = savedGoals ? JSON.parse(savedGoals) : [];
            appState.savedSearches = savedSearches ? JSON.parse(savedSearches) : [];
            appState.darkMode = savedTheme === 'dark';
        }

        // Guardar datos en localStorage
        function saveData() {
            localStorage.setItem('finance-transactions', JSON.stringify(appState.transactions));
            localStorage.setItem('finance-categories', JSON.stringify(appState.categories));
            localStorage.setItem('finance-recurring', JSON.stringify(appState.recurringTransactions));
            localStorage.setItem('finance-goals', JSON.stringify(appState.savingsGoals));
            localStorage.setItem('finance-searches', JSON.stringify(appState.savedSearches));
        }

        // =============== FUNCIONES DE IMPORTACIÓN DE EXCEL ===============

        // Configurar listeners para importación de Excel
        function setupExcelImportListeners() {
            const fileInput = document.getElementById('excel-file-input');
            const dropArea = document.getElementById('drop-area');
            
            // Event listeners para drag and drop
            if (dropArea) {
                dropArea.addEventListener('click', () => fileInput.click());
                dropArea.addEventListener('dragover', handleDragOver);
                dropArea.addEventListener('drop', handleDrop);
                dropArea.addEventListener('dragenter', e => e.preventDefault());
                dropArea.addEventListener('dragleave', handleDragLeave);
            }
            
            // Event listener para input de archivo
            if (fileInput) {
                fileInput.addEventListener('change', handleFileSelect);
            }
            
            // Event listener para cambio de hoja
            const sheetSelector = document.getElementById('sheet-selector');
            if (sheetSelector) {
                sheetSelector.addEventListener('change', updateExcelPreview);
            }
        }

        // Manejar drag over
        function handleDragOver(e) {
            e.preventDefault();
            e.currentTarget.classList.add('dragover');
        }

        // Manejar drag leave
        function handleDragLeave(e) {
            e.currentTarget.classList.remove('dragover');
        }

        // Manejar drop
        function handleDrop(e) {
            e.preventDefault();
            e.currentTarget.classList.remove('dragover');
            
            const files = e.dataTransfer.files;
            if (files.length > 0) {
                handleFile(files[0]);
            }
        }

        // Manejar selección de archivo
        function handleFileSelect(e) {
            const file = e.target.files[0];
            if (file) {
                handleFile(file);
            }
        }

        // Procesar archivo seleccionado
        function handleFile(file) {
            if (!file.name.match(/\.(xlsx|xls)$/)) {
                alert('Por favor selecciona un archivo Excel válido (.xlsx o .xls)');
                return;
            }
            
            // Mostrar información del archivo
            document.getElementById('file-name').textContent = file.name;
            document.getElementById('file-size').textContent = `${(file.size / 1024 / 1024).toFixed(2)} MB`;
            document.getElementById('file-info').classList.remove('hidden');
            
            // Leer archivo Excel
            const reader = new FileReader();
            reader.onload = function(e) {
                try {
                    const data = new Uint8Array(e.target.result);
                    const workbook = XLSX.read(data, { type: 'array' });
                    
                    appState.excelWorkbook = workbook;
                    populateSheetSelector(workbook);
                    showExcelStep(2);
                } catch (error) {
                    console.error('Error leyendo archivo Excel:', error);
                    alert('Error al leer el archivo Excel. Asegúrate de que sea un archivo válido.');
                }
            };
            reader.readAsArrayBuffer(file);
        }

        // Llenar selector de hojas
        function populateSheetSelector(workbook) {
            const sheetSelector = document.getElementById('sheet-selector');
            sheetSelector.innerHTML = '';
            
            workbook.SheetNames.forEach(sheetName => {
                const option = document.createElement('option');
                option.value = sheetName;
                option.textContent = sheetName;
                sheetSelector.appendChild(option);
            });
            
            // Cargar la primera hoja por defecto
            if (workbook.SheetNames.length > 0) {
                updateExcelPreview();
            }
        }

        // Actualizar vista previa del Excel
        function updateExcelPreview() {
            if (!appState.excelWorkbook) return;
            
            const sheetName = document.getElementById('sheet-selector').value;
            const worksheet = appState.excelWorkbook.Sheets[sheetName];
            
            // Convertir a JSON
            const jsonData = XLSX.utils.sheet_to_json(worksheet, { header: 1 });
            
            if (jsonData.length === 0) {
                document.getElementById('excel-preview').innerHTML = '<p class="text-muted p-4">La hoja seleccionada está vacía</p>';
                return;
            }
            
            // Guardar datos para uso posterior
            appState.excelData = jsonData;
            
            // Mostrar vista previa (primeras 5 filas)
            const previewData = jsonData.slice(0, 6); // Header + 5 filas
            let tableHTML = '<table class="w-full"><thead><tr>';
            
            // Header
            if (previewData.length > 0) {
                previewData[0].forEach((header, index) => {
                    tableHTML += `<th>Columna ${index + 1}<br><small class="font-normal text-muted">${header || 'Sin nombre'}</small></th>`;
                });
                tableHTML += '</tr></thead><tbody>';
                
                // Filas de datos
                for (let i = 1; i < previewData.length; i++) {
                    tableHTML += '<tr>';
                    previewData[i].forEach(cell => {
                        tableHTML += `<td>${cell || ''}</td>`;
                    });
                    tableHTML += '</tr>';
                }
            }
            
            tableHTML += '</tbody></table>';
            document.getElementById('excel-preview').innerHTML = tableHTML;
            
            // Llenar selectores de mapeo
            populateColumnSelectors(jsonData[0] || []);
            populateDefaultSelectors();
        }

        // Llenar selectores de columnas
        function populateColumnSelectors(headers) {
            const selectors = ['map-description', 'map-amount', 'map-date', 'map-category', 'map-type'];
            
            selectors.forEach(selectorId => {
                const selector = document.getElementById(selectorId);
                selector.innerHTML = '<option value="">Seleccionar columna...</option>';
                
                headers.forEach((header, index) => {
                    const option = document.createElement('option');
                    option.value = index;
                    option.textContent = `Columna ${index + 1}: ${header || 'Sin nombre'}`;
                    selector.appendChild(option);
                });
            });
        }

        // Llenar selectores por defecto
        function populateDefaultSelectors() {
            const categorySelector = document.getElementById('default-category');
            categorySelector.innerHTML = '';
            
            appState.categories.forEach(category => {
                const option = document.createElement('option');
                option.value = category.id;
                option.textContent = `${category.icon} ${category.name}`;
                categorySelector.appendChild(option);
            });
        }

        // Procesar datos del Excel
        function processExcelData() {
            if (!appState.excelData || appState.excelData.length < 2) {
                alert('No hay datos suficientes para procesar');
                return;
            }
            
            // Obtener mapeo de columnas
            const mapping = {
                description: parseInt(document.getElementById('map-description').value),
                amount: parseInt(document.getElementById('map-amount').value),
                date: parseInt(document.getElementById('map-date').value),
                category: document.getElementById('map-category').value ? parseInt(document.getElementById('map-category').value) : null,
                type: document.getElementById('map-type').value ? parseInt(document.getElementById('map-type').value) : null
            };
            
            // Validar campos obligatorios
            if (isNaN(mapping.description) || isNaN(mapping.amount) || isNaN(mapping.date)) {
                alert('Los campos Descripción, Cantidad y Fecha son obligatorios');
                return;
            }
            
            // Obtener valores por defecto
            const defaultCategory = parseInt(document.getElementById('default-category').value);
            const defaultType = document.getElementById('default-type').value;
            
            // Procesar filas de datos (omitir header)
            const processedTransactions = [];
            const errors = [];
            
            for (let i = 1; i < appState.excelData.length; i++) {
                const row = appState.excelData[i];
                
                try {
                    // Extraer datos básicos
                    const description = row[mapping.description]?.toString().trim();
                    const amountStr = row[mapping.amount]?.toString().trim();
                    const dateStr = row[mapping.date]?.toString().trim();
                    
                    if (!description || !amountStr || !dateStr) {
                        errors.push(`Fila ${i + 1}: Datos incompletos`);
                        continue;
                    }
                    
                    // Procesar cantidad
                    let amount = parseFloat(amountStr.replace(/[^-0-9.,]/g, '').replace(',', '.'));
                    if (isNaN(amount)) {
                        errors.push(`Fila ${i + 1}: Cantidad inválida (${amountStr})`);
                        continue;
                    }
                    
                    // Procesar fecha
                    let date;
                    if (typeof row[mapping.date] === 'number') {
                        // Fecha de Excel (número de días desde 1900)
                        const excelDate = XLSX.SSF.parse_date_code(row[mapping.date]);
                        // Crear fecha sin problemas de zona horaria
                        date = new Date(excelDate.y, excelDate.m - 1, excelDate.d, 12, 0, 0, 0);
                    } else {
                        // Intentar parsear como string evitando problemas de zona horaria
                        if (dateStr.includes('/')) {
                            // Formato DD/MM/YYYY o MM/DD/YYYY
                            const parts = dateStr.split('/');
                            if (parts.length === 3) {
                                // Asumir DD/MM/YYYY (formato europeo)
                                const day = parseInt(parts[0]);
                                const month = parseInt(parts[1]) - 1; // JavaScript months are 0-indexed
                                const year = parseInt(parts[2]);
                                date = new Date(year, month, day, 12, 0, 0, 0);
                            } else {
                                date = new Date(dateStr);
                            }
                        } else if (dateStr.includes('-')) {
                            // Formato YYYY-MM-DD
                            const parts = dateStr.split('-');
                            if (parts.length === 3) {
                                const year = parseInt(parts[0]);
                                const month = parseInt(parts[1]) - 1;
                                const day = parseInt(parts[2]);
                                date = new Date(year, month, day, 12, 0, 0, 0);
                            } else {
                                date = new Date(dateStr);
                            }
                        } else {
                            date = new Date(dateStr);
                        }
                    }
                    
                    if (isNaN(date.getTime())) {
                        errors.push(`Fila ${i + 1}: Fecha inválida (${dateStr})`);
                        continue;
                    }
                    
                    // Procesar tipo
                    let type = defaultType;
                    if (mapping.type !== null) {
                        const typeStr = row[mapping.type]?.toString().toLowerCase().trim();
                        if (typeStr === 'ingreso' || typeStr === 'income' || typeStr === 'positivo') {
                            type = 'income';
                        } else if (typeStr === 'gasto' || typeStr === 'expense' || typeStr === 'negativo') {
                            type = 'expense';
                        }
                    }
                    
                    // Ajustar signo según tipo
                    if (type === 'expense' && amount > 0) {
                        amount = -amount;
                    } else if (type === 'income' && amount < 0) {
                        amount = Math.abs(amount);
                    }
                    
                    // Procesar categoría
                    let categoryId = defaultCategory;
                    if (mapping.category !== null) {
                        const categoryStr = row[mapping.category]?.toString().trim();
                        if (categoryStr) {
                            // Buscar categoría por nombre
                            const foundCategory = appState.categories.find(c => 
                                c.name.toLowerCase().includes(categoryStr.toLowerCase()) ||
                                categoryStr.toLowerCase().includes(c.name.toLowerCase())
                            );
                            if (foundCategory) {
                                categoryId = foundCategory.id;
                            }
                        }
                    }
                    
                    // Crear transacción
                    const transaction = {
                        id: Date.now() + i, // ID único temporal
                        description: description,
                        amount: amount,
                        type: type,
                        category: categoryId,
                        date: date.toISOString().split('T')[0]
                    };
                    
                    processedTransactions.push(transaction);
                    
                } catch (error) {
                    errors.push(`Fila ${i + 1}: Error procesando datos (${error.message})`);
                }
            }
            
            appState.processedTransactions = processedTransactions;
            
            // Mostrar resumen
            showImportSummary(processedTransactions, errors);
            showExcelStep(3);
        }

        // Mostrar resumen de importación
        function showImportSummary(transactions, errors) {
            const summary = document.getElementById('import-summary');
            const preview = document.getElementById('import-preview');
            
            // Calcular estadísticas
            const totalTransactions = transactions.length;
            const totalIncome = transactions.filter(t => t.amount > 0).reduce((sum, t) => sum + t.amount, 0);
            const totalExpenses = transactions.filter(t => t.amount < 0).reduce((sum, t) => sum + Math.abs(t.amount), 0);
            
            // Generar resumen
            summary.innerHTML = `
                <div class="grid grid-cols-1 sm:grid-cols-3 gap-4 mb-4">
                    <div class="text-center">
                        <p class="text-2xl font-bold text-blue-600">${totalTransactions}</p>
                        <p class="text-sm text-muted">Transacciones</p>
                    </div>
                    <div class="text-center">
                        <p class="text-2xl font-bold text-green-600">€${totalIncome.toFixed(2)}</p>
                        <p class="text-sm text-muted">Ingresos</p>
                    </div>
                    <div class="text-center">
                        <p class="text-2xl font-bold text-red-600">€${totalExpenses.toFixed(2)}</p>
                        <p class="text-sm text-muted">Gastos</p>
                    </div>
                </div>
                ${errors.length > 0 ? `
                    <div class="bg-yellow-50 dark:bg-yellow-900/20 p-3 rounded border border-yellow-200 dark:border-yellow-800">
                        <p class="font-medium text-yellow-800 dark:text-yellow-200 text-sm">Advertencias (${errors.length}):</p>
                        <ul class="text-xs text-yellow-700 dark:text-yellow-300 mt-1 list-disc list-inside max-h-20 overflow-y-auto">
                            ${errors.slice(0, 5).map(error => `<li>${error}</li>`).join('')}
                            ${errors.length > 5 ? `<li>... y ${errors.length - 5} más</li>` : ''}
                        </ul>
                    </div>
                ` : ''}
            `;
            
            // Generar vista previa de transacciones
            let previewHTML = '<table class="w-full"><thead><tr>';
            previewHTML += '<th>Descripción</th><th>Cantidad</th><th>Tipo</th><th>Categoría</th><th>Fecha</th>';
            previewHTML += '</tr></thead><tbody>';
            
            transactions.slice(0, 10).forEach(transaction => {
                const category = appState.categories.find(c => c.id === transaction.category);
                previewHTML += `
                    <tr>
                        <td>${transaction.description}</td>
                        <td class="${transaction.amount > 0 ? 'text-green-600' : 'text-red-600'}">${transaction.amount > 0 ? '+' : ''}€${Math.abs(transaction.amount).toFixed(2)}</td>
                        <td>${transaction.type === 'income' ? 'Ingreso' : 'Gasto'}</td>
                        <td>${category ? `${category.icon} ${category.name}` : 'Sin categoría'}</td>
                        <td>${new Date(transaction.date).toLocaleDateString('es-ES')}</td>
                    </tr>
                `;
            });
            
            if (transactions.length > 10) {
                previewHTML += `<tr><td colspan="5" class="text-center text-muted text-sm">... y ${transactions.length - 10} transacciones más</td></tr>`;
            }
            
            previewHTML += '</tbody></table>';
            preview.innerHTML = previewHTML;
        }

        // Confirmar importación
        function confirmImportExcel() {
            if (!appState.processedTransactions || appState.processedTransactions.length === 0) {
                alert('No hay transacciones para importar');
                return;
            }
            
            // Generar IDs únicos y agregar a transacciones existentes
            const maxId = Math.max(...appState.transactions.map(t => t.id), 0);
            appState.processedTransactions.forEach((transaction, index) => {
                transaction.id = maxId + index + 1;
                appState.transactions.push(transaction);
            });
            
            // Guardar datos
            saveData();
            
            // Mostrar mensaje de éxito
            alert(`✅ Se han importado ${appState.processedTransactions.length} transacciones exitosamente`);
            
            // Cerrar modal y recargar vista
            closeExcelImportModal();
            if (appState.activeTab === 'transactions') {
                loadTransactions();
            } else {
                showTab('transactions');
            }
        }

        // Mostrar modal de importación de Excel
        function showImportExcel() {
            showExcelStep(1);
            document.getElementById('excel-import-modal').classList.remove('hidden');
        }

        // Cerrar modal de importación
        function closeExcelImportModal() {
            document.getElementById('excel-import-modal').classList.add('hidden');
            
            // Limpiar estado
            appState.excelData = null;
            appState.excelWorkbook = null;
            appState.processedTransactions = [];
            
            // Limpiar formulario
            document.getElementById('excel-file-input').value = '';
            document.getElementById('file-info').classList.add('hidden');
        }

        // Mostrar paso específico del wizard
        function showExcelStep(step) {
            // Ocultar todos los pasos
            document.querySelectorAll('.excel-step').forEach(el => el.classList.add('hidden'));
            
            // Mostrar paso actual
            document.getElementById(`excel-step-${step}`).classList.remove('hidden');
        }

        // =============== FUNCIÓN DE EXPORTACIÓN A EXCEL ===============

        // Exportar datos a Excel
        function exportToExcel() {
            try {
                // Obtener transacciones filtradas actuales
                const filteredTransactions = getFilteredTransactions();
                
                if (filteredTransactions.length === 0) {
                    alert('No hay transacciones para exportar en el período seleccionado');
                    return;
                }
                
                // Preparar datos de transacciones
                const transactionsData = [
                    // Header
                    ['Fecha', 'Descripción', 'Cantidad', 'Tipo', 'Categoría', 'ID Categoría']
                ];
                
                // Añadir transacciones
                filteredTransactions
                    .sort((a, b) => new Date(b.date) - new Date(a.date)) // Más recientes primero
                    .forEach(transaction => {
                        const category = appState.categories.find(c => c.id === transaction.category);
                        transactionsData.push([
                            transaction.date,
                            transaction.description,
                            transaction.amount,
                            transaction.type === 'income' ? 'Ingreso' : 'Gasto',
                            category ? category.name : 'Sin categoría',
                            transaction.category
                        ]);
                    });
                
                // Preparar datos de categorías
                const categoriesData = [
                    // Header
                    ['ID', 'Nombre', 'Tipo', 'Icono', 'Presupuesto', 'Color']
                ];
                
                // Añadir categorías
                appState.categories.forEach(category => {
                    categoriesData.push([
                        category.id,
                        category.name,
                        category.type === 'income' ? 'Ingreso' : 'Gasto',
                        category.icon,
                        category.budget || 0,
                        category.color || '#6b7280'
                    ]);
                });
                
                // Crear workbook
                const wb = XLSX.utils.book_new();
                
                // Crear hoja de transacciones
                const wsTransactions = XLSX.utils.aoa_to_sheet(transactionsData);
                
                // Configurar ancho de columnas para transacciones
                wsTransactions['!cols'] = [
                    { wch: 12 }, // Fecha
                    { wch: 30 }, // Descripción
                    { wch: 12 }, // Cantidad
                    { wch: 10 }, // Tipo
                    { wch: 20 }, // Categoría
                    { wch: 12 }  // ID Categoría
                ];
                
                // Crear hoja de categorías
                const wsCategories = XLSX.utils.aoa_to_sheet(categoriesData);
                
                // Configurar ancho de columnas para categorías
                wsCategories['!cols'] = [
                    { wch: 8 },  // ID
                    { wch: 20 }, // Nombre
                    { wch: 10 }, // Tipo
                    { wch: 8 },  // Icono
                    { wch: 12 }, // Presupuesto
                    { wch: 12 }  // Color
                ];
                
                // Añadir hojas al workbook
                XLSX.utils.book_append_sheet(wb, wsTransactions, 'Transacciones');
                XLSX.utils.book_append_sheet(wb, wsCategories, 'Categorías');
                
                // Generar nombre de archivo con fecha y período
                let fileName = 'finanzas-personales';
                
                // Añadir información del período al nombre
                const monthSelector = document.getElementById('month-selector');
                const yearSelector = document.getElementById('year-selector');
                
                if (appState.selectedMonth && appState.selectedYear) {
                    if (appState.selectedMonth.includes('-')) {
                        // Rango especial
                        const periodName = monthSelector.options[monthSelector.selectedIndex].textContent
                            .toLowerCase().replace(/\s+/g, '-');
                        fileName += `-${periodName}`;
                    } else {
                        // Mes específico
                        const monthNames = ['ene', 'feb', 'mar', 'abr', 'may', 'jun', 
                                          'jul', 'ago', 'sep', 'oct', 'nov', 'dic'];
                        fileName += `-${monthNames[parseInt(appState.selectedMonth) - 1]}-${appState.selectedYear}`;
                    }
                } else if (appState.selectedMonth) {
                    if (appState.selectedMonth.includes('-')) {
                        const periodName = monthSelector.options[monthSelector.selectedIndex].textContent
                            .toLowerCase().replace(/\s+/g, '-');
                        fileName += `-${periodName}`;
                    } else {
                        const monthNames = ['ene', 'feb', 'mar', 'abr', 'may', 'jun', 
                                          'jul', 'ago', 'sep', 'oct', 'nov', 'dic'];
                        fileName += `-${monthNames[parseInt(appState.selectedMonth) - 1]}`;
                    }
                } else if (appState.selectedYear) {
                    fileName += `-${appState.selectedYear}`;
                } else {
                    fileName += '-completo';
                }
                
                // Añadir fecha de exportación
                const today = new Date();
                const dateStr = today.toISOString().split('T')[0].replace(/-/g, '');
                fileName += `-${dateStr}.xlsx`;
                
                // Descargar archivo
                XLSX.writeFile(wb, fileName);
                
                // Mostrar mensaje de éxito
                const totalIncome = filteredTransactions.filter(t => t.amount > 0).length;
                const totalExpenses = filteredTransactions.filter(t => t.amount < 0).length;
                
                alert(`✅ Exportación exitosa!\n\n` +
                      `📊 ${filteredTransactions.length} transacciones exportadas\n` +
                      `💰 ${totalIncome} ingresos | 💸 ${totalExpenses} gastos\n` +
                      `📋 ${appState.categories.length} categorías incluidas\n\n` +
                      `📁 Archivo: ${fileName}`);
                
            } catch (error) {
                console.error('Error exportando a Excel:', error);
                alert('❌ Error al exportar los datos. Por favor intenta de nuevo.');
            }
        }

        // =============== FUNCIONES DE TRANSACCIONES RECURRENTES ===============

        // Mostrar modal de agregar transacción recurrente
        function showAddRecurring() {
            try {
                appState.editingRecurring = null;
                document.getElementById('recurring-modal-title').textContent = 'Nueva Transacción Recurrente';
                
                // Limpiar formulario con seguridad
                clearRecurringForm();
                
                // Actualizar opciones con verificaciones
                updateRecurringCategoryOptions();
                updateRecurringDateFields();
                populateDayOfMonthOptions();
                
                // Mostrar modal
                const modal = document.getElementById('recurring-modal');
                if (modal) {
                    modal.classList.remove('hidden');
                } else {
                    console.error('Modal de transacciones recurrentes no encontrado');
                    alert('Error: No se pudo abrir el formulario de transacciones recurrentes');
                }
            } catch (error) {
                console.error('Error al abrir modal de recurrentes:', error);
                alert('Error al abrir el formulario. Por favor, recarga la página.');
            }
        }

        // Cerrar modal de transacciones recurrentes
        function closeRecurringModal() {
            document.getElementById('recurring-modal').classList.add('hidden');
            appState.editingRecurring = null;
        }

        // Alternar mostrar/ocultar información de valor variable
        function toggleVariableAmount() {
            const checkbox = document.getElementById('recurring-variable');
            const infoDiv = document.getElementById('variable-amount-info');
            const amountLabel = document.querySelector('label[for="recurring-amount"]');
            
            // Verificar que todos los elementos existan
            if (!checkbox || !infoDiv || !amountLabel) {
                console.log('Elementos de valor variable no encontrados, saltando función');
                return;
            }
            
            if (checkbox.checked) {
                infoDiv.classList.remove('hidden');
                amountLabel.innerHTML = 'Cantidad (estimada/promedio) <span class="text-yellow-600">*</span>';
            } else {
                infoDiv.classList.add('hidden');
                amountLabel.textContent = 'Cantidad';
            }
        }

        // Limpiar formulario de recurrentes
        function clearRecurringForm() {
            document.getElementById('recurring-description').value = '';
            document.getElementById('recurring-amount').value = '';
            document.getElementById('recurring-type').value = 'expense';
            document.getElementById('recurring-frequency').value = 'monthly';
            document.getElementById('recurring-start-date').value = new Date().toISOString().split('T')[0];
            document.getElementById('recurring-end-date').value = '';
            document.getElementById('recurring-active').checked = true;
            
            // Campos de valor variable (verificar que existan)
            const variableCheckbox = document.getElementById('recurring-variable');
            const minAmountField = document.getElementById('recurring-min-amount');
            const maxAmountField = document.getElementById('recurring-max-amount');
            
            if (variableCheckbox) {
                variableCheckbox.checked = false;
            }
            if (minAmountField) {
                minAmountField.value = '';
            }
            if (maxAmountField) {
                maxAmountField.value = '';
            }
            
            // Resetear vista de valor variable solo si existe
            setTimeout(() => {
                if (typeof toggleVariableAmount === 'function') {
                    toggleVariableAmount();
                }
            }, 50);
        }

        // Actualizar opciones de categoría para recurrentes
        function updateRecurringCategoryOptions() {
            try {
                const type = document.getElementById('recurring-type').value;
                const categorySelect = document.getElementById('recurring-category');
                
                if (!categorySelect) {
                    console.log('Campo de categoría no encontrado');
                    return;
                }
                
                categorySelect.innerHTML = '';
                
                const filteredCategories = appState.categories.filter(c => c.type === type);
                
                if (filteredCategories.length === 0) {
                    const option = document.createElement('option');
                    option.value = '';
                    option.textContent = `No hay categorías de ${type === 'expense' ? 'gastos' : 'ingresos'} disponibles`;
                    categorySelect.appendChild(option);
                    return;
                }
                
                filteredCategories.forEach(category => {
                    const option = document.createElement('option');
                    option.value = category.id;
                    option.textContent = `${category.icon} ${category.name}`;
                    categorySelect.appendChild(option);
                });
            } catch (error) {
                console.error('Error actualizando categorías recurrentes:', error);
            }
        }

        // Actualizar campos de fecha según frecuencia
        function updateRecurringDateFields() {
            try {
                const frequency = document.getElementById('recurring-frequency').value;
                const dayOfMonthField = document.getElementById('day-of-month-field');
                
                if (!dayOfMonthField) {
                    console.log('Campo día del mes no encontrado');
                    return;
                }
                
                if (frequency === 'monthly' || frequency === 'yearly') {
                    dayOfMonthField.classList.remove('hidden');
                } else {
                    dayOfMonthField.classList.add('hidden');
                }
            } catch (error) {
                console.error('Error actualizando campos de fecha:', error);
            }
        }

        // Llenar opciones de día del mes (1-31)
        function populateDayOfMonthOptions() {
            try {
                const select = document.getElementById('recurring-day-of-month');
                
                if (!select) {
                    console.log('Selector día del mes no encontrado');
                    return;
                }
                
                select.innerHTML = '';
                
                for (let i = 1; i <= 31; i++) {
                    const option = document.createElement('option');
                    option.value = i;
                    option.textContent = i;
                    select.appendChild(option);
                }
                
                // Seleccionar el día actual por defecto
                const today = new Date().getDate();
                select.value = today;
            } catch (error) {
                console.error('Error poblando días del mes:', error);
            }
        }

        // Guardar transacción recurrente
        function saveRecurring() {
            const description = document.getElementById('recurring-description').value.trim();
            const amount = parseFloat(document.getElementById('recurring-amount').value);
            const type = document.getElementById('recurring-type').value;
            const category = parseInt(document.getElementById('recurring-category').value);
            const frequency = document.getElementById('recurring-frequency').value;
            const startDate = document.getElementById('recurring-start-date').value;
            const endDate = document.getElementById('recurring-end-date').value;
            const dayOfMonth = parseInt(document.getElementById('recurring-day-of-month').value);
            const active = document.getElementById('recurring-active').checked;
            const isVariable = document.getElementById('recurring-variable').checked;
            const minAmount = parseFloat(document.getElementById('recurring-min-amount').value) || null;
            const maxAmount = parseFloat(document.getElementById('recurring-max-amount').value) || null;

            // Validaciones
            if (!description) {
                alert('Por favor ingresa una descripción');
                return;
            }
            
            if (!amount || amount <= 0) {
                alert('Por favor ingresa una cantidad válida');
                return;
            }
            
            if (!category) {
                alert('Por favor selecciona una categoría');
                return;
            }
            
            if (!startDate) {
                alert('Por favor selecciona una fecha de inicio');
                return;
            }

            const finalAmount = type === 'expense' ? -Math.abs(amount) : Math.abs(amount);

            if (appState.editingRecurring) {
                // Editar recurrente existente
                const index = appState.recurringTransactions.findIndex(r => r.id === appState.editingRecurring.id);
                if (index !== -1) {
                    appState.recurringTransactions[index] = {
                        ...appState.editingRecurring,
                        description,
                        amount: finalAmount,
                        type,
                        category,
                        frequency,
                        startDate,
                        endDate: endDate || null,
                        dayOfMonth: (frequency === 'monthly' || frequency === 'yearly') ? dayOfMonth : null,
                        active,
                        isVariable,
                        estimatedAmount: isVariable ? finalAmount : null,
                        minAmount: isVariable ? (minAmount ? (type === 'expense' ? -Math.abs(minAmount) : Math.abs(minAmount)) : null) : null,
                        maxAmount: isVariable ? (maxAmount ? (type === 'expense' ? -Math.abs(maxAmount) : Math.abs(maxAmount)) : null) : null
                    };
                }
            } else {
                // Nueva recurrente
                const newRecurring = {
                    id: Date.now(),
                    description,
                    amount: finalAmount,
                    type,
                    category,
                    frequency,
                    startDate,
                    endDate: endDate || null,
                    dayOfMonth: (frequency === 'monthly' || frequency === 'yearly') ? dayOfMonth : null,
                    active,
                    lastGenerated: null,
                    isVariable,
                    estimatedAmount: isVariable ? finalAmount : null,
                    minAmount: isVariable ? (minAmount ? (type === 'expense' ? -Math.abs(minAmount) : Math.abs(minAmount)) : null) : null,
                    maxAmount: isVariable ? (maxAmount ? (type === 'expense' ? -Math.abs(maxAmount) : Math.abs(maxAmount)) : null) : null
                };
                appState.recurringTransactions.push(newRecurring);
            }

            saveData();
            closeRecurringModal();
            loadRecurring();
            
            // Generar transacciones pendientes si está activa
            if (active) {
                generatePendingTransactions();
            }
        }

        // Cargar pestaña de recurrentes
        function loadRecurring() {
            // Generar transacciones pendientes primero
            generatePendingTransactions();
            
            // Cargar transacciones pendientes de actualizar
            loadPendingUpdates();
            
            // Cargar próximas transacciones
            loadUpcomingTransactions();
            
            // Cargar lista de recurrentes
            loadRecurringList();
        }

        // Cargar transacciones pendientes de actualizar
        function loadPendingUpdates() {
            const container = document.getElementById('pending-updates-list');
            const section = document.getElementById('pending-updates-section');
            
            // Buscar transacciones que necesitan actualización (últimos 60 días)
            const sixtyDaysAgo = new Date();
            sixtyDaysAgo.setDate(sixtyDaysAgo.getDate() - 60);
            
            const pendingTransactions = appState.transactions.filter(t => 
                t.needsUpdate && 
                t.isVariable && 
                new Date(t.date) >= sixtyDaysAgo
            ).sort((a, b) => new Date(b.date) - new Date(a.date));
            
            if (pendingTransactions.length === 0) {
                section.classList.add('hidden');
                return;
            }
            
            section.classList.remove('hidden');
            container.innerHTML = '';
            
            pendingTransactions.forEach(transaction => {
                const category = appState.categories.find(c => c.id === transaction.category);
                const recurringConfig = appState.recurringTransactions.find(r => r.id === transaction.recurringId);
                const daysAgo = Math.floor((new Date() - new Date(transaction.date)) / (1000 * 60 * 60 * 24));
                
                const div = document.createElement('div');
                div.className = 'flex items-center justify-between p-3 bg-yellow-50 dark:bg-yellow-900/20 border border-yellow-200 dark:border-yellow-800 rounded-lg';
                
                div.innerHTML = `
                    <div class="flex items-center space-x-3 flex-1">
                        <div class="w-10 h-10 rounded-lg flex items-center justify-center" style="background-color: ${category?.color || '#6b7280'}20">
                            <span class="text-lg">${category?.icon || '💸'}</span>
                        </div>
                        <div class="flex-1">
                            <p class="font-medium text-card">${transaction.description}</p>
                            <p class="text-sm text-muted">
                                ${new Date(transaction.date).toLocaleDateString('es-ES')} • 
                                ${daysAgo === 0 ? 'Hoy' : daysAgo === 1 ? 'Ayer' : `Hace ${daysAgo} días`} • 
                                Estimado: €${Math.abs(transaction.amount).toFixed(2)}
                            </p>
                            ${recurringConfig && (recurringConfig.minAmount || recurringConfig.maxAmount) ? `
                                <p class="text-xs text-yellow-600 dark:text-yellow-400">
                                    Rango usual: €${recurringConfig.minAmount ? Math.abs(recurringConfig.minAmount).toFixed(2) : '?'} - €${recurringConfig.maxAmount ? Math.abs(recurringConfig.maxAmount).toFixed(2) : '?'}
                                </p>
                            ` : ''}
                        </div>
                    </div>
                    <div class="flex items-center space-x-2">
                        <input type="number" step="0.01" placeholder="Importe real" 
                            class="w-24 px-2 py-1 border border-yellow-300 dark:border-yellow-700 rounded text-sm bg-white dark:bg-gray-800 text-card"
                            id="update-amount-${transaction.id}">
                        <button onclick="updateVariableTransaction(${transaction.id})" 
                            class="px-3 py-1 bg-green-600 text-white rounded text-sm hover:bg-green-700 transition-colors">
                            ✅ Actualizar
                        </button>
                        <button onclick="markAsCorrect(${transaction.id})" 
                            class="px-2 py-1 bg-blue-600 text-white rounded text-sm hover:bg-blue-700 transition-colors" 
                            title="El importe estimado es correcto">
                            ✓
                        </button>
                    </div>
                `;
                container.appendChild(div);
            });
        }

        // Actualizar transacción variable con importe real
        function updateVariableTransaction(transactionId) {
            const amountInput = document.getElementById(`update-amount-${transactionId}`);
            const newAmount = parseFloat(amountInput.value);
            
            if (!newAmount || newAmount <= 0) {
                alert('Por favor ingresa un importe válido');
                return;
            }
            
            const transactionIndex = appState.transactions.findIndex(t => t.id === transactionId);
            if (transactionIndex === -1) return;
            
            const transaction = appState.transactions[transactionIndex];
            const finalAmount = transaction.type === 'expense' ? -Math.abs(newAmount) : Math.abs(newAmount);
            
            // Actualizar transacción
            appState.transactions[transactionIndex] = {
                ...transaction,
                amount: finalAmount,
                needsUpdate: false,
                wasUpdated: true,
                originalEstimate: transaction.estimatedAmount
            };
            
            saveData();
            loadRecurring();
            
            // Mostrar feedback
            const difference = Math.abs(Math.abs(finalAmount) - Math.abs(transaction.estimatedAmount || 0));
            if (difference > 0) {
                const message = Math.abs(finalAmount) > Math.abs(transaction.estimatedAmount || 0) 
                    ? `✅ Actualizado! Fue €${difference.toFixed(2)} más de lo estimado`
                    : `✅ Actualizado! Fue €${difference.toFixed(2)} menos de lo estimado`;
                
                // Mostrar toast temporal
                showToast(message);
            } else {
                showToast('✅ Importe actualizado correctamente');
            }
        }

        // Marcar como correcto (el importe estimado era exacto)
        function markAsCorrect(transactionId) {
            const transactionIndex = appState.transactions.findIndex(t => t.id === transactionId);
            if (transactionIndex === -1) return;
            
            appState.transactions[transactionIndex].needsUpdate = false;
            appState.transactions[transactionIndex].wasConfirmed = true;
            
            saveData();
            loadRecurring();
            showToast('✅ Confirmado como correcto');
        }

        // Mostrar toast notification
        function showToast(message) {
            // Crear toast si no existe
            let toast = document.getElementById('toast');
            if (!toast) {
                toast = document.createElement('div');
                toast.id = 'toast';
                toast.className = 'fixed top-4 right-4 bg-green-600 text-white px-4 py-2 rounded-lg shadow-lg z-50 transition-opacity duration-300';
                document.body.appendChild(toast);
            }
            
            toast.textContent = message;
            toast.style.opacity = '1';
            
            // Auto-ocultar después de 3 segundos
            setTimeout(() => {
                toast.style.opacity = '0';
            }, 3000);
        }

        // Generar transacciones pendientes
        function generatePendingTransactions() {
            const today = new Date();
            today.setHours(0, 0, 0, 0);
            
            appState.recurringTransactions
                .filter(recurring => recurring.active)
                .forEach(recurring => {
                    const startDate = new Date(recurring.startDate);
                    const endDate = recurring.endDate ? new Date(recurring.endDate) : null;
                    const lastGenerated = recurring.lastGenerated ? new Date(recurring.lastGenerated) : null;
                    
                    // Determinar desde cuándo generar
                    let currentDate = lastGenerated ? new Date(lastGenerated) : new Date(startDate);
                    if (lastGenerated) {
                        currentDate = getNextDate(currentDate, recurring.frequency, recurring.dayOfMonth);
                    }
                    
                    // Generar transacciones hasta hoy
                    while (currentDate <= today && (!endDate || currentDate <= endDate)) {
                        // Verificar que no exista ya esta transacción
                        const exists = appState.transactions.some(t => 
                            t.recurringId === recurring.id && 
                            t.date === currentDate.toISOString().split('T')[0]
                        );
                        
                        if (!exists) {
                            const newTransaction = {
                                id: Date.now() + Math.random(),
                                description: recurring.description,
                                amount: recurring.amount,
                                type: recurring.type,
                                category: recurring.category,
                                date: currentDate.toISOString().split('T')[0],
                                recurringId: recurring.id,
                                isGenerated: true,
                                isVariable: recurring.isVariable || false,
                                needsUpdate: recurring.isVariable || false,
                                estimatedAmount: recurring.isVariable ? recurring.amount : null
                            };
                            appState.transactions.push(newTransaction);
                        }
                        
                        // Actualizar última fecha generada
                        recurring.lastGenerated = currentDate.toISOString().split('T')[0];
                        
                        // Siguiente fecha
                        currentDate = getNextDate(currentDate, recurring.frequency, recurring.dayOfMonth);
                    }
                });
            
            saveData();
        }

        // Calcular siguiente fecha según frecuencia
        function getNextDate(date, frequency, dayOfMonth) {
            const nextDate = new Date(date);
            
            switch (frequency) {
                case 'daily':
                    nextDate.setDate(nextDate.getDate() + 1);
                    break;
                case 'weekly':
                    nextDate.setDate(nextDate.getDate() + 7);
                    break;
                case 'monthly':
                    nextDate.setMonth(nextDate.getMonth() + 1);
                    if (dayOfMonth) {
                        nextDate.setDate(Math.min(dayOfMonth, new Date(nextDate.getFullYear(), nextDate.getMonth() + 1, 0).getDate()));
                    }
                    break;
                case 'yearly':
                    nextDate.setFullYear(nextDate.getFullYear() + 1);
                    if (dayOfMonth) {
                        nextDate.setDate(Math.min(dayOfMonth, new Date(nextDate.getFullYear(), nextDate.getMonth() + 1, 0).getDate()));
                    }
                    break;
            }
            
            return nextDate;
        }

        // Cargar próximas transacciones (30 días)
        function loadUpcomingTransactions() {
            const container = document.getElementById('upcoming-transactions');
            const today = new Date();
            const thirtyDaysFromNow = new Date();
            thirtyDaysFromNow.setDate(today.getDate() + 30);
            
            const upcomingTransactions = [];
            
            appState.recurringTransactions
                .filter(recurring => recurring.active)
                .forEach(recurring => {
                    const lastGenerated = recurring.lastGenerated ? new Date(recurring.lastGenerated) : new Date(recurring.startDate);
                    let nextDate = getNextDate(lastGenerated, recurring.frequency, recurring.dayOfMonth);
                    
                    // Generar próximas fechas dentro de 30 días
                    while (nextDate <= thirtyDaysFromNow) {
                        if (nextDate > today && (!recurring.endDate || nextDate <= new Date(recurring.endDate))) {
                            upcomingTransactions.push({
                                ...recurring,
                                nextDate: nextDate.toISOString().split('T')[0]
                            });
                        }
                        nextDate = getNextDate(nextDate, recurring.frequency, recurring.dayOfMonth);
                    }
                });
            
            // Ordenar por fecha
            upcomingTransactions.sort((a, b) => new Date(a.nextDate) - new Date(b.nextDate));
            
            container.innerHTML = '';
            
            if (upcomingTransactions.length === 0) {
                container.innerHTML = '<p class="text-muted text-center py-4">No hay transacciones programadas para los próximos 30 días</p>';
                return;
            }
            
            upcomingTransactions.slice(0, 10).forEach(transaction => {
                const category = appState.categories.find(c => c.id === transaction.category);
                const div = document.createElement('div');
                div.className = 'flex items-center justify-between p-3 hover-bg rounded-lg transition-colors';
                
                const daysUntil = Math.ceil((new Date(transaction.nextDate) - today) / (1000 * 60 * 60 * 24));
                const dateText = daysUntil === 1 ? 'Mañana' : daysUntil === 0 ? 'Hoy' : `En ${daysUntil} días`;
                
                div.innerHTML = `
                    <div class="flex items-center space-x-3">
                        <div class="w-10 h-10 rounded-lg flex items-center justify-center" style="background-color: ${category?.color || '#6b7280'}20">
                            <span class="text-lg">${category?.icon || '💸'}</span>
                        </div>
                        <div>
                            <p class="font-medium text-card">${transaction.description}</p>
                            <p class="text-sm text-muted">
                                ${new Date(transaction.nextDate).toLocaleDateString('es-ES')} • ${dateText}
                                ${transaction.isVariable ? ' • Importe estimado' : ''}
                            </p>
                        </div>
                    </div>
                    <span class="font-semibold ${transaction.amount > 0 ? 'text-green-600' : 'text-red-600'}">
                        ${transaction.amount > 0 ? '+' : ''}€${Math.abs(transaction.amount).toFixed(2)}
                        ${transaction.isVariable ? '<span class="text-xs text-muted">(est.)</span>' : ''}
                    </span>
                `;
                container.appendChild(div);
            });
        }

        // Cargar lista de transacciones recurrentes
        function loadRecurringList() {
            const container = document.getElementById('recurring-list');
            container.innerHTML = '';
            
            if (appState.recurringTransactions.length === 0) {
                container.innerHTML = '<p class="text-muted text-center py-8">No tienes transacciones recurrentes configuradas</p>';
                return;
            }
            
            appState.recurringTransactions.forEach(recurring => {
                const category = appState.categories.find(c => c.id === recurring.category);
                const div = document.createElement('div');
                div.className = 'flex items-center justify-between p-4 hover-bg transition-colors';
                
                const frequencyText = {
                    'daily': 'Diaria',
                    'weekly': 'Semanal', 
                    'monthly': 'Mensual',
                    'yearly': 'Anual'
                };
                
                const dayInfo = recurring.dayOfMonth ? ` (día ${recurring.dayOfMonth})` : '';
                
                div.innerHTML = `
                    <div class="flex items-center space-x-4">
                        <div class="w-12 h-12 rounded-lg flex items-center justify-center" style="background-color: ${category?.color || '#6b7280'}20">
                            <span class="text-xl">${category?.icon || '💸'}</span>
                        </div>
                        <div class="flex-1">
                            <div class="flex items-center space-x-2">
                                <p class="font-medium text-card">${recurring.description}</p>
                                <span class="px-2 py-1 text-xs rounded-full ${recurring.active ? 'bg-green-100 text-green-800 dark:bg-green-900/20 dark:text-green-300' : 'bg-gray-100 text-gray-600 dark:bg-gray-700 dark:text-gray-400'}">
                                    ${recurring.active ? 'Activa' : 'Inactiva'}
                                </span>
                                ${recurring.isVariable ? `
                                    <span class="px-2 py-1 text-xs rounded-full bg-yellow-100 text-yellow-800 dark:bg-yellow-900/20 dark:text-yellow-300">
                                        💡 Variable
                                    </span>
                                ` : ''}
                            </div>
                            <p class="text-sm text-muted">
                                ${frequencyText[recurring.frequency]}${dayInfo} • 
                                Desde ${new Date(recurring.startDate).toLocaleDateString('es-ES')}
                                ${recurring.endDate ? ` hasta ${new Date(recurring.endDate).toLocaleDateString('es-ES')}` : ''}
                                ${recurring.isVariable ? ` • Estimado: €${Math.abs(recurring.amount).toFixed(2)}` : ''}
                            </p>
                        </div>
                    </div>
                    <div class="flex items-center space-x-3">
                        <span class="font-semibold ${recurring.amount > 0 ? 'text-green-600' : 'text-red-600'}">
                            ${recurring.amount > 0 ? '+' : ''}€${Math.abs(recurring.amount).toFixed(2)}
                            ${recurring.isVariable ? '<span class="text-xs text-muted">(est.)</span>' : ''}
                        </span>
                        <button onclick="editRecurring(${recurring.id})" 
                            class="p-2 text-blue-600 hover:bg-blue-100 dark:hover:bg-blue-900/20 rounded-lg transition-colors">
                            ✏️
                        </button>
                        <button onclick="deleteRecurring(${recurring.id})" 
                            class="p-2 text-red-600 hover:bg-red-100 dark:hover:bg-red-900/20 rounded-lg transition-colors">
                            🗑️
                        </button>
                    </div>
                `;
                container.appendChild(div);
            });
        }

        // Editar transacción recurrente
        function editRecurring(id) {
            const recurring = appState.recurringTransactions.find(r => r.id === id);
            if (!recurring) return;
            
            appState.editingRecurring = recurring;
            document.getElementById('recurring-modal-title').textContent = 'Editar Transacción Recurrente';
            
            document.getElementById('recurring-description').value = recurring.description;
            document.getElementById('recurring-amount').value = Math.abs(recurring.amount);
            document.getElementById('recurring-type').value = recurring.type;
            document.getElementById('recurring-frequency').value = recurring.frequency;
            document.getElementById('recurring-start-date').value = recurring.startDate;
            document.getElementById('recurring-end-date').value = recurring.endDate || '';
            document.getElementById('recurring-active').checked = recurring.active;
            document.getElementById('recurring-variable').checked = recurring.isVariable || false;
            
            // Campos de valor variable
            if (recurring.isVariable) {
                document.getElementById('recurring-min-amount').value = recurring.minAmount ? Math.abs(recurring.minAmount) : '';
                document.getElementById('recurring-max-amount').value = recurring.maxAmount ? Math.abs(recurring.maxAmount) : '';
            }
            
            if (recurring.dayOfMonth) {
                document.getElementById('recurring-day-of-month').value = recurring.dayOfMonth;
            }
            
            updateRecurringCategoryOptions();
            updateRecurringDateFields();
            toggleVariableAmount(); // Actualizar vista de valor variable
            
            setTimeout(() => {
                document.getElementById('recurring-category').value = recurring.category;
            }, 50);
            
            document.getElementById('recurring-modal').classList.remove('hidden');
        }

        // Eliminar transacción recurrente
        function deleteRecurring(id) {
            if (confirm('¿Estás seguro de que quieres eliminar esta transacción recurrente? Las transacciones ya generadas no se eliminarán.')) {
                appState.recurringTransactions = appState.recurringTransactions.filter(r => r.id !== id);
                saveData();
                loadRecurring();
            }
        }

        // =============== FUNCIONES DE COMPARATIVAS TEMPORALES ===============

        // Actualizar comparación temporal
        function updateComparison() {
            const comparisonType = document.getElementById('comparison-type').value;
            
            // Generar selectores según el tipo
            generateComparisonSelectors(comparisonType);
            
            // Calcular y mostrar métricas
            calculateComparisonMetrics(comparisonType);
            
            // Crear gráfico comparativo
            createComparisonChart(comparisonType);
            
            // Generar insights
            generateComparisonInsights(comparisonType);
        }

        // Generar selectores de período
        function generateComparisonSelectors(comparisonType) {
            const container = document.getElementById('comparison-selectors');
            const currentDate = new Date();
            const currentYear = currentDate.getFullYear();
            const currentMonth = currentDate.getMonth();
            
            let selectorsHTML = '';
            
            switch (comparisonType) {
                case 'month-vs-month':
                    selectorsHTML = `
                        <div>
                            <label class="block text-sm font-medium text-card mb-2">Primer período:</label>
                            <select id="period1-month" class="w-full px-3 py-2 border border-card rounded-lg bg-card text-card focus:ring-2 focus:ring-blue-500 focus:border-transparent text-sm">
                                ${generateMonthOptions(currentYear, currentMonth - 1)}
                            </select>
                        </div>
                        <div>
                            <label class="block text-sm font-medium text-card mb-2">Segundo período:</label>
                            <select id="period2-month" class="w-full px-3 py-2 border border-card rounded-lg bg-card text-card focus:ring-2 focus:ring-blue-500 focus:border-transparent text-sm">
                                ${generateMonthOptions(currentYear, currentMonth)}
                            </select>
                        </div>
                    `;
                    break;
                    
                case 'month-vs-avg':
                    selectorsHTML = `
                        <div>
                            <label class="block text-sm font-medium text-card mb-2">Mes a analizar:</label>
                            <select id="target-month" class="w-full px-3 py-2 border border-card rounded-lg bg-card text-card focus:ring-2 focus:ring-blue-500 focus:border-transparent text-sm">
                                ${generateMonthOptions(currentYear, currentMonth)}
                            </select>
                        </div>
                        <div>
                            <label class="block text-sm font-medium text-card mb-2">Comparar con:</label>
                            <select id="avg-period" class="w-full px-3 py-2 border border-card rounded-lg bg-card text-card focus:ring-2 focus:ring-blue-500 focus:border-transparent text-sm">
                                <option value="6months">Promedio últimos 6 meses</option>
                                <option value="year">Promedio anual</option>
                                <option value="all">Promedio histórico</option>
                            </select>
                        </div>
                    `;
                    break;
                    
                case 'year-vs-year':
                    selectorsHTML = `
                        <div>
                            <label class="block text-sm font-medium text-card mb-2">Primer año:</label>
                            <select id="period1-year" class="w-full px-3 py-2 border border-card rounded-lg bg-card text-card focus:ring-2 focus:ring-blue-500 focus:border-transparent text-sm">
                                ${generateYearOptions(currentYear - 1)}
                            </select>
                        </div>
                        <div>
                            <label class="block text-sm font-medium text-card mb-2">Segundo año:</label>
                            <select id="period2-year" class="w-full px-3 py-2 border border-card rounded-lg bg-card text-card focus:ring-2 focus:ring-blue-500 focus:border-transparent text-sm">
                                ${generateYearOptions(currentYear)}
                            </select>
                        </div>
                    `;
                    break;
                    
                case 'quarter-vs-quarter':
                    selectorsHTML = `
                        <div>
                            <label class="block text-sm font-medium text-card mb-2">Primer trimestre:</label>
                            <select id="period1-quarter" class="w-full px-3 py-2 border border-card rounded-lg bg-card text-card focus:ring-2 focus:ring-blue-500 focus:border-transparent text-sm">
                                ${generateQuarterOptions(currentYear)}
                            </select>
                        </div>
                        <div>
                            <label class="block text-sm font-medium text-card mb-2">Segundo trimestre:</label>
                            <select id="period2-quarter" class="w-full px-3 py-2 border border-card rounded-lg bg-card text-card focus:ring-2 focus:ring-blue-500 focus:border-transparent text-sm">
                                ${generateQuarterOptions(currentYear)}
                            </select>
                        </div>
                    `;
                    break;
            }
            
            container.innerHTML = selectorsHTML;
        }

        // Generar opciones de meses
        function generateMonthOptions(defaultYear, defaultMonth) {
            const months = ['Enero', 'Febrero', 'Marzo', 'Abril', 'Mayo', 'Junio',
                          'Julio', 'Agosto', 'Septiembre', 'Octubre', 'Noviembre', 'Diciembre'];
            
            let options = '';
            const currentYear = new Date().getFullYear();
            
            // Generar opciones para los últimos 3 años
            for (let year = currentYear; year >= currentYear - 2; year--) {
                for (let month = 11; month >= 0; month--) {
                    // Solo meses que no sean futuros
                    const monthDate = new Date(year, month);
                    if (monthDate <= new Date()) {
                        const value = `${year}-${month + 1}`;
                        const selected = (year === defaultYear && month === defaultMonth) ? 'selected' : '';
                        options += `<option value="${value}" ${selected}>${months[month]} ${year}</option>`;
                    }
                }
            }
            
            return options;
        }

        // Generar opciones de años
        function generateYearOptions(defaultYear) {
            let options = '';
            const currentYear = new Date().getFullYear();
            
            for (let year = currentYear; year >= currentYear - 5; year--) {
                const selected = year === defaultYear ? 'selected' : '';
                options += `<option value="${year}" ${selected}>${year}</option>`;
            }
            
            return options;
        }

        // Generar opciones de trimestres
        function generateQuarterOptions(defaultYear) {
            const quarters = [
                { value: 'Q1', label: 'Q1 (Ene-Mar)', months: [0, 1, 2] },
                { value: 'Q2', label: 'Q2 (Abr-Jun)', months: [3, 4, 5] },
                { value: 'Q3', label: 'Q3 (Jul-Sep)', months: [6, 7, 8] },
                { value: 'Q4', label: 'Q4 (Oct-Dic)', months: [9, 10, 11] }
            ];
            
            let options = '';
            const currentYear = new Date().getFullYear();
            const currentQuarter = Math.floor(new Date().getMonth() / 3);
            
            for (let year = currentYear; year >= currentYear - 2; year--) {
                for (let q = 3; q >= 0; q--) {
                    // Solo trimestres que no sean futuros (aproximado)
                    if (year < currentYear || q <= currentQuarter) {
                        const value = `${year}-${quarters[q].value}`;
                        options += `<option value="${value}">${quarters[q].label} ${year}</option>`;
                    }
                }
            }
            
            return options;
        }

        // Calcular métricas de comparación
        function calculateComparisonMetrics(comparisonType) {
            const container = document.getElementById('comparison-metrics');
            
            let period1Data, period2Data, period1Label, period2Label;
            
            switch (comparisonType) {
                case 'month-vs-month':
                    const period1Month = document.getElementById('period1-month')?.value;
                    const period2Month = document.getElementById('period2-month')?.value;
                    
                    if (period1Month && period2Month) {
                        period1Data = getMonthData(period1Month);
                        period2Data = getMonthData(period2Month);
                        period1Label = formatMonthLabel(period1Month);
                        period2Label = formatMonthLabel(period2Month);
                    }
                    break;
                    
                case 'month-vs-avg':
                    const targetMonth = document.getElementById('target-month')?.value;
                    const avgPeriod = document.getElementById('avg-period')?.value;
                    
                    if (targetMonth && avgPeriod) {
                        period1Data = getMonthData(targetMonth);
                        period2Data = getAverageData(avgPeriod, targetMonth);
                        period1Label = formatMonthLabel(targetMonth);
                        period2Label = formatAvgPeriodLabel(avgPeriod);
                    }
                    break;
                    
                case 'year-vs-year':
                    const period1Year = document.getElementById('period1-year')?.value;
                    const period2Year = document.getElementById('period2-year')?.value;
                    
                    if (period1Year && period2Year) {
                        period1Data = getYearData(period1Year);
                        period2Data = getYearData(period2Year);
                        period1Label = period1Year;
                        period2Label = period2Year;
                    }
                    break;
                    
                case 'quarter-vs-quarter':
                    const period1Quarter = document.getElementById('period1-quarter')?.value;
                    const period2Quarter = document.getElementById('period2-quarter')?.value;
                    
                    if (period1Quarter && period2Quarter) {
                        period1Data = getQuarterData(period1Quarter);
                        period2Data = getQuarterData(period2Quarter);
                        period1Label = period1Quarter.replace('-', ' ');
                        period2Label = period2Quarter.replace('-', ' ');
                    }
                    break;
            }
            
            if (!period1Data || !period2Data) {
                container.innerHTML = '<p class="text-muted col-span-3 text-center py-4">Selecciona períodos para ver la comparación</p>';
                return;
            }
            
            // Calcular cambios porcentuales
            const incomeChange = calculatePercentageChange(period1Data.income, period2Data.income);
            const expenseChange = calculatePercentageChange(period1Data.expenses, period2Data.expenses);
            const balanceChange = calculatePercentageChange(period1Data.balance, period2Data.balance);
            
            container.innerHTML = `
                <div class="bg-white dark:bg-gray-800 p-4 rounded-lg border border-card">
                    <div class="text-center">
                        <p class="text-sm font-medium text-muted">Ingresos</p>
                        <div class="mt-2">
                            <p class="text-lg font-bold text-green-600">€${period2Data.income.toFixed(2)}</p>
                            <p class="text-xs ${incomeChange >= 0 ? 'text-green-600' : 'text-red-600'}">
                                ${incomeChange >= 0 ? '↗️' : '↘️'} ${Math.abs(incomeChange).toFixed(1)}% vs ${period1Label}
                            </p>
                        </div>
                    </div>
                </div>
                
                <div class="bg-white dark:bg-gray-800 p-4 rounded-lg border border-card">
                    <div class="text-center">
                        <p class="text-sm font-medium text-muted">Gastos</p>
                        <div class="mt-2">
                            <p class="text-lg font-bold text-red-600">€${period2Data.expenses.toFixed(2)}</p>
                            <p class="text-xs ${expenseChange <= 0 ? 'text-green-600' : 'text-red-600'}">
                                ${expenseChange >= 0 ? '↗️' : '↘️'} ${Math.abs(expenseChange).toFixed(1)}% vs ${period1Label}
                            </p>
                        </div>
                    </div>
                </div>
                
                <div class="bg-white dark:bg-gray-800 p-4 rounded-lg border border-card">
                    <div class="text-center">
                        <p class="text-sm font-medium text-muted">Balance</p>
                        <div class="mt-2">
                            <p class="text-lg font-bold ${period2Data.balance >= 0 ? 'text-green-600' : 'text-red-600'}">
                                €${period2Data.balance.toFixed(2)}
                            </p>
                            <p class="text-xs ${balanceChange >= 0 ? 'text-green-600' : 'text-red-600'}">
                                ${balanceChange >= 0 ? '↗️' : '↘️'} ${Math.abs(balanceChange).toFixed(1)}% vs ${period1Label}
                            </p>
                        </div>
                    </div>
                </div>
            `;
        }

        // Obtener datos de un mes específico
        function getMonthData(monthValue) {
            const [year, month] = monthValue.split('-').map(Number);
            
            const monthTransactions = appState.transactions.filter(t => {
                const tDate = new Date(t.date);
                return tDate.getFullYear() === year && tDate.getMonth() === month - 1;
            });
            
            const income = monthTransactions.filter(t => t.amount > 0).reduce((sum, t) => sum + t.amount, 0);
            const expenses = monthTransactions.filter(t => t.amount < 0).reduce((sum, t) => sum + Math.abs(t.amount), 0);
            
            return {
                income,
                expenses,
                balance: income - expenses,
                transactions: monthTransactions.length
            };
        }

        // Obtener datos promedio
        function getAverageData(avgPeriod, excludeMonth) {
            let transactions = [...appState.transactions];
            const currentDate = new Date();
            
            // Excluir el mes que se está comparando
            if (excludeMonth) {
                const [excludeYear, excludeMonthNum] = excludeMonth.split('-').map(Number);
                transactions = transactions.filter(t => {
                    const tDate = new Date(t.date);
                    return !(tDate.getFullYear() === excludeYear && tDate.getMonth() === excludeMonthNum - 1);
                });
            }
            
            let periodTransactions = [];
            
            switch (avgPeriod) {
                case '6months':
                    const sixMonthsAgo = new Date();
                    sixMonthsAgo.setMonth(sixMonthsAgo.getMonth() - 6);
                    periodTransactions = transactions.filter(t => new Date(t.date) >= sixMonthsAgo);
                    break;
                case 'year':
                    const yearAgo = new Date();
                    yearAgo.setFullYear(yearAgo.getFullYear() - 1);
                    periodTransactions = transactions.filter(t => new Date(t.date) >= yearAgo);
                    break;
                case 'all':
                    periodTransactions = transactions;
                    break;
            }
            
            // Agrupar por meses y calcular promedio
            const monthlyData = {};
            periodTransactions.forEach(t => {
                const tDate = new Date(t.date);
                const monthKey = `${tDate.getFullYear()}-${tDate.getMonth()}`;
                
                if (!monthlyData[monthKey]) {
                    monthlyData[monthKey] = { income: 0, expenses: 0 };
                }
                
                if (t.amount > 0) {
                    monthlyData[monthKey].income += t.amount;
                } else {
                    monthlyData[monthKey].expenses += Math.abs(t.amount);
                }
            });
            
            const monthCount = Object.keys(monthlyData).length;
            if (monthCount === 0) {
                return { income: 0, expenses: 0, balance: 0, transactions: 0 };
            }
            
            const totalIncome = Object.values(monthlyData).reduce((sum, month) => sum + month.income, 0);
            const totalExpenses = Object.values(monthlyData).reduce((sum, month) => sum + month.expenses, 0);
            
            const avgIncome = totalIncome / monthCount;
            const avgExpenses = totalExpenses / monthCount;
            
            return {
                income: avgIncome,
                expenses: avgExpenses,
                balance: avgIncome - avgExpenses,
                transactions: Math.round(periodTransactions.length / monthCount)
            };
        }

        // Obtener datos de un año específico
        function getYearData(year) {
            const yearTransactions = appState.transactions.filter(t => {
                const tDate = new Date(t.date);
                return tDate.getFullYear() === parseInt(year);
            });
            
            const income = yearTransactions.filter(t => t.amount > 0).reduce((sum, t) => sum + t.amount, 0);
            const expenses = yearTransactions.filter(t => t.amount < 0).reduce((sum, t) => sum + Math.abs(t.amount), 0);
            
            return {
                income,
                expenses,
                balance: income - expenses,
                transactions: yearTransactions.length
            };
        }

        // Obtener datos de un trimestre específico
        function getQuarterData(quarterValue) {
            const [year, quarter] = quarterValue.split('-');
            const quarterMap = { 'Q1': [0, 1, 2], 'Q2': [3, 4, 5], 'Q3': [6, 7, 8], 'Q4': [9, 10, 11] };
            const months = quarterMap[quarter];
            
            const quarterTransactions = appState.transactions.filter(t => {
                const tDate = new Date(t.date);
                return tDate.getFullYear() === parseInt(year) && months.includes(tDate.getMonth());
            });
            
            const income = quarterTransactions.filter(t => t.amount > 0).reduce((sum, t) => sum + t.amount, 0);
            const expenses = quarterTransactions.filter(t => t.amount < 0).reduce((sum, t) => sum + Math.abs(t.amount), 0);
            
            return {
                income,
                expenses,
                balance: income - expenses,
                transactions: quarterTransactions.length
            };
        }

        // Calcular cambio porcentual
        function calculatePercentageChange(oldValue, newValue) {
            if (oldValue === 0) {
                return newValue === 0 ? 0 : 100;
            }
            return ((newValue - oldValue) / oldValue) * 100;
        }

        // Formatear etiqueta de mes
        function formatMonthLabel(monthValue) {
            const [year, month] = monthValue.split('-');
            const months = ['Ene', 'Feb', 'Mar', 'Abr', 'May', 'Jun', 'Jul', 'Ago', 'Sep', 'Oct', 'Nov', 'Dic'];
            return `${months[parseInt(month) - 1]} ${year}`;
        }

        // Formatear etiqueta de período promedio
        function formatAvgPeriodLabel(avgPeriod) {
            const labels = {
                '6months': 'Prom. 6m',
                'year': 'Prom. anual',
                'all': 'Prom. histórico'
            };
            return labels[avgPeriod] || avgPeriod;
        }

        // Crear gráfico comparativo
        function createComparisonChart(comparisonType) {
            if (typeof Chart === 'undefined') return;
            
            const canvas = document.getElementById('comparisonChart');
            if (!canvas) return;
            
            // Limpiar gráfico anterior
            if (window.comparisonChart && typeof window.comparisonChart.destroy === 'function') {
                window.comparisonChart.destroy();
                window.comparisonChart = null;
            }
            
            const ctx = canvas.getContext('2d');
            ctx.clearRect(0, 0, canvas.width, canvas.height);
            
            // Obtener datos según el tipo de comparación
            let chartData = getComparisonChartData(comparisonType);
            
            if (!chartData) {
                ctx.font = '14px Arial';
                ctx.fillStyle = '#666';
                ctx.textAlign = 'center';
                ctx.fillText('Selecciona períodos para ver el gráfico', canvas.width / 2, canvas.height / 2);
                return;
            }
            
            try {
                window.comparisonChart = new Chart(ctx, {
                    type: 'bar',
                    data: chartData,
                    options: {
                        responsive: true,
                        maintainAspectRatio: false,
                        plugins: {
                            title: {
                                display: true,
                                text: 'Comparación de Períodos',
                                font: { size: 16, weight: 'bold' }
                            },
                            legend: {
                                position: 'top'
                            }
                        },
                        scales: {
                            y: {
                                beginAtZero: true,
                                ticks: {
                                    callback: function(value) {
                                        return '€' + value.toFixed(0);
                                    }
                                }
                            }
                        }
                    }
                });
            } catch (error) {
                console.error('Error creando gráfico comparativo:', error);
            }
        }

        // Obtener datos para el gráfico comparativo
        function getComparisonChartData(comparisonType) {
            let period1Data, period2Data, period1Label, period2Label;
            
            // Obtener los mismos datos que en las métricas
            switch (comparisonType) {
                case 'month-vs-month':
                    const period1Month = document.getElementById('period1-month')?.value;
                    const period2Month = document.getElementById('period2-month')?.value;
                    
                    if (period1Month && period2Month) {
                        period1Data = getMonthData(period1Month);
                        period2Data = getMonthData(period2Month);
                        period1Label = formatMonthLabel(period1Month);
                        period2Label = formatMonthLabel(period2Month);
                    }
                    break;
                    
                case 'month-vs-avg':
                    const targetMonth = document.getElementById('target-month')?.value;
                    const avgPeriod = document.getElementById('avg-period')?.value;
                    
                    if (targetMonth && avgPeriod) {
                        period1Data = getAverageData(avgPeriod, targetMonth);
                        period2Data = getMonthData(targetMonth);
                        period1Label = formatAvgPeriodLabel(avgPeriod);
                        period2Label = formatMonthLabel(targetMonth);
                    }
                    break;
                    
                case 'year-vs-year':
                    const period1Year = document.getElementById('period1-year')?.value;
                    const period2Year = document.getElementById('period2-year')?.value;
                    
                    if (period1Year && period2Year) {
                        period1Data = getYearData(period1Year);
                        period2Data = getYearData(period2Year);
                        period1Label = period1Year;
                        period2Label = period2Year;
                    }
                    break;
                    
                case 'quarter-vs-quarter':
                    const period1Quarter = document.getElementById('period1-quarter')?.value;
                    const period2Quarter = document.getElementById('period2-quarter')?.value;
                    
                    if (period1Quarter && period2Quarter) {
                        period1Data = getQuarterData(period1Quarter);
                        period2Data = getQuarterData(period2Quarter);
                        period1Label = period1Quarter.replace('-', ' ');
                        period2Label = period2Quarter.replace('-', ' ');
                    }
                    break;
            }
            
            if (!period1Data || !period2Data) return null;
            
            return {
                labels: ['Ingresos', 'Gastos', 'Balance'],
                datasets: [
                    {
                        label: period1Label,
                        data: [period1Data.income, period1Data.expenses, period1Data.balance],
                        backgroundColor: ['rgba(34, 197, 94, 0.6)', 'rgba(239, 68, 68, 0.6)', 'rgba(59, 130, 246, 0.6)'],
                        borderColor: ['rgba(34, 197, 94, 1)', 'rgba(239, 68, 68, 1)', 'rgba(59, 130, 246, 1)'],
                        borderWidth: 2
                    },
                    {
                        label: period2Label,
                        data: [period2Data.income, period2Data.expenses, period2Data.balance],
                        backgroundColor: ['rgba(34, 197, 94, 0.3)', 'rgba(239, 68, 68, 0.3)', 'rgba(59, 130, 246, 0.3)'],
                        borderColor: ['rgba(34, 197, 94, 0.8)', 'rgba(239, 68, 68, 0.8)', 'rgba(59, 130, 246, 0.8)'],
                        borderWidth: 2
                    }
                ]
            };
        }

        // Generar insights automáticos
        function generateComparisonInsights(comparisonType) {
            const container = document.getElementById('comparison-insights');
            
            // Similar lógica que las métricas para obtener los datos
            let period1Data, period2Data, period1Label, period2Label;
            
            switch (comparisonType) {
                case 'month-vs-month':
                    const period1Month = document.getElementById('period1-month')?.value;
                    const period2Month = document.getElementById('period2-month')?.value;
                    
                    if (period1Month && period2Month) {
                        period1Data = getMonthData(period1Month);
                        period2Data = getMonthData(period2Month);
                        period1Label = formatMonthLabel(period1Month);
                        period2Label = formatMonthLabel(period2Month);
                    }
                    break;
                    
                case 'month-vs-avg':
                    const targetMonth = document.getElementById('target-month')?.value;
                    const avgPeriod = document.getElementById('avg-period')?.value;
                    
                    if (targetMonth && avgPeriod) {
                        period1Data = getAverageData(avgPeriod, targetMonth);
                        period2Data = getMonthData(targetMonth);
                        period1Label = formatAvgPeriodLabel(avgPeriod);
                        period2Label = formatMonthLabel(targetMonth);
                    }
                    break;
                    
                case 'year-vs-year':
                    const period1Year = document.getElementById('period1-year')?.value;
                    const period2Year = document.getElementById('period2-year')?.value;
                    
                    if (period1Year && period2Year) {
                        period1Data = getYearData(period1Year);
                        period2Data = getYearData(period2Year);
                        period1Label = period1Year;
                        period2Label = period2Year;
                    }
                    break;
                    
                case 'quarter-vs-quarter':
                    const period1Quarter = document.getElementById('period1-quarter')?.value;
                    const period2Quarter = document.getElementById('period2-quarter')?.value;
                    
                    if (period1Quarter && period2Quarter) {
                        period1Data = getQuarterData(period1Quarter);
                        period2Data = getQuarterData(period2Quarter);
                        period1Label = period1Quarter.replace('-', ' ');
                        period2Label = period2Quarter.replace('-', ' ');
                    }
                    break;
                    
                default:
                    container.innerHTML = '<p class="text-muted">💡 Los insights se generarán cuando selecciones los períodos a comparar.</p>';
                    return;
            }
            
            if (!period1Data || !period2Data) {
                container.innerHTML = '<p class="text-muted">💡 Los insights se generarán cuando selecciones los períodos a comparar.</p>';
                return;
            }
            
            // Generar insights basados en los cambios
            const insights = [];
            
            const incomeChange = calculatePercentageChange(period1Data.income, period2Data.income);
            const expenseChange = calculatePercentageChange(period1Data.expenses, period2Data.expenses);
            const balanceChange = calculatePercentageChange(period1Data.balance, period2Data.balance);
            
            // Insights sobre ingresos
            if (Math.abs(incomeChange) > 15) {
                if (incomeChange > 0) {
                    insights.push(`📈 <strong>Excelente!</strong> Los ingresos aumentaron un ${incomeChange.toFixed(1)}% respecto a ${period1Label}.`);
                } else {
                    insights.push(`📉 <strong>Atención:</strong> Los ingresos disminuyeron un ${Math.abs(incomeChange).toFixed(1)}% respecto a ${period1Label}.`);
                }
            }
            
            // Insights sobre gastos
            if (Math.abs(expenseChange) > 20) {
                if (expenseChange > 0) {
                    insights.push(`⚠️ <strong>Cuidado:</strong> Los gastos aumentaron un ${expenseChange.toFixed(1)}% respecto a ${period1Label}. Revisa las categorías con mayor incremento.`);
                } else {
                    insights.push(`✅ <strong>¡Bien hecho!</strong> Se lograron reducir los gastos un ${Math.abs(expenseChange).toFixed(1)}% respecto a ${period1Label}.`);
                }
            }
            
            // Insights sobre balance
            if (period2Data.balance > 0 && period1Data.balance <= 0) {
                insights.push(`🎉 <strong>¡Logro desbloqueado!</strong> Se pasó de números rojos a un balance positivo de €${period2Data.balance.toFixed(2)}.`);
            } else if (period2Data.balance <= 0 && period1Data.balance > 0) {
                insights.push(`🚨 <strong>Alerta:</strong> El balance pasó de positivo a negativo. Es hora de revisar los gastos.`);
            }
            
            // Insights sobre eficiencia de ahorro
            if (period2Data.income > 0) {
                const savingsRate = (period2Data.balance / period2Data.income) * 100;
                if (savingsRate > 20) {
                    insights.push(`💰 <strong>¡Ahorrador experto!</strong> Se está ahorrando el ${savingsRate.toFixed(1)}% de los ingresos en ${period2Label}.`);
                } else if (savingsRate < 0) {
                    insights.push(`💸 <strong>Gastos excesivos:</strong> Se está gastando más de lo que se ingresa en ${period2Label}. Considera revisar el presupuesto.`);
                }
            }
            
            // Insights específicos por tipo de comparación
            if (comparisonType === 'month-vs-avg') {
                const incomeDeviation = Math.abs(incomeChange);
                const expenseDeviation = Math.abs(expenseChange);
                
                if (incomeDeviation > 30 || expenseDeviation > 30) {
                    insights.push(`📊 <strong>Mes atípico:</strong> ${period2Label} muestra desviaciones significativas respecto al ${period1Label.toLowerCase()}.`);
                }
            }
            
            if (insights.length === 0) {
                insights.push('📊 Los datos muestran una situación financiera estable con cambios menores entre períodos.');
            }
            
            container.innerHTML = `
                <h4 class="text-sm font-semibold text-blue-800 dark:text-blue-200 mb-3">🔍 Análisis Automático</h4>
                <div class="space-y-2">
                    ${insights.map(insight => `<p class="text-sm text-blue-700 dark:text-blue-300">${insight}</p>`).join('')}
                </div>
            `;
        }

        // =============== FUNCIONES DE OBJETIVOS DE AHORRO ===============

        // Mostrar modal de agregar objetivo
        function showAddGoal() {
            try {
                appState.editingGoal = null;
                document.getElementById('goal-modal-title').textContent = 'Nuevo Objetivo de Ahorro';
                clearGoalForm();
                
                const modal = document.getElementById('goal-modal');
                if (modal) {
                    modal.classList.remove('hidden');
                } else {
                    console.error('Modal de objetivos no encontrado');
                    alert('Error: No se pudo abrir el formulario de objetivos');
                }
            } catch (error) {
                console.error('Error al abrir modal de objetivos:', error);
                alert('Error al abrir el formulario. Por favor, recarga la página.');
            }
        }

        // Cerrar modal de objetivos
        function closeGoalModal() {
            document.getElementById('goal-modal').classList.add('hidden');
            appState.editingGoal = null;
        }

        // Limpiar formulario de objetivos
        function clearGoalForm() {
            document.getElementById('goal-name').value = '';
            document.getElementById('goal-target').value = '';
            document.getElementById('goal-current').value = '';
            document.getElementById('goal-start-date').value = new Date().toISOString().split('T')[0]; // Hoy por defecto
            document.getElementById('goal-deadline').value = '';
            document.getElementById('goal-priority').value = 'medium';
            document.getElementById('goal-icon').value = '🎯';
            document.getElementById('goal-description').value = '';
            document.getElementById('goal-auto-calculate').checked = false;
            
            // Resetear vista de auto-cálculo
            toggleAutoCalculate();
        }

        // Alternar auto-cálculo de ahorro actual
        function toggleAutoCalculate() {
            const checkbox = document.getElementById('goal-auto-calculate');
            const currentInput = document.getElementById('goal-current');
            const startDateInput = document.getElementById('goal-start-date');
            const targetInput = document.getElementById('goal-target');
            const priorityInput = document.getElementById('goal-priority');
            
            if (!checkbox || !currentInput) return;
            
            if (checkbox.checked) {
                // Simular cómo se vería este objetivo en el sistema de distribución
                const startDate = startDateInput ? startDateInput.value : null;
                const target = parseFloat(targetInput.value) || 0;
                const priority = priorityInput.value;
                
                if (startDate && target > 0) {
                    const simulatedGoal = {
                        id: 'temp',
                        target: target,
                        current: 0,
                        startDate: startDate,
                        priority: priority,
                        autoCalculate: true,
                        completed: false
                    };
                    
                    // Obtener otros objetivos activos para simular la distribución
                    const otherGoals = appState.savingsGoals.filter(g => 
                        g.autoCalculate && g.startDate && !g.completed && 
                        (!appState.editingGoal || g.id !== appState.editingGoal.id)
                    );
                    
                    const allGoals = [...otherGoals, simulatedGoal];
                    const earliestStartDate = Math.min(...allGoals.map(g => new Date(g.startDate).getTime()));
                    const totalSavings = calculateSavingsFromDate(new Date(earliestStartDate).toISOString().split('T')[0]);
                    
                    // Reset todos los objetivos a 0 para simular distribución limpia
                    allGoals.forEach(g => g.current = 0);
                    const distribution = distributeGoalsSavings(allGoals, totalSavings);
                    const calculatedAmount = distribution['temp'] || 0;
                    
                    currentInput.value = calculatedAmount.toFixed(2);
                } else {
                    currentInput.value = '0.00';
                }
                
                currentInput.disabled = true;
                currentInput.classList.add('bg-gray-100', 'dark:bg-gray-700');
            } else {
                currentInput.disabled = false;
                currentInput.classList.remove('bg-gray-100', 'dark:bg-gray-700');
            }
        }

        // Calcular ahorro desde una fecha específica
        function calculateSavingsFromDate(startDate) {
            if (!startDate) {
                return 0;
            }
            
            const startDateTime = new Date(startDate);
            
            // Filtrar transacciones desde la fecha de inicio
            const relevantTransactions = appState.transactions.filter(t => {
                const transactionDate = new Date(t.date);
                return transactionDate >= startDateTime;
            });
            
            // Calcular balance positivo desde esa fecha
            const totalIncome = relevantTransactions.filter(t => t.amount > 0).reduce((sum, t) => sum + t.amount, 0);
            const totalExpenses = relevantTransactions.filter(t => t.amount < 0).reduce((sum, t) => sum + Math.abs(t.amount), 0);
            const balance = totalIncome - totalExpenses;
            
            return Math.max(0, balance);
        }

        // Calcular balance total
        function calculateTotalBalance() {
            const totalIncome = appState.transactions.filter(t => t.amount > 0).reduce((sum, t) => sum + t.amount, 0);
            const totalExpenses = appState.transactions.filter(t => t.amount < 0).reduce((sum, t) => sum + Math.abs(t.amount), 0);
            return totalIncome - totalExpenses;
        }

        // Guardar objetivo
        function saveGoal() {
            const name = document.getElementById('goal-name').value.trim();
            const target = parseFloat(document.getElementById('goal-target').value);
            const current = parseFloat(document.getElementById('goal-current').value) || 0;
            const startDate = document.getElementById('goal-start-date').value;
            const deadline = document.getElementById('goal-deadline').value;
            const priority = document.getElementById('goal-priority').value;
            const icon = document.getElementById('goal-icon').value.trim() || '🎯';
            const description = document.getElementById('goal-description').value.trim();
            const autoCalculate = document.getElementById('goal-auto-calculate').checked;

            // Validaciones
            if (!name) {
                alert('Por favor ingresa el nombre del objetivo');
                return;
            }
            
            if (!target || target <= 0) {
                alert('Por favor ingresa una cantidad objetivo válida');
                return;
            }
            
            if (!startDate) {
                alert('Por favor selecciona una fecha de inicio');
                return;
            }
            
            if (!deadline) {
                alert('Por favor selecciona una fecha límite');
                return;
            }

            // Validar que la fecha límite sea posterior a la fecha de inicio
            if (new Date(deadline) <= new Date(startDate)) {
                alert('La fecha límite debe ser posterior a la fecha de inicio');
                return;
            }

            if (current < 0) {
                alert('La cantidad ahorrada no puede ser negativa');
                return;
            }

            if (current > target) {
                alert('La cantidad ahorrada no puede ser mayor al objetivo');
                return;
            }

            if (appState.editingGoal) {
                // Editar objetivo existente
                const index = appState.savingsGoals.findIndex(g => g.id === appState.editingGoal.id);
                if (index !== -1) {
                    appState.savingsGoals[index] = {
                        ...appState.editingGoal,
                        name,
                        target,
                        current,
                        startDate,
                        deadline,
                        priority,
                        icon,
                        description,
                        autoCalculate,
                        updatedAt: new Date().toISOString()
                    };
                }
            } else {
                // Nuevo objetivo
                const newGoal = {
                    id: Date.now(),
                    name,
                    target,
                    current,
                    startDate,
                    deadline,
                    priority,
                    icon,
                    description,
                    autoCalculate,
                    createdAt: new Date().toISOString(),
                    updatedAt: new Date().toISOString(),
                    completed: false
                };
                appState.savingsGoals.push(newGoal);
            }

            saveData();
            closeGoalModal();
            loadGoals();
            showToast('✅ Objetivo guardado correctamente');
        }

        // Cargar pestaña de objetivos
        function loadGoals() {
            // Migrar objetivos antiguos sin fecha de inicio
            migrateOldGoals();
            
            // Actualizar objetivos con auto-cálculo
            updateAutoCalculatedGoals();
            
            // Cargar métricas de resumen
            loadGoalsSummary();
            
            // Cargar distribución de ahorro
            loadSavingsDistribution();
            
            // Cargar objetivos urgentes
            loadUrgentGoals();
            
            // Cargar lista de objetivos
            loadGoalsList();
        }

        // Cargar distribución de ahorro
        function loadSavingsDistribution() {
            const section = document.getElementById('savings-distribution-section');
            const container = document.getElementById('savings-distribution-content');
            
            if (!section || !container) return;
            
            // Obtener objetivos activos con auto-cálculo
            const autoGoals = appState.savingsGoals.filter(goal => 
                goal.autoCalculate && goal.startDate && !goal.completed
            );
            
            if (autoGoals.length <= 1) {
                section.classList.add('hidden');
                return;
            }
            
            section.classList.remove('hidden');
            
            // Calcular distribución actual
            const earliestStartDate = Math.min(...autoGoals.map(g => new Date(g.startDate).getTime()));
            const totalSavings = calculateSavingsFromDate(new Date(earliestStartDate).toISOString().split('T')[0]);
            const distribution = distributeGoalsSavings(autoGoals, totalSavings);
            
            // Agrupar por prioridad para mostrar el orden de asignación
            const priorityGroups = {
                high: autoGoals.filter(g => g.priority === 'high'),
                medium: autoGoals.filter(g => g.priority === 'medium'),
                low: autoGoals.filter(g => g.priority === 'low')
            };
            
            let content = `
                <div class="bg-blue-50 dark:bg-blue-900/20 p-4 rounded-lg border border-blue-200 dark:border-blue-800 mb-4">
                    <p class="text-sm text-blue-800 dark:text-blue-200">
                        <strong>💰 Ahorro total disponible:</strong> €${totalSavings.toFixed(2)} 
                        (desde ${new Date(earliestStartDate).toLocaleDateString('es-ES')})
                    </p>
                </div>
                
                <div class="space-y-4">
            `;
            
            const priorityLabels = {
                high: '🔴 Alta Prioridad',
                medium: '🟡 Media Prioridad', 
                low: '🟢 Baja Prioridad'
            };
            
            Object.entries(priorityGroups).forEach(([priority, goals]) => {
                if (goals.length === 0) return;
                
                content += `
                    <div class="border-l-4 ${priority === 'high' ? 'border-red-500' : priority === 'medium' ? 'border-yellow-500' : 'border-green-500'} pl-4">
                        <h4 class="font-semibold text-card mb-2">${priorityLabels[priority]}</h4>
                `;
                
                if (goals.length === 1) {
                    const goal = goals[0];
                    const assigned = distribution[goal.id] || 0;
                    content += `
                        <div class="flex items-center justify-between p-3 bg-white dark:bg-gray-800 rounded-lg">
                            <div class="flex items-center space-x-2">
                                <span class="text-lg">${goal.icon}</span>
                                <span class="font-medium">${goal.name}</span>
                            </div>
                            <div class="text-right">
                                <p class="font-semibold">€${assigned.toFixed(2)} / €${goal.target.toFixed(2)}</p>
                                <p class="text-xs text-muted">Recibe todo el ahorro disponible</p>
                            </div>
                        </div>
                    `;
                } else {
                    content += `
                        <p class="text-xs text-muted mb-2">División equitativa entre ${goals.length} objetivos:</p>
                    `;
                    
                    const amountPerGoal = totalSavings > 0 ? 
                        Math.min(...goals.map(g => g.target), totalSavings / goals.length) : 0;
                    
                    goals.forEach(goal => {
                        const assigned = distribution[goal.id] || 0;
                        
                        content += `
                            <div class="flex items-center justify-between p-2 bg-white dark:bg-gray-800 rounded-lg mb-2">
                                <div class="flex items-center space-x-2">
                                    <span class="text-sm">${goal.icon}</span>
                                    <span class="text-sm font-medium">${goal.name}</span>
                                </div>
                                <div class="text-right">
                                    <p class="text-sm font-semibold">€${assigned.toFixed(2)}</p>
                                    <p class="text-xs text-muted">División equitativa</p>
                                </div>
                            </div>
                        `;
                    });
                }
                
                content += '</div>';
            });
            
            content += '</div>';
            
            container.innerHTML = content;
        }
        function migrateOldGoals() {
            let hasChanges = false;
            
            appState.savingsGoals.forEach(goal => {
                if (!goal.startDate) {
                    // Asignar fecha de creación como fecha de inicio, o hoy si no existe
                    goal.startDate = goal.createdAt ? goal.createdAt.split('T')[0] : new Date().toISOString().split('T')[0];
                    hasChanges = true;
                }
            });
            
            if (hasChanges) {
                saveData();
            }
        }

        // Actualizar objetivos con auto-cálculo
        function updateAutoCalculatedGoals() {
            let hasChanges = false;
            
            // Obtener objetivos activos con auto-cálculo
            const autoGoals = appState.savingsGoals.filter(goal => 
                goal.autoCalculate && goal.startDate && !goal.completed
            );
            
            if (autoGoals.length === 0) return;
            
            // IMPORTANTE: Resetear todos los valores auto-calculados a 0 antes de redistribuir
            autoGoals.forEach(goal => {
                if (goal.current > 0) {
                    goal.current = 0;
                    hasChanges = true;
                }
            });
            
            // Calcular ahorro total disponible desde la fecha más temprana
            const earliestStartDate = Math.min(...autoGoals.map(g => new Date(g.startDate).getTime()));
            const totalAvailableSavings = calculateSavingsFromDate(new Date(earliestStartDate).toISOString().split('T')[0]);
            
            // Distribuir ahorro según sistema de prioridades (distribución absoluta desde 0)
            const distribution = distributeGoalsSavings(autoGoals, totalAvailableSavings);
            
            // Aplicar la distribución (valores absolutos)
            autoGoals.forEach(goal => {
                const newCurrent = distribution[goal.id] || 0;
                
                if (Math.abs(newCurrent - goal.current) > 0.01) { // Evitar actualizaciones por centavos
                    goal.current = newCurrent;
                    goal.updatedAt = new Date().toISOString();
                    hasChanges = true;
                }
                
                // Verificar si se completó
                if (!goal.completed && goal.current >= goal.target) {
                    goal.completed = true;
                    goal.completedAt = new Date().toISOString();
                    hasChanges = true;
                }
            });
            
            if (hasChanges) {
                saveData();
            }
        }

        // Distribuir ahorro entre objetivos según prioridades (retorna valores absolutos)
        function distributeGoalsSavings(goals, totalSavings) {
            const distribution = {};
            let remainingSavings = totalSavings;
            
            // Inicializar distribución en 0
            goals.forEach(goal => {
                distribution[goal.id] = 0;
            });
            
            if (totalSavings <= 0) {
                return distribution; // No hay nada que distribuir
            }
            
            // Ordenar por prioridad y luego por fecha límite
            const priorityOrder = { high: 3, medium: 2, low: 1 };
            const sortedGoals = [...goals].sort((a, b) => {
                if (priorityOrder[a.priority] !== priorityOrder[b.priority]) {
                    return priorityOrder[b.priority] - priorityOrder[a.priority];
                }
                return new Date(a.deadline) - new Date(b.deadline);
            });
            
            // Procesar por niveles de prioridad
            ['high', 'medium', 'low'].forEach(priority => {
                const goalsInPriority = sortedGoals.filter(g => g.priority === priority);
                
                if (goalsInPriority.length === 0 || remainingSavings <= 0) return;
                
                if (goalsInPriority.length === 1) {
                    // Un solo objetivo en esta prioridad: asignar todo lo que necesite
                    const goal = goalsInPriority[0];
                    const needed = Math.max(0, goal.target);
                    const assigned = Math.min(remainingSavings, needed);
                    
                    distribution[goal.id] = assigned;
                    remainingSavings -= assigned;
                } else {
                    // Múltiples objetivos en la misma prioridad: división EQUITATIVA (no proporcional)
                    const totalTargetInPriority = goalsInPriority.reduce((sum, goal) => sum + goal.target, 0);
                    
                    if (totalTargetInPriority > 0) {
                        // Si tenemos suficiente para completar todos en esta prioridad
                        if (remainingSavings >= totalTargetInPriority) {
                            goalsInPriority.forEach(goal => {
                                distribution[goal.id] = goal.target;
                                remainingSavings -= goal.target;
                            });
                        } else {
                            // Distribución EQUITATIVA del ahorro disponible
                            const amountPerGoal = remainingSavings / goalsInPriority.length;
                            
                            goalsInPriority.forEach(goal => {
                                const assigned = Math.min(amountPerGoal, goal.target);
                                distribution[goal.id] = assigned;
                            });
                            
                            // Actualizar ahorro restante
                            const usedInThisPriority = goalsInPriority.reduce((sum, goal) => 
                                sum + distribution[goal.id], 0
                            );
                            remainingSavings -= usedInThisPriority;
                        }
                    }
                }
            });
            
            return distribution;
        }

        // Cargar métricas de resumen
        function loadGoalsSummary() {
            const activeGoals = appState.savingsGoals.filter(g => !g.completed);
            const totalProgress = activeGoals.length > 0 
                ? activeGoals.reduce((sum, goal) => sum + (goal.current / goal.target) * 100, 0) / activeGoals.length 
                : 0;
            const totalTarget = activeGoals.reduce((sum, goal) => sum + goal.target, 0);
            
            document.getElementById('active-goals').textContent = activeGoals.length;
            document.getElementById('average-progress').textContent = `${totalProgress.toFixed(1)}%`;
            document.getElementById('total-target').textContent = `€${totalTarget.toFixed(2)}`;
        }

        // Cargar objetivos urgentes (próximos 30 días)
        function loadUrgentGoals() {
            const thirtyDaysFromNow = new Date();
            thirtyDaysFromNow.setDate(thirtyDaysFromNow.getDate() + 30);
            
            const urgentGoals = appState.savingsGoals.filter(goal => 
                !goal.completed && 
                new Date(goal.deadline) <= thirtyDaysFromNow &&
                new Date(goal.deadline) >= new Date()
            ).sort((a, b) => new Date(a.deadline) - new Date(b.deadline));
            
            const section = document.getElementById('urgent-goals-section');
            const container = document.getElementById('urgent-goals-list');
            
            if (urgentGoals.length === 0) {
                section.classList.add('hidden');
                return;
            }
            
            section.classList.remove('hidden');
            container.innerHTML = '';
            
            urgentGoals.forEach(goal => {
                const daysLeft = Math.ceil((new Date(goal.deadline) - new Date()) / (1000 * 60 * 60 * 24));
                const progress = (goal.current / goal.target) * 100;
                const remaining = goal.target - goal.current;
                const dailySavingsNeeded = remaining / Math.max(1, daysLeft);
                
                const div = document.createElement('div');
                div.className = 'p-4 bg-orange-50 dark:bg-orange-900/20 border border-orange-200 dark:border-orange-800 rounded-lg';
                
                div.innerHTML = `
                    <div class="flex items-center justify-between mb-3">
                        <div class="flex items-center space-x-3">
                            <span class="text-2xl">${goal.icon}</span>
                            <div>
                                <h4 class="font-semibold text-card">${goal.name}</h4>
                                <p class="text-sm text-orange-700 dark:text-orange-300">
                                    ${daysLeft === 0 ? '¡Vence hoy!' : daysLeft === 1 ? 'Vence mañana' : `${daysLeft} días restantes`}
                                </p>
                            </div>
                        </div>
                        <div class="text-right">
                            <p class="font-bold text-orange-800 dark:text-orange-200">€${goal.current.toFixed(2)} / €${goal.target.toFixed(2)}</p>
                            <p class="text-sm text-orange-600 dark:text-orange-400">${progress.toFixed(1)}% completado</p>
                        </div>
                    </div>
                    
                    <div class="w-full bg-orange-200 dark:bg-orange-800 rounded-full h-2 mb-3">
                        <div class="bg-orange-500 h-2 rounded-full transition-all duration-500" style="width: ${Math.min(progress, 100)}%"></div>
                    </div>
                    
                    ${remaining > 0 ? `
                        <p class="text-sm text-orange-700 dark:text-orange-300">
                            💡 Necesitas ahorrar €${dailySavingsNeeded.toFixed(2)} por día para alcanzar tu objetivo
                        </p>
                    ` : `
                        <p class="text-sm text-green-700 dark:text-green-300">
                            🎉 ¡Objetivo completado!
                        </p>
                    `}
                `;
                container.appendChild(div);
            });
        }

        // Cargar lista de objetivos
        function loadGoalsList() {
            const container = document.getElementById('goals-list');
            container.innerHTML = '';
            
            if (appState.savingsGoals.length === 0) {
                container.innerHTML = `
                    <div class="text-center py-12 bg-card border-card rounded-xl border">
                        <span class="text-6xl mb-4 block">🎯</span>
                        <h3 class="text-lg font-semibold text-card mb-2">¡Crea tu primer objetivo de ahorro!</h3>
                        <p class="text-muted mb-4">Establece metas específicas y haz seguimiento de tu progreso</p>
                        <button onclick="showAddGoal()" class="btn-primary px-6 py-3 rounded-lg">
                            + Crear Objetivo
                        </button>
                    </div>
                `;
                return;
            }
            
            // Separar por estado y ordenar
            const activeGoals = appState.savingsGoals.filter(g => !g.completed).sort((a, b) => {
                // Ordenar por prioridad (alta primero) y luego por fecha límite
                const priorityOrder = { high: 3, medium: 2, low: 1 };
                if (priorityOrder[a.priority] !== priorityOrder[b.priority]) {
                    return priorityOrder[b.priority] - priorityOrder[a.priority];
                }
                return new Date(a.deadline) - new Date(b.deadline);
            });
            
            const completedGoals = appState.savingsGoals.filter(g => g.completed).sort((a, b) => 
                new Date(b.completedAt) - new Date(a.completedAt)
            );
            
            // Renderizar objetivos activos
            if (activeGoals.length > 0) {
                const activeSection = document.createElement('div');
                activeSection.innerHTML = `
                    <h4 class="text-md font-semibold text-card mb-3">📋 Objetivos Activos (${activeGoals.length})</h4>
                    <div class="space-y-4">${activeGoals.map(goal => renderGoalCard(goal)).join('')}</div>
                `;
                container.appendChild(activeSection);
            }
            
            // Renderizar objetivos completados
            if (completedGoals.length > 0) {
                const completedSection = document.createElement('div');
                completedSection.className = 'mt-8';
                completedSection.innerHTML = `
                    <h4 class="text-md font-semibold text-card mb-3">✅ Objetivos Completados (${completedGoals.length})</h4>
                    <div class="space-y-4">${completedGoals.map(goal => renderGoalCard(goal, true)).join('')}</div>
                `;
                container.appendChild(completedSection);
            }
        }

        // Renderizar tarjeta de objetivo
        function renderGoalCard(goal, isCompleted = false) {
            const progress = (goal.current / goal.target) * 100;
            const remaining = goal.target - goal.current;
            const deadline = new Date(goal.deadline);
            const today = new Date();
            const daysLeft = Math.ceil((deadline - today) / (1000 * 60 * 60 * 24));
            const isOverdue = daysLeft < 0 && !isCompleted;
            
            const priorityColors = {
                high: 'border-red-200 dark:border-red-800',
                medium: 'border-yellow-200 dark:border-yellow-800', 
                low: 'border-green-200 dark:border-green-800'
            };
            
            const priorityBadges = {
                high: 'bg-red-100 text-red-800 dark:bg-red-900/20 dark:text-red-300',
                medium: 'bg-yellow-100 text-yellow-800 dark:bg-yellow-900/20 dark:text-yellow-300',
                low: 'bg-green-100 text-green-800 dark:bg-green-900/20 dark:text-green-300'
            };
            
            // Calcular ahorro mensual recomendado
            const monthsLeft = Math.max(1, daysLeft / 30);
            const monthlySavingsNeeded = remaining / monthsLeft;
            
            return `
                <div class="bg-card border ${priorityColors[goal.priority]} ${isCompleted ? 'opacity-75' : ''} rounded-xl p-6 shadow-sm">
                    <div class="flex items-start justify-between mb-4">
                        <div class="flex items-center space-x-3">
                            <span class="text-3xl">${goal.icon}</span>
                            <div>
                                <h3 class="text-lg font-semibold text-card">${goal.name}</h3>
                                <div class="flex items-center space-x-2 mt-1">
                                    <span class="px-2 py-1 text-xs rounded-full ${priorityBadges[goal.priority]}">
                                        ${goal.priority === 'high' ? '🔴 Alta' : goal.priority === 'medium' ? '🟡 Media' : '🟢 Baja'}
                                    </span>
                                    ${isCompleted ? `
                                        <span class="px-2 py-1 text-xs rounded-full bg-green-100 text-green-800 dark:bg-green-900/20 dark:text-green-300">
                                            ✅ Completado
                                        </span>
                                    ` : isOverdue ? `
                                        <span class="px-2 py-1 text-xs rounded-full bg-red-100 text-red-800 dark:bg-red-900/20 dark:text-red-300">
                                            ⏰ Vencido
                                        </span>
                                    ` : ''}
                                </div>
                            </div>
                        </div>
                        <div class="flex items-center space-x-2">
                            <button onclick="editGoal(${goal.id})" 
                                class="p-2 text-blue-600 hover:bg-blue-100 dark:hover:bg-blue-900/20 rounded-lg transition-colors">
                                ✏️
                            </button>
                            <button onclick="deleteGoal(${goal.id})" 
                                class="p-2 text-red-600 hover:bg-red-100 dark:hover:bg-red-900/20 rounded-lg transition-colors">
                                🗑️
                            </button>
                        </div>
                    </div>
                    
                    <div class="mb-4">
                        <div class="flex justify-between items-center mb-2">
                            <span class="text-sm font-medium text-card">Progreso</span>
                            <span class="text-sm font-bold text-card">€${goal.current.toFixed(2)} / €${goal.target.toFixed(2)}</span>
                        </div>
                        <div class="w-full bg-gray-200 dark:bg-gray-700 rounded-full h-3">
                            <div class="h-3 rounded-full transition-all duration-500 ${
                                isCompleted ? 'bg-green-500' : 
                                progress > 75 ? 'bg-blue-500' : 
                                progress > 50 ? 'bg-yellow-500' : 'bg-red-500'
                            }" style="width: ${Math.min(progress, 100)}%"></div>
                        </div>
                        <div class="flex justify-between text-xs text-muted mt-1">
                            <span>${progress.toFixed(1)}% completado</span>
                            <span>${remaining > 0 ? `€${remaining.toFixed(2)} restantes` : '¡Completado!'}</span>
                        </div>
                    </div>
                    
                    <div class="grid grid-cols-2 gap-4 text-sm">
                        <div>
                            <p class="text-muted">Período:</p>
                            <p class="font-medium text-card">${new Date(goal.startDate).toLocaleDateString('es-ES')} - ${deadline.toLocaleDateString('es-ES')}</p>
                            ${!isCompleted && daysLeft >= 0 ? `
                                <p class="text-xs text-muted">${daysLeft === 0 ? 'Vence hoy' : daysLeft === 1 ? 'Vence mañana' : `${daysLeft} días restantes`}</p>
                            ` : isOverdue ? `
                                <p class="text-xs text-red-600">Vencido hace ${Math.abs(daysLeft)} días</p>
                            ` : ''}
                        </div>
                        <div>
                            <p class="text-muted">Ahorro recomendado:</p>
                            <p class="font-medium text-card">€${monthlySavingsNeeded > 0 ? monthlySavingsNeeded.toFixed(2) : '0.00'}/mes</p>
                            ${goal.autoCalculate ? `
                                <p class="text-xs text-blue-600 dark:text-blue-400">
                                    🔄 Auto-calculado con división equitativa
                                    ${goal.priority === 'high' ? ' (Prioridad ALTA - recibe ahorro primero)' : 
                                      goal.priority === 'medium' ? ' (Prioridad MEDIA)' : 
                                      ' (Prioridad BAJA)'}
                                </p>
                            ` : ''}
                        </div>
                    </div>
                    
                    ${goal.description ? `
                        <div class="mt-3 pt-3 border-t border-gray-200 dark:border-gray-700">
                            <p class="text-sm text-muted">${goal.description}</p>
                        </div>
                    ` : ''}
                </div>
            `;
        }

        // Editar objetivo
        function editGoal(id) {
            const goal = appState.savingsGoals.find(g => g.id === id);
            if (!goal) return;
            
            appState.editingGoal = goal;
            document.getElementById('goal-modal-title').textContent = 'Editar Objetivo de Ahorro';
            
            document.getElementById('goal-name').value = goal.name;
            document.getElementById('goal-target').value = goal.target;
            document.getElementById('goal-current').value = goal.current;
            document.getElementById('goal-start-date').value = goal.startDate || new Date().toISOString().split('T')[0];
            document.getElementById('goal-deadline').value = goal.deadline;
            document.getElementById('goal-priority').value = goal.priority;
            document.getElementById('goal-icon').value = goal.icon;
            document.getElementById('goal-description').value = goal.description || '';
            document.getElementById('goal-auto-calculate').checked = goal.autoCalculate || false;
            
            toggleAutoCalculate();
            document.getElementById('goal-modal').classList.remove('hidden');
        }

        // Eliminar objetivo
        function deleteGoal(id) {
            const goal = appState.savingsGoals.find(g => g.id === id);
            if (!goal) return;
            
            if (confirm(`¿Estás seguro de que quieres eliminar el objetivo "${goal.name}"?`)) {
                appState.savingsGoals = appState.savingsGoals.filter(g => g.id !== id);
                saveData();
                loadGoals();
                showToast('🗑️ Objetivo eliminado');
            }
        }

        // =============== FUNCIONES DE BÚSQUEDA INTELIGENTE ===============

        // Mostrar modal de búsqueda avanzada
        function showAdvancedSearch() {
            populateAdvancedSearchCategories();
            document.getElementById('advanced-search-modal').classList.remove('hidden');
        }

        // Cerrar modal de búsqueda avanzada
        function closeAdvancedSearchModal() {
            document.getElementById('advanced-search-modal').classList.add('hidden');
        }

        // Mostrar modal de búsquedas guardadas
        function showSavedSearches() {
            loadSavedSearchesList();
            document.getElementById('saved-searches-modal').classList.remove('hidden');
        }

        // Cerrar modal de búsquedas guardadas
        function closeSavedSearchesModal() {
            document.getElementById('saved-searches-modal').classList.add('hidden');
        }

        // Mostrar modal para guardar búsqueda
        function saveCurrentSearch() {
            document.getElementById('save-search-modal').classList.remove('hidden');
        }

        // Cerrar modal de guardar búsqueda
        function closeSaveSearchModal() {
            document.getElementById('save-search-modal').classList.add('hidden');
        }

        // Poblar categorías en búsqueda avanzada
        function populateAdvancedSearchCategories() {
            const container = document.getElementById('multiple-categories');
            container.innerHTML = '';
            
            appState.categories.forEach(category => {
                const div = document.createElement('div');
                div.className = 'flex items-center space-x-2 mb-1';
                div.innerHTML = `
                    <input type="checkbox" id="cat-${category.id}" value="${category.id}" class="rounded border-card">
                    <label for="cat-${category.id}" class="text-sm text-card">${category.icon} ${category.name}</label>
                `;
                container.appendChild(div);
            });
        }

        // Aplicar búsquedas rápidas predefinidas
        function applyQuickSearch(type) {
            clearAllFilters();
            
            const today = new Date();
            const oneWeekAgo = new Date(today.getTime() - 7 * 24 * 60 * 60 * 1000);
            
            switch (type) {
                case 'large-expenses':
                    appState.currentSearchFilters = {
                        amountOperator: 'gt',
                        amountValue: 100,
                        type: 'expense'
                    };
                    break;
                    
                case 'this-week':
                    appState.currentSearchFilters = {
                        dateFilterType: 'this-week'
                    };
                    break;
                    
                case 'food-expenses':
                    const foodCategory = appState.categories.find(c => 
                        c.name.toLowerCase().includes('alimentación') || 
                        c.name.toLowerCase().includes('comida') ||
                        c.name.toLowerCase().includes('food')
                    );
                    if (foodCategory) {
                        appState.currentSearchFilters = {
                            categories: [foodCategory.id],
                            type: 'expense'
                        };
                    }
                    break;
                    
                case 'recurring-transactions':
                    appState.currentSearchFilters = {
                        includeRecurring: true
                    };
                    break;
            }
            
            applyCurrentFilters();
            updateFiltersDisplay();
        }

        // Limpiar todos los filtros
        function clearAllFilters() {
            appState.currentSearchFilters = {};
            
            // Limpiar campos del formulario
            document.getElementById('search-input').value = '';
            document.getElementById('category-filter').value = '';
            document.getElementById('type-filter').value = '';
            document.getElementById('sort-filter').value = 'date-desc';
            
            // Ocultar resumen de filtros
            document.getElementById('active-filters-summary').classList.add('hidden');
            
            // Aplicar filtros (vacíos)
            filterTransactions();
        }

        // Limpiar búsqueda avanzada
        function clearAdvancedSearch() {
            document.getElementById('amount-operator').value = '';
            document.getElementById('amount-value').value = '';
            document.getElementById('amount-value2').value = '';
            document.getElementById('date-filter-type').value = '';
            document.getElementById('date-from').value = '';
            document.getElementById('date-to').value = '';
            document.getElementById('description-search').value = '';
            document.getElementById('description-mode').value = 'contains';
            document.getElementById('include-recurring').checked = false;
            document.getElementById('include-variable').checked = false;
            document.getElementById('include-generated').checked = true;
            
            // Desmarcar todas las categorías
            const checkboxes = document.querySelectorAll('#multiple-categories input[type="checkbox"]');
            checkboxes.forEach(cb => cb.checked = false);
            
            // Ocultar campos condicionales
            document.getElementById('amount-value2-container').classList.add('hidden');
            document.getElementById('date-from-container').classList.add('hidden');
            document.getElementById('date-to-container').classList.add('hidden');
        }

        // Aplicar búsqueda avanzada
        function applyAdvancedSearch() {
            const filters = {};
            
            // Filtro por monto
            const amountOperator = document.getElementById('amount-operator').value;
            if (amountOperator) {
                filters.amountOperator = amountOperator;
                filters.amountValue = parseFloat(document.getElementById('amount-value').value) || 0;
                if (amountOperator === 'between') {
                    filters.amountValue2 = parseFloat(document.getElementById('amount-value2').value) || 0;
                }
            }
            
            // Filtro por fechas
            const dateFilterType = document.getElementById('date-filter-type').value;
            if (dateFilterType) {
                filters.dateFilterType = dateFilterType;
                if (dateFilterType === 'custom') {
                    filters.dateFrom = document.getElementById('date-from').value;
                    filters.dateTo = document.getElementById('date-to').value;
                }
            }
            
            // Categorías múltiples
            const selectedCategories = [];
            const categoryCheckboxes = document.querySelectorAll('#multiple-categories input[type="checkbox"]:checked');
            categoryCheckboxes.forEach(cb => {
                selectedCategories.push(parseInt(cb.value));
            });
            if (selectedCategories.length > 0) {
                filters.categories = selectedCategories;
            }
            
            // Filtros adicionales
            if (document.getElementById('include-recurring').checked) {
                filters.includeRecurring = true;
            }
            if (document.getElementById('include-variable').checked) {
                filters.includeVariable = true;
            }
            filters.includeGenerated = document.getElementById('include-generated').checked;
            
            // Búsqueda en descripción
            const descriptionSearch = document.getElementById('description-search').value.trim();
            if (descriptionSearch) {
                filters.descriptionSearch = descriptionSearch;
                filters.descriptionMode = document.getElementById('description-mode').value;
            }
            
            // Aplicar filtros
            appState.currentSearchFilters = filters;
            applyCurrentFilters();
            updateFiltersDisplay();
            
            closeAdvancedSearchModal();
        }

        // Aplicar filtros actuales a las transacciones
        function applyCurrentFilters() {
            const filters = appState.currentSearchFilters;
            let filtered = getFilteredTransactions(); // Empezar con filtros de fecha global
            
            // Filtro por monto
            if (filters.amountOperator && filters.amountValue !== undefined) {
                filtered = filtered.filter(t => {
                    const amount = Math.abs(t.amount);
                    switch (filters.amountOperator) {
                        case 'gt': return amount > filters.amountValue;
                        case 'lt': return amount < filters.amountValue;
                        case 'eq': return Math.abs(amount - filters.amountValue) < 0.01;
                        case 'between': 
                            return amount >= filters.amountValue && amount <= (filters.amountValue2 || filters.amountValue);
                        default: return true;
                    }
                });
            }
            
            // Filtro por tipo
            if (filters.type) {
                filtered = filtered.filter(t => t.type === filters.type);
            }
            
            // Filtro por fechas específico
            if (filters.dateFilterType && filters.dateFilterType !== 'custom') {
                const today = new Date();
                filtered = filtered.filter(t => {
                    const transactionDate = new Date(t.date);
                    
                    switch (filters.dateFilterType) {
                        case 'today':
                            return transactionDate.toDateString() === today.toDateString();
                        case 'yesterday':
                            const yesterday = new Date(today.getTime() - 24 * 60 * 60 * 1000);
                            return transactionDate.toDateString() === yesterday.toDateString();
                        case 'this-week':
                            const weekStart = new Date(today.getTime() - today.getDay() * 24 * 60 * 60 * 1000);
                            return transactionDate >= weekStart;
                        case 'last-week':
                            const lastWeekStart = new Date(today.getTime() - (today.getDay() + 7) * 24 * 60 * 60 * 1000);
                            const lastWeekEnd = new Date(today.getTime() - today.getDay() * 24 * 60 * 60 * 1000);
                            return transactionDate >= lastWeekStart && transactionDate < lastWeekEnd;
                        case 'this-month':
                            return transactionDate.getMonth() === today.getMonth() && 
                                   transactionDate.getFullYear() === today.getFullYear();
                        case 'last-month':
                            const lastMonth = new Date(today.getFullYear(), today.getMonth() - 1);
                            return transactionDate.getMonth() === lastMonth.getMonth() && 
                                   transactionDate.getFullYear() === lastMonth.getFullYear();
                        case 'this-year':
                            return transactionDate.getFullYear() === today.getFullYear();
                        default:
                            return true;
                    }
                });
            } else if (filters.dateFilterType === 'custom' && filters.dateFrom && filters.dateTo) {
                const fromDate = new Date(filters.dateFrom);
                const toDate = new Date(filters.dateTo);
                filtered = filtered.filter(t => {
                    const transactionDate = new Date(t.date);
                    return transactionDate >= fromDate && transactionDate <= toDate;
                });
            }
            
            // Filtro por categorías múltiples
            if (filters.categories && filters.categories.length > 0) {
                filtered = filtered.filter(t => filters.categories.includes(t.category));
            }
            
            // Filtros adicionales
            if (filters.includeRecurring) {
                filtered = filtered.filter(t => t.recurringId);
            }
            
            if (filters.includeVariable) {
                filtered = filtered.filter(t => t.isVariable);
            }
            
            if (filters.includeGenerated === false) {
                filtered = filtered.filter(t => !t.isGenerated);
            }
            
            // Búsqueda en descripción
            if (filters.descriptionSearch) {
                const searchTerm = filters.descriptionSearch.toLowerCase();
                filtered = filtered.filter(t => {
                    const description = t.description.toLowerCase();
                    switch (filters.descriptionMode) {
                        case 'contains': return description.includes(searchTerm);
                        case 'starts': return description.startsWith(searchTerm);
                        case 'ends': return description.endsWith(searchTerm);
                        case 'exact': return description === searchTerm;
                        default: return description.includes(searchTerm);
                    }
                });
            }
            
            // Ordenar resultados
            const sortBy = document.getElementById('sort-filter').value || 'date-desc';
            const [sortField, sortOrder] = sortBy.split('-');
            filtered.sort((a, b) => {
                let aVal, bVal;
                
                if (sortField === 'date') {
                    aVal = new Date(a.date);
                    bVal = new Date(b.date);
                } else if (sortField === 'amount') {
                    aVal = Math.abs(a.amount);
                    bVal = Math.abs(b.amount);
                }
                
                if (sortOrder === 'desc') {
                    return bVal > aVal ? 1 : -1;
                } else {
                    return aVal > bVal ? 1 : -1;
                }
            });
            
            displayTransactions(filtered);
        }

        // Actualizar display de filtros activos
        function updateFiltersDisplay() {
            const filters = appState.currentSearchFilters;
            const summary = document.getElementById('active-filters-summary');
            const text = document.getElementById('filters-text');
            
            if (Object.keys(filters).length === 0) {
                summary.classList.add('hidden');
                return;
            }
            
            const descriptions = [];
            
            // Describir filtros activos
            if (filters.amountOperator) {
                const operators = {
                    'gt': 'Mayor que',
                    'lt': 'Menor que', 
                    'eq': 'Igual a',
                    'between': 'Entre'
                };
                let amountDesc = `${operators[filters.amountOperator]} €${filters.amountValue}`;
                if (filters.amountOperator === 'between' && filters.amountValue2) {
                    amountDesc += ` y €${filters.amountValue2}`;
                }
                descriptions.push(`💰 ${amountDesc}`);
            }
            
            if (filters.type) {
                descriptions.push(`📊 ${filters.type === 'income' ? 'Ingresos' : 'Gastos'}`);
            }
            
            if (filters.dateFilterType) {
                const dateLabels = {
                    'today': 'Hoy',
                    'yesterday': 'Ayer',
                    'this-week': 'Esta semana',
                    'last-week': 'Semana pasada',
                    'this-month': 'Este mes',
                    'last-month': 'Mes pasado',
                    'this-year': 'Este año',
                    'custom': 'Rango personalizado'
                };
                descriptions.push(`📅 ${dateLabels[filters.dateFilterType]}`);
            }
            
            if (filters.categories && filters.categories.length > 0) {
                const categoryNames = filters.categories.map(id => {
                    const cat = appState.categories.find(c => c.id === id);
                    return cat ? cat.name : 'Desconocida';
                });
                descriptions.push(`🏷️ ${categoryNames.join(', ')}`);
            }
            
            if (filters.descriptionSearch) {
                descriptions.push(`📝 "${filters.descriptionSearch}"`);
            }
            
            if (filters.includeRecurring) {
                descriptions.push(`🔄 Solo recurrentes`);
            }
            
            if (filters.includeVariable) {
                descriptions.push(`💡 Solo variables`);
            }
            
            text.textContent = `Filtros activos: ${descriptions.join(' • ')}`;
            summary.classList.remove('hidden');
        }

        // Confirmar guardado de búsqueda
        function confirmSaveSearch() {
            const name = document.getElementById('search-name').value.trim();
            const description = document.getElementById('search-description').value.trim();
            
            if (!name) {
                alert('Por favor ingresa un nombre para la búsqueda');
                return;
            }
            
            const savedSearch = {
                id: Date.now(),
                name: name,
                description: description,
                filters: { ...appState.currentSearchFilters },
                createdAt: new Date().toISOString()
            };
            
            appState.savedSearches.push(savedSearch);
            saveData();
            
            // Limpiar formulario
            document.getElementById('search-name').value = '';
            document.getElementById('search-description').value = '';
            
            closeSaveSearchModal();
            showToast('💾 Búsqueda guardada correctamente');
        }

        // Cargar lista de búsquedas guardadas
        function loadSavedSearchesList() {
            const container = document.getElementById('saved-searches-list');
            container.innerHTML = '';
            
            if (appState.savedSearches.length === 0) {
                container.innerHTML = `
                    <div class="text-center py-8">
                        <span class="text-4xl mb-2 block">📚</span>
                        <p class="text-muted">No tienes búsquedas guardadas</p>
                        <p class="text-sm text-muted mt-1">Aplica filtros y guárdalos para acceso rápido</p>
                    </div>
                `;
                return;
            }
            
            appState.savedSearches.forEach(search => {
                const div = document.createElement('div');
                div.className = 'flex items-center justify-between p-3 hover-bg rounded-lg transition-colors border border-card';
                
                div.innerHTML = `
                    <div class="flex-1 cursor-pointer" onclick="applySavedSearch(${search.id})">
                        <h4 class="font-medium text-card">${search.name}</h4>
                        ${search.description ? `<p class="text-sm text-muted mt-1">${search.description}</p>` : ''}
                        <p class="text-xs text-muted mt-1">Guardada: ${new Date(search.createdAt).toLocaleDateString('es-ES')}</p>
                    </div>
                    <button onclick="deleteSavedSearch(${search.id})" 
                        class="p-2 text-red-600 hover:bg-red-100 dark:hover:bg-red-900/20 rounded-lg transition-colors">
                        🗑️
                    </button>
                `;
                container.appendChild(div);
            });
        }

        // Aplicar búsqueda guardada
        function applySavedSearch(searchId) {
            const savedSearch = appState.savedSearches.find(s => s.id === searchId);
            if (!savedSearch) return;
            
            appState.currentSearchFilters = { ...savedSearch.filters };
            applyCurrentFilters();
            updateFiltersDisplay();
            
            closeSavedSearchesModal();
            showToast(`🔍 Aplicada búsqueda: ${savedSearch.name}`);
        }

        // Eliminar búsqueda guardada
        function deleteSavedSearch(searchId) {
            if (confirm('¿Estás seguro de que quieres eliminar esta búsqueda guardada?')) {
                appState.savedSearches = appState.savedSearches.filter(s => s.id !== searchId);
                saveData();
                loadSavedSearchesList();
                showToast('🗑️ Búsqueda eliminada');
            }
        }

        // =============== RESTO DE FUNCIONES ORIGINALES ===============

        // Inicializar selectores de fecha
        function initializeDateSelectors() {
            const monthSelector = document.getElementById('month-selector');
            const yearSelector = document.getElementById('year-selector');
            
            // Opciones especiales para rangos de fecha
            const specialOptions = [
                { value: 'last-3-months', text: 'Últimos 3 meses' },
                { value: 'last-6-months', text: 'Últimos 6 meses' },
                { value: 'current-year', text: 'Este año completo' },
                { value: 'last-year', text: 'Año pasado completo' }
            ];
            
            specialOptions.forEach(option => {
                const optionElement = document.createElement('option');
                optionElement.value = option.value;
                optionElement.textContent = option.text;
                monthSelector.appendChild(optionElement);
            });
            
            // Separador
            const separator = document.createElement('option');
            separator.disabled = true;
            separator.textContent = '── Meses individuales ──';
            monthSelector.appendChild(separator);
            
            // Llenar selector de meses
            const months = [
                'Enero', 'Febrero', 'Marzo', 'Abril', 'Mayo', 'Junio',
                'Julio', 'Agosto', 'Septiembre', 'Octubre', 'Noviembre', 'Diciembre'
            ];
            
            months.forEach((month, index) => {
                const option = document.createElement('option');
                option.value = index + 1;
                option.textContent = month;
                monthSelector.appendChild(option);
            });
            
            // Llenar selector de años (últimos 5 años y próximos 2)
            const currentYear = new Date().getFullYear();
            for (let year = currentYear - 5; year <= currentYear + 2; year++) {
                const option = document.createElement('option');
                option.value = year;
                option.textContent = year;
                yearSelector.appendChild(option);
            }
        }

        // Actualizar filtro de fecha
        function updateDateFilter() {
            appState.selectedMonth = document.getElementById('month-selector').value;
            appState.selectedYear = document.getElementById('year-selector').value;
            
            // Actualizar texto del período
            updatePeriodText();
            
            // Recargar contenido según la pestaña activa automáticamente
            switch(appState.activeTab) {
                case 'dashboard':
                    loadDashboard();
                    break;
                case 'transactions':
                    loadTransactions();
                    break;
                case 'categories':
                    loadCategories(); // Esto asegura que se actualice inmediatamente
                    break;
                case 'goals':
                    loadGoals(); // Actualizar objetivos cuando cambian filtros
                    break;
                case 'analytics':
                    loadAnalytics();
                    // Actualizar comparativas cuando cambian filtros
                    setTimeout(() => {
                        updateComparison();
                    }, 100);
                    break;
            }
        }

        // Actualizar texto del período seleccionado
        function updatePeriodText() {
            const monthSelector = document.getElementById('month-selector');
            const yearSelector = document.getElementById('year-selector');
            const periodElement = document.getElementById('current-period');
            
            let periodText = '';
            
            if (appState.selectedMonth && appState.selectedYear) {
                if (appState.selectedMonth.includes('-')) {
                    // Rango especial
                    periodText = monthSelector.options[monthSelector.selectedIndex].textContent;
                } else {
                    // Mes específico
                    const monthName = monthSelector.options[monthSelector.selectedIndex].textContent;
                    periodText = `${monthName} ${appState.selectedYear}`;
                }
            } else if (appState.selectedMonth) {
                if (appState.selectedMonth.includes('-')) {
                    // Rango especial
                    periodText = monthSelector.options[monthSelector.selectedIndex].textContent;
                } else {
                    // Mes específico
                    const monthName = monthSelector.options[monthSelector.selectedIndex].textContent;
                    periodText = `${monthName} (todos los años)`;
                }
            } else if (appState.selectedYear) {
                periodText = `Año ${appState.selectedYear}`;
            } else {
                periodText = 'Todos los registros';
            }
            
            if (periodElement) {
                periodElement.textContent = periodText;
            }
        }

        // Filtrar transacciones según criterios seleccionados
        function getFilteredTransactions() {
            let filtered = [...appState.transactions];
            
            // Filtrar por fecha
            if (appState.selectedMonth || appState.selectedYear) {
                filtered = filtered.filter(transaction => {
                    const date = new Date(transaction.date);
                    const transactionMonth = date.getMonth() + 1;
                    const transactionYear = date.getFullYear();
                    
                    // Manejar rangos especiales
                    if (appState.selectedMonth) {
                        const currentDate = new Date();
                        
                        switch(appState.selectedMonth) {
                            case 'last-3-months':
                                const threeMonthsAgo = new Date();
                                threeMonthsAgo.setMonth(threeMonthsAgo.getMonth() - 3);
                                return date >= threeMonthsAgo;
                                
                            case 'last-6-months':
                                const sixMonthsAgo = new Date();
                                sixMonthsAgo.setMonth(sixMonthsAgo.getMonth() - 6);
                                return date >= sixMonthsAgo;
                                
                            case 'current-year':
                                return transactionYear === currentDate.getFullYear();
                                
                            case 'last-year':
                                return transactionYear === currentDate.getFullYear() - 1;
                                
                            default:
                                // Mes específico
                                let matchesMonth = transactionMonth == appState.selectedMonth;
                                let matchesYear = true;
                                
                                if (appState.selectedYear) {
                                    matchesYear = transactionYear == appState.selectedYear;
                                }
                                
                                return matchesMonth && matchesYear;
                        }
                    } else if (appState.selectedYear) {
                        // Solo año seleccionado
                        return transactionYear == appState.selectedYear;
                    }
                    
                    return true;
                });
            }
            
            return filtered;
        }

        // Configurar event listeners
        function setupEventListeners() {
            // Listener para cambio de tipo en modal de transacción
            const transactionTypeSelect = document.getElementById('transaction-type');
            if (transactionTypeSelect) {
                transactionTypeSelect.addEventListener('change', function() {
                    updateCategoryOptions();
                });
            }

            // Listener para fecha por defecto
            const transactionDateInput = document.getElementById('transaction-date');
            if (transactionDateInput) {
                transactionDateInput.value = new Date().toISOString().split('T')[0];
            }
            
            // Event listeners para comparativas temporales (delegación de eventos)
            document.addEventListener('change', function(e) {
                if (e.target.id && (
                    e.target.id.includes('period1-') || 
                    e.target.id.includes('period2-') || 
                    e.target.id.includes('target-') || 
                    e.target.id.includes('avg-')
                )) {
                    // Pequeño delay para que el valor se actualice
                    setTimeout(() => {
                        const comparisonType = document.getElementById('comparison-type')?.value;
                        if (comparisonType) {
                            calculateComparisonMetrics(comparisonType);
                            createComparisonChart(comparisonType);
                            generateComparisonInsights(comparisonType);
                        }
                    }, 50);
                }
                
                // Event listeners para objetivos que afectan al auto-cálculo
                if (e.target.id && ['goal-start-date', 'goal-target', 'goal-priority'].includes(e.target.id)) {
                    const autoCalculateCheckbox = document.getElementById('goal-auto-calculate');
                    if (autoCalculateCheckbox && autoCalculateCheckbox.checked) {
                        // Recalcular automáticamente cuando cambien valores relevantes
                        setTimeout(() => {
                            toggleAutoCalculate();
                        }, 50);
                    }
                }
            });
        }

        // Filtrar transacciones en la pestaña de transacciones
        function filterTransactions() {
            const searchTerm = document.getElementById('search-input').value.toLowerCase();
            const categoryFilter = document.getElementById('category-filter').value;
            const typeFilter = document.getElementById('type-filter').value;
            const sortFilter = document.getElementById('sort-filter').value;
            
            let filtered = getFilteredTransactions();
            
            // Aplicar filtros adicionales
            if (searchTerm) {
                filtered = filtered.filter(t => 
                    t.description.toLowerCase().includes(searchTerm)
                );
            }
            
            if (categoryFilter) {
                filtered = filtered.filter(t => t.category == categoryFilter);
            }
            
            if (typeFilter) {
                filtered = filtered.filter(t => t.type === typeFilter);
            }
            
            // Ordenar
            const [sortBy, sortOrder] = sortFilter.split('-');
            filtered.sort((a, b) => {
                let aVal, bVal;
                
                if (sortBy === 'date') {
                    aVal = new Date(a.date);
                    bVal = new Date(b.date);
                } else if (sortBy === 'amount') {
                    aVal = Math.abs(a.amount);
                    bVal = Math.abs(b.amount);
                }
                
                if (sortOrder === 'desc') {
                    return bVal > aVal ? 1 : -1;
                } else {
                    return aVal > bVal ? 1 : -1;
                }
            });
            
            displayTransactions(filtered);
        }

        // Función específica para cuando cambia el filtro de tipo
        function onTypeFilterChange() {
            updateTransactionFilters();
            filterTransactions();
        }

        // Mostrar pestaña
        function showTab(tabName) {
            appState.activeTab = tabName;
            
            // Ocultar todas las pestañas
            document.querySelectorAll('.tab-content').forEach(tab => {
                tab.classList.add('hidden');
            });
            
            // Mostrar pestaña activa
            document.getElementById(tabName + '-tab').classList.remove('hidden');
            
            // Actualizar estilos de navegación
            document.querySelectorAll('.tab-btn').forEach(btn => {
                btn.classList.remove('border-blue-500', 'text-primary');
                btn.classList.add('border-transparent', 'text-muted');
            });
            
            const activeBtn = document.querySelector(`[data-tab="${tabName}"]`);
            activeBtn.classList.remove('border-transparent', 'text-muted');
            activeBtn.classList.add('border-blue-500', 'text-primary');
            
            // Cargar contenido específico de la pestaña
            switch(tabName) {
                case 'dashboard':
                    loadDashboard();
                    break;
                case 'transactions':
                    loadTransactions();
                    break;
                case 'categories':
                    loadCategories();
                    break;
                case 'recurring':
                    loadRecurring();
                    break;
                case 'goals':
                    loadGoals();
                    break;
                case 'analytics':
                    loadAnalytics();
                    break;
            }
        }

        // Cargar objetivos en dashboard
        function loadDashboardGoals() {
            const section = document.getElementById('dashboard-goals-section');
            const container = document.getElementById('dashboard-goals-list');
            
            if (!section || !container) return;
            
            // Obtener objetivos más relevantes para mostrar
            const relevantGoals = appState.savingsGoals
                .filter(goal => !goal.completed)
                .sort((a, b) => {
                    // Priorizar por: alta prioridad, luego por fecha límite más próxima
                    const priorityOrder = { high: 3, medium: 2, low: 1 };
                    if (priorityOrder[a.priority] !== priorityOrder[b.priority]) {
                        return priorityOrder[b.priority] - priorityOrder[a.priority];
                    }
                    return new Date(a.deadline) - new Date(b.deadline);
                })
                .slice(0, 3); // Mostrar máximo 3 objetivos
            
            if (relevantGoals.length === 0) {
                section.classList.add('hidden');
                return;
            }
            
            section.classList.remove('hidden');
            container.innerHTML = '';
            
            relevantGoals.forEach(goal => {
                const progress = (goal.current / goal.target) * 100;
                const deadline = new Date(goal.deadline);
                const daysLeft = Math.ceil((deadline - new Date()) / (1000 * 60 * 60 * 24));
                
                const div = document.createElement('div');
                div.className = 'flex items-center justify-between p-4 hover-bg rounded-lg transition-colors cursor-pointer';
                div.onclick = () => showTab('goals');
                
                div.innerHTML = `
                    <div class="flex items-center space-x-3">
                        <div class="w-10 h-10 rounded-lg flex items-center justify-center bg-blue-100 dark:bg-blue-900/20">
                            <span class="text-lg">${goal.icon}</span>
                        </div>
                        <div>
                            <p class="font-medium text-card">${goal.name}</p>
                            <div class="flex items-center space-x-2">
                                <div class="w-16 bg-gray-200 dark:bg-gray-700 rounded-full h-1">
                                    <div class="bg-blue-500 h-1 rounded-full transition-all duration-500" style="width: ${Math.min(progress, 100)}%"></div>
                                </div>
                                <span class="text-xs text-muted">${progress.toFixed(0)}%</span>
                            </div>
                        </div>
                    </div>
                    <div class="text-right">
                        <p class="font-semibold text-card">€${goal.current.toFixed(2)}</p>
                        <p class="text-xs text-muted">
                            ${daysLeft > 0 ? `${daysLeft} días` : 'Vencido'}
                        </p>
                    </div>
                `;
                container.appendChild(div);
            });
        }

        // Cargar ranking de categorías
        function loadCategoryRanking(transactions) {
            const container = document.getElementById('category-ranking');
            
            // Calcular gastos por categoría de gasto
            const categorySpending = {};
            
            appState.categories
                .filter(c => c.type === 'expense' && c.budget > 0)
                .forEach(category => {
                    const spent = transactions
                        .filter(t => t.category === category.id && t.amount < 0)
                        .reduce((sum, t) => sum + Math.abs(t.amount), 0);
                    
                    const budgetPercentage = (spent / category.budget) * 100;
                    
                    categorySpending[category.id] = {
                        name: category.name,
                        icon: category.icon,
                        color: category.color,
                        spent: spent,
                        budget: category.budget,
                        percentage: budgetPercentage
                    };
                });
            
            // Ordenar por cantidad gastada (mayor a menor)
            const sortedCategories = Object.values(categorySpending)
                .sort((a, b) => b.spent - a.spent);
            
            if (sortedCategories.length === 0) {
                container.innerHTML = '<p class="text-muted text-center py-4">No hay categorías con presupuesto para mostrar</p>';
                return;
            }
            
            // Crear tabla de ranking
            container.innerHTML = `
                <div class="space-y-2 sm:space-y-3">
                    ${sortedCategories.map((category, index) => {
                        const isOverBudget = category.percentage > 100;
                        const rank = index + 1;
                        
                        return `
                            <div class="flex items-center justify-between p-2 sm:p-3 rounded-lg ${index < 3 ? 'bg-yellow-50 dark:bg-yellow-900/10 border border-yellow-200 dark:border-yellow-800' : 'bg-gray-50 dark:bg-gray-700/50'}">
                                <div class="flex items-center space-x-2 sm:space-x-3">
                                    <div class="w-6 h-6 sm:w-8 sm:h-8 rounded-full flex items-center justify-center text-xs font-bold ${
                                        rank === 1 ? 'bg-yellow-500 text-white' :
                                        rank === 2 ? 'bg-gray-400 text-white' :
                                        rank === 3 ? 'bg-amber-600 text-white' :
                                        'bg-gray-300 text-gray-700'
                                    }">
                                        ${rank}
                                    </div>
                                    <div class="w-6 h-6 sm:w-8 sm:h-8 rounded-lg flex items-center justify-center" style="background-color: ${category.color}20">
                                        <span class="text-xs sm:text-sm">${category.icon}</span>
                                    </div>
                                    <div>
                                        <p class="font-medium text-card text-xs sm:text-sm">${category.name}</p>
                                        <p class="text-xs text-muted">Presupuesto: €${category.budget.toFixed(2)}</p>
                                    </div>
                                </div>
                                <div class="text-right">
                                    <p class="font-semibold text-xs sm:text-sm ${isOverBudget ? 'text-red-600' : 'text-card'}">
                                        €${category.spent.toFixed(2)}
                                    </p>
                                    <p class="text-xs ${isOverBudget ? 'text-red-600' : category.percentage > 80 ? 'text-yellow-600' : 'text-muted'}">
                                        ${category.percentage.toFixed(1)}% usado
                                    </p>
                                </div>
                            </div>
                        `;
                    }).join('')}
                </div>
            `;
        }

        // Cargar dashboard
        function loadDashboard() {
            const filtered = getFilteredTransactions();
            
            const totalIncome = filtered
                .filter(t => t.amount > 0)
                .reduce((sum, t) => sum + t.amount, 0);
            
            const totalExpenses = filtered
                .filter(t => t.amount < 0)
                .reduce((sum, t) => sum + Math.abs(t.amount), 0);
            
            const balance = totalIncome - totalExpenses;
            
            document.getElementById('total-income').textContent = `€${totalIncome.toFixed(2)}`;
            document.getElementById('total-expenses').textContent = `€${totalExpenses.toFixed(2)}`;
            document.getElementById('balance').textContent = `€${balance.toFixed(2)}`;
            
            // Actualizar color y icono del balance
            const balanceElement = document.getElementById('balance');
            const balanceIcon = document.getElementById('balance-icon');
            
            if (balance >= 0) {
                balanceElement.className = 'text-3xl font-bold text-green-600';
                balanceIcon.textContent = '💰';
            } else {
                balanceElement.className = 'text-3xl font-bold text-red-600';
                balanceIcon.textContent = '⚠️';
            }
            
            updatePeriodText();
            
            // Cargar ranking de categorías
            loadCategoryRanking(filtered);
            
            // Cargar objetivos en dashboard
            loadDashboardGoals();
            
            // Cargar transacciones recientes
            const recentTransactions = filtered
                .sort((a, b) => new Date(b.date) - new Date(a.date))
                .slice(0, 5);
            
            const container = document.getElementById('recent-transactions');
            container.innerHTML = '';
            
            if (recentTransactions.length === 0) {
                container.innerHTML = '<p class="text-muted text-center py-4">No hay transacciones en el período seleccionado</p>';
                return;
            }
            
            recentTransactions.forEach(transaction => {
                const category = appState.categories.find(c => c.id === transaction.category);
                const div = document.createElement('div');
                div.className = 'flex items-center justify-between p-4 hover-bg rounded-lg transition-colors';
                div.innerHTML = `
                    <div class="flex items-center space-x-3">
                        <div class="w-10 h-10 rounded-lg flex items-center justify-center" style="background-color: ${category?.color || '#6b7280'}20">
                            <span class="text-lg">${category?.icon || '💸'}</span>
                        </div>
                        <div>
                            <p class="font-medium text-card">${transaction.description}</p>
                            <p class="text-sm text-muted">${category?.name || 'Sin categoría'} • ${new Date(transaction.date).toLocaleDateString('es-ES')}</p>
                        </div>
                    </div>
                    <span class="font-semibold ${transaction.amount > 0 ? 'text-green-600' : 'text-red-600'}">
                        ${transaction.amount > 0 ? '+' : ''}€${Math.abs(transaction.amount).toFixed(2)}
                    </span>
                `;
                container.appendChild(div);
            });
        }

        // Cargar transacciones
        function loadTransactions() {
            // Actualizar filtros de categoría
            updateTransactionFilters();
            
            // Aplicar filtros
            filterTransactions();
        }

        // Actualizar filtros de categoría según el tipo seleccionado
        function updateTransactionFilters() {
            const typeFilter = document.getElementById('type-filter').value;
            const categoryFilter = document.getElementById('category-filter');
            
            // Guardar la categoría seleccionada actualmente
            const currentCategory = categoryFilter.value;
            
            // Limpiar opciones
            categoryFilter.innerHTML = '<option value="">Todas</option>';
            
            let categoriesToShow = appState.categories;
            
            // Filtrar categorías según el tipo seleccionado
            if (typeFilter === 'income') {
                categoriesToShow = appState.categories.filter(c => c.type === 'income');
            } else if (typeFilter === 'expense') {
                categoriesToShow = appState.categories.filter(c => c.type === 'expense');
            }
            
            // Agregar categorías filtradas
            categoriesToShow.forEach(category => {
                const option = document.createElement('option');
                option.value = category.id;
                option.textContent = `${category.icon} ${category.name}`;
                categoryFilter.appendChild(option);
            });
            
            // Restaurar selección si la categoría sigue siendo válida
            const validCategory = categoriesToShow.find(c => c.id == currentCategory);
            if (validCategory) {
                categoryFilter.value = currentCategory;
            }
        }

        // Mostrar transacciones filtradas
        function displayTransactions(transactions) {
            const container = document.getElementById('transactions-list');
            container.innerHTML = '';
            
            if (transactions.length === 0) {
                container.innerHTML = '<p class="text-muted text-center py-8">No se encontraron transacciones</p>';
                return;
            }
            
            transactions.forEach(transaction => {
                const category = appState.categories.find(c => c.id === transaction.category);
                const div = document.createElement('div');
                div.className = 'flex items-center justify-between p-4 hover-bg transition-colors';
                div.innerHTML = `
                    <div class="flex items-center space-x-4">
                        <div class="w-12 h-12 rounded-lg flex items-center justify-center" style="background-color: ${category?.color || '#6b7280'}20">
                            <span class="text-xl">${category?.icon || '💸'}</span>
                        </div>
                        <div>
                            <p class="font-medium text-card">${transaction.description}</p>
                            <p class="text-sm text-muted">${category?.name || 'Sin categoría'} • ${new Date(transaction.date).toLocaleDateString('es-ES')}</p>
                        </div>
                    </div>
                    <div class="flex items-center space-x-3">
                        <span class="font-semibold ${transaction.amount > 0 ? 'text-green-600' : 'text-red-600'}">
                            ${transaction.amount > 0 ? '+' : ''}€${Math.abs(transaction.amount).toFixed(2)}
                        </span>
                        <button onclick="editTransaction(${transaction.id})" 
                            class="p-2 text-blue-600 hover:bg-blue-100 dark:hover:bg-blue-900/20 rounded-lg transition-colors">
                            ✏️
                        </button>
                        <button onclick="deleteTransaction(${transaction.id})" 
                            class="p-2 text-red-600 hover:bg-red-100 dark:hover:bg-red-900/20 rounded-lg transition-colors">
                            🗑️
                        </button>
                    </div>
                `;
                container.appendChild(div);
            });
        }

        // Cargar categorías
        function loadCategories() {
            const expenseContainer = document.getElementById('expense-categories');
            const incomeContainer = document.getElementById('income-categories');
            
            expenseContainer.innerHTML = '';
            incomeContainer.innerHTML = '';
            
            // Usar transacciones filtradas para que las barras se actualicen con los filtros de fecha
            const filtered = getFilteredTransactions();
            
            appState.categories.forEach(category => {
                const spent = filtered
                    .filter(t => t.category === category.id && t.amount < 0)
                    .reduce((sum, t) => sum + Math.abs(t.amount), 0);
                
                const received = filtered
                    .filter(t => t.category === category.id && t.amount > 0)
                    .reduce((sum, t) => sum + t.amount, 0);
                
                const percentage = category.budget > 0 ? (spent / category.budget) * 100 : 0;
                const isOverBudget = percentage > 100;
                
                const div = document.createElement('div');
                div.className = 'bg-card border-card rounded-xl p-6 shadow-sm border';
                div.innerHTML = `
                    <div class="flex items-center justify-between mb-4">
                        <div class="flex items-center space-x-3">
                            <div class="w-12 h-12 rounded-lg flex items-center justify-center" style="background-color: ${category.color}20">
                                <span class="text-xl">${category.icon}</span>
                            </div>
                            <div>
                                <h3 class="font-semibold text-card">${category.name}</h3>
                                <p class="text-sm text-muted">${category.type === 'expense' ? 'Gasto' : 'Ingreso'}</p>
                            </div>
                        </div>
                        <div class="flex space-x-2">
                            <button onclick="editCategory(${category.id})" 
                                class="p-2 text-blue-600 hover:bg-blue-100 dark:hover:bg-blue-900/20 rounded-lg transition-colors">
                                ✏️
                            </button>
                            <button onclick="deleteCategory(${category.id})" 
                                class="p-2 text-red-600 hover:bg-red-100 dark:hover:bg-red-900/20 rounded-lg transition-colors">
                                🗑️
                            </button>
                        </div>
                    </div>
                    
                    ${category.type === 'expense' && category.budget > 0 ? `
                        <div class="space-y-2">
                            <div class="flex justify-between text-sm">
                                <span class="text-muted">Gastado en período:</span>
                                <span class="text-card font-medium">€${spent.toFixed(2)} / €${category.budget.toFixed(2)}</span>
                            </div>
                            <div class="w-full bg-gray-200 dark:bg-gray-700 rounded-full h-3">
                                <div class="h-3 rounded-full transition-all duration-500 ${isOverBudget ? 'bg-red-500' : 'bg-gradient-to-r from-blue-500 to-blue-600'}" 
                                    style="width: ${Math.min(percentage, 100)}%"></div>
                            </div>
                            ${isOverBudget ? `
                                <p class="text-xs text-red-600 font-medium flex items-center gap-1">
                                    ⚠️ Excedido por €${(spent - category.budget).toFixed(2)} (${percentage.toFixed(1)}%)
                                </p>
                            ` : percentage > 80 ? `
                                <p class="text-xs text-yellow-600 font-medium flex items-center gap-1">
                                    ⚡ Cerca del límite (${percentage.toFixed(1)}%)
                                </p>
                            ` : `
                                <p class="text-xs text-muted">
                                    Quedan €${(category.budget - spent).toFixed(2)} (${(100 - percentage).toFixed(1)}% disponible)
                                </p>
                            `}
                        </div>
                    ` : category.type === 'income' && category.budget > 0 ? `
                        <div class="space-y-2">
                            <div class="flex justify-between text-sm">
                                <span class="text-muted">Recibido en período:</span>
                                <span class="text-card font-medium">€${received.toFixed(2)} / €${category.budget.toFixed(2)}</span>
                            </div>
                            <div class="w-full bg-gray-200 dark:bg-gray-700 rounded-full h-3">
                                <div class="h-3 rounded-full transition-all duration-500 bg-gradient-to-r from-green-500 to-green-600" 
                                    style="width: ${Math.min((received / category.budget) * 100, 100)}%"></div>
                            </div>
                            ${received >= category.budget ? `
                                <p class="text-xs text-green-600 font-medium flex items-center gap-1">
                                    ✅ Objetivo alcanzado! (+€${(received - category.budget).toFixed(2)})
                                </p>
                            ` : (received / category.budget) * 100 > 80 ? `
                                <p class="text-xs text-green-600 font-medium flex items-center gap-1">
                                    🎯 Cerca del objetivo (${((received / category.budget) * 100).toFixed(1)}%)
                                </p>
                            ` : `
                                <p class="text-xs text-muted">
                                    Faltan €${(category.budget - received).toFixed(2)} para el objetivo (${((received / category.budget) * 100).toFixed(1)}% completado)
                                </p>
                            `}
                        </div>
                    ` : category.type === 'income' ? `
                        <div class="text-sm text-muted">
                            Total en período: <span class="text-card font-medium">€${received.toFixed(2)}</span>
                        </div>
                    ` : ''}
                `;
                
                if (category.type === 'expense') {
                    expenseContainer.appendChild(div);
                } else {
                    incomeContainer.appendChild(div);
                }
            });
        }

        // Cargar análisis con datos reales
        function loadAnalytics() {
            const filtered = getFilteredTransactions();
            
            // Calcular métricas
            const totalTransactions = filtered.length;
            const totalIncome = filtered.filter(t => t.amount > 0).reduce((sum, t) => sum + t.amount, 0);
            const totalExpenses = filtered.filter(t => t.amount < 0).reduce((sum, t) => sum + Math.abs(t.amount), 0);
            
            // Calcular ahorro promedio mensual
            let monthlySavings = 0;
            if (filtered.length > 0) {
                // Agrupar por meses únicos
                const monthlyData = {};
                filtered.forEach(transaction => {
                    const date = new Date(transaction.date);
                    const monthKey = `${date.getFullYear()}-${date.getMonth()}`;
                    
                    if (!monthlyData[monthKey]) {
                        monthlyData[monthKey] = { income: 0, expenses: 0 };
                    }
                    
                    if (transaction.amount > 0) {
                        monthlyData[monthKey].income += transaction.amount;
                    } else {
                        monthlyData[monthKey].expenses += Math.abs(transaction.amount);
                    }
                });
                
                // Calcular ahorro por mes y promediar
                const monthlyBalances = Object.values(monthlyData).map(month => month.income - month.expenses);
                monthlySavings = monthlyBalances.reduce((sum, balance) => sum + balance, 0) / monthlyBalances.length;
            }
            
            // Tasa de ahorro
            const savingsRate = totalIncome > 0 ? ((totalIncome - totalExpenses) / totalIncome) * 100 : 0;
            
            // Mayor gasto
            const expenses = filtered.filter(t => t.amount < 0);
            const biggestExpense = expenses.length > 0 ? Math.max(...expenses.map(t => Math.abs(t.amount))) : 0;
            
            // Actualizar métricas
            document.getElementById('total-transactions').textContent = totalTransactions;
            document.getElementById('monthly-savings').textContent = `€${monthlySavings.toFixed(2)}`;
            document.getElementById('savings-rate').textContent = `${savingsRate.toFixed(1)}%`;
            document.getElementById('biggest-expense').textContent = `€${biggestExpense.toFixed(2)}`;
            
            // Cambiar color del ahorro promedio
            const savingsElement = document.getElementById('monthly-savings');
            if (monthlySavings >= 500) {
                savingsElement.className = 'text-xl font-bold text-green-600';
            } else if (monthlySavings >= 100) {
                savingsElement.className = 'text-xl font-bold text-yellow-600';
            } else if (monthlySavings >= 0) {
                savingsElement.className = 'text-xl font-bold text-blue-600';
            } else {
                savingsElement.className = 'text-xl font-bold text-red-600';
            }
            
            // Cambiar color de la tasa de ahorro
            const savingsRateElement = document.getElementById('savings-rate');
            if (savingsRate >= 20) {
                savingsRateElement.className = 'text-xl font-bold text-green-600';
            } else if (savingsRate >= 10) {
                savingsRateElement.className = 'text-xl font-bold text-yellow-600';
            } else {
                savingsRateElement.className = 'text-xl font-bold text-red-600';
            }
            
            // Cargar top gastos
            loadTopExpenses(filtered);
            
            // Cargar alertas de presupuesto
            loadBudgetAlerts(filtered);
            
            // Crear gráficos de forma simple y directa
            setTimeout(() => {
                createExpensesChart(filtered);
                createTrendChart();
            }, 100);
        }

        // Cargar top 5 gastos
        function loadTopExpenses(transactions) {
            const expenses = transactions
                .filter(t => t.amount < 0)
                .sort((a, b) => a.amount - b.amount)
                .slice(0, 5);
            
            const container = document.getElementById('top-expenses');
            container.innerHTML = '';
            
            if (expenses.length === 0) {
                container.innerHTML = '<p class="text-muted text-center py-4">No hay gastos en el período seleccionado</p>';
                return;
            }
            
            expenses.forEach((expense, index) => {
                const category = appState.categories.find(c => c.id === expense.category);
                const div = document.createElement('div');
                div.className = 'flex items-center justify-between p-3 hover-bg rounded-lg transition-colors';
                div.innerHTML = `
                    <div class="flex items-center space-x-3">
                        <div class="w-8 h-8 rounded-full bg-red-100 dark:bg-red-900/20 flex items-center justify-center text-xs font-bold text-red-600">
                            ${index + 1}
                        </div>
                        <div class="w-8 h-8 rounded-lg flex items-center justify-center" style="background-color: ${category?.color || '#6b7280'}20">
                            <span class="text-sm">${category?.icon || '💸'}</span>
                        </div>
                        <div>
                            <p class="font-medium text-card text-sm">${expense.description}</p>
                            <p class="text-xs text-muted">${new Date(expense.date).toLocaleDateString('es-ES')}</p>
                        </div>
                    </div>
                    <div class="text-red-600 font-semibold">
                        €${Math.abs(expense.amount).toFixed(2)}
                    </div>
                `;
                container.appendChild(div);
            });
        }

        // Cargar alertas de presupuesto
        function loadBudgetAlerts(transactions) {
            const container = document.getElementById('budget-alerts');
            container.innerHTML = '';
            
            const alerts = [];
            
            appState.categories
                .filter(c => c.type === 'expense' && c.budget > 0)
                .forEach(category => {
                    const spent = transactions
                        .filter(t => t.category === category.id && t.amount < 0)
                        .reduce((sum, t) => sum + Math.abs(t.amount), 0);
                    
                    const percentage = (spent / category.budget) * 100;
                    
                    if (percentage > 100) {
                        alerts.push({
                            category,
                            spent,
                            percentage,
                            excess: spent - category.budget
                        });
                    }
                });
            
            if (alerts.length === 0) {
                container.innerHTML = '<p class="text-muted text-center py-4">✅ Todos los presupuestos están bajo control</p>';
                return;
            }
            
            alerts
                .sort((a, b) => b.percentage - a.percentage)
                .forEach(alert => {
                    const div = document.createElement('div');
                    div.className = 'p-3 bg-red-50 dark:bg-red-900/10 border border-red-200 dark:border-red-800 rounded-lg';
                    div.innerHTML = `
                        <div class="flex items-center space-x-3">
                            <div class="w-8 h-8 rounded-lg flex items-center justify-center" style="background-color: ${alert.category.color}20">
                                <span class="text-sm">${alert.category.icon}</span>
                            </div>
                            <div class="flex-1">
                                <p class="font-medium text-red-800 dark:text-red-200 text-sm">${alert.category.name}</p>
                                <p class="text-xs text-red-600 dark:text-red-300">
                                    Excedido por €${alert.excess.toFixed(2)} (${alert.percentage.toFixed(1)}%)
                                </p>
                            </div>
                            <div class="text-red-600 font-semibold text-sm">
                                ⚠️
                            </div>
                        </div>
                    `;
                    container.appendChild(div);
                });
        }

        // Actualizar gráfico de distribución según el tipo seleccionado
        function updateDistributionChart() {
            const filtered = getFilteredTransactions();
            createExpensesChart(filtered);
        }

        // Crear gráfico de gastos mejorado
        function createExpensesChart(transactions) {
            // Verificar que Chart.js esté disponible
            if (typeof Chart === 'undefined') {
                console.log('Chart.js no está disponible');
                return;
            }
            
            const canvas = document.getElementById('expensesChart');
            if (!canvas) {
                console.log('Canvas expensesChart no encontrado');
                return;
            }
            
            // Forzar limpieza completa
            if (window.expensesChart && typeof window.expensesChart.destroy === 'function') {
                window.expensesChart.destroy();
                window.expensesChart = null;
            }
            
            // Limpiar canvas manualmente
            const ctx = canvas.getContext('2d');
            ctx.clearRect(0, 0, canvas.width, canvas.height);
            
            // Obtener tipo de gráfico seleccionado
            const chartType = document.getElementById('chart-type-selector')?.value || 'expenses';
            
            let chartData = {};
            let chartTitle = '';
            
            if (chartType === 'expenses') {
                // Solo gastos
                const categoryTotals = {};
                transactions.filter(t => t.amount < 0).forEach(t => {
                    const cat = appState.categories.find(c => c.id === t.category);
                    const name = cat ? cat.name : 'Otros';
                    categoryTotals[name] = (categoryTotals[name] || 0) + Math.abs(t.amount);
                });
                
                chartData = {
                    labels: Object.keys(categoryTotals),
                    datasets: [{
                        data: Object.values(categoryTotals),
                        backgroundColor: ['#ef4444', '#f97316', '#f59e0b', '#eab308', '#84cc16', '#22c55e', '#10b981', '#14b8a6', '#06b6d4', '#0ea5e9']
                    }]
                };
                chartTitle = 'Distribución de Gastos';
                
            } else if (chartType === 'income') {
                // Solo ingresos
                const categoryTotals = {};
                transactions.filter(t => t.amount > 0).forEach(t => {
                    const cat = appState.categories.find(c => c.id === t.category);
                    const name = cat ? cat.name : 'Otros';
                    categoryTotals[name] = (categoryTotals[name] || 0) + t.amount;
                });
                
                chartData = {
                    labels: Object.keys(categoryTotals),
                    datasets: [{
                        data: Object.values(categoryTotals),
                        backgroundColor: ['#10b981', '#22c55e', '#84cc16', '#eab308', '#f59e0b', '#06b6d4', '#0ea5e9', '#3b82f6', '#6366f1', '#8b5cf6']
                    }]
                };
                chartTitle = 'Distribución de Ingresos';
                
            } else if (chartType === 'combined') {
                // Gastos como % de ingresos
                const totalIncome = transactions.filter(t => t.amount > 0).reduce((sum, t) => sum + t.amount, 0);
                
                if (totalIncome === 0) {
                    ctx.font = '14px Arial';
                    ctx.fillStyle = '#666';
                    ctx.textAlign = 'center';
                    ctx.fillText('No hay ingresos para comparar', canvas.width / 2, canvas.height / 2);
                    return;
                }
                
                const categoryTotals = {};
                transactions.filter(t => t.amount < 0).forEach(t => {
                    const cat = appState.categories.find(c => c.id === t.category);
                    const name = cat ? cat.name : 'Otros';
                    const percentageOfIncome = (Math.abs(t.amount) / totalIncome) * 100;
                    categoryTotals[name] = (categoryTotals[name] || 0) + percentageOfIncome;
                });
                
                chartData = {
                    labels: Object.keys(categoryTotals),
                    datasets: [{
                        data: Object.values(categoryTotals),
                        backgroundColor: ['#dc2626', '#ea580c', '#d97706', '#ca8a04', '#65a30d', '#16a34a', '#059669', '#0d9488', '#0284c7', '#2563eb']
                    }]
                };
                chartTitle = 'Gastos como % de Ingresos';
            }
            
            if (!chartData.labels || chartData.labels.length === 0) {
                ctx.font = '14px Arial';
                ctx.fillStyle = '#666';
                ctx.textAlign = 'center';
                ctx.fillText('No hay datos para mostrar', canvas.width / 2, canvas.height / 2);
                return;
            }
            
            // Crear gráfico con configuración mínima
            try {
                window.expensesChart = new Chart(ctx, {
                    type: 'doughnut',
                    data: chartData,
                    options: {
                        responsive: true,
                        maintainAspectRatio: false,
                        plugins: {
                            title: {
                                display: true,
                                text: chartTitle,
                                font: {
                                    size: 14,
                                    weight: 'bold'
                                }
                            },
                            legend: {
                                position: 'bottom'
                            },
                            tooltip: {
                                callbacks: {
                                    label: function(context) {
                                        const total = context.dataset.data.reduce((sum, val) => sum + val, 0);
                                        const percentage = ((context.raw / total) * 100).toFixed(1);
                                        
                                        if (chartType === 'combined') {
                                            return `${context.label}: ${context.raw.toFixed(1)}% de ingresos`;
                                        } else {
                                            return `${context.label}: €${context.raw.toFixed(2)} (${percentage}%)`;
                                        }
                                    }
                                }
                            }
                        }
                    }
                });
            } catch (error) {
                console.error('Error creando gráfico:', error);
            }
        }

        // Crear gráfico de tendencia con datos reales
        function createTrendChart() {
            // Verificar que Chart.js esté disponible
            if (typeof Chart === 'undefined') {
                return;
            }
            
            const canvas = document.getElementById('trendChart');
            if (!canvas) {
                return;
            }
            
            // Limpiar gráfico anterior
            if (window.trendChart && typeof window.trendChart.destroy === 'function') {
                window.trendChart.destroy();
                window.trendChart = null;
            }
            
            const ctx = canvas.getContext('2d');
            ctx.clearRect(0, 0, canvas.width, canvas.height);
            
            // USAR LAS TRANSACCIONES FILTRADAS (esto es clave)
            const filteredTransactions = getFilteredTransactions();
            
            console.log('Transacciones filtradas para gráfico:', filteredTransactions.length);
            
            if (filteredTransactions.length === 0) {
                ctx.font = '14px Arial';
                ctx.fillStyle = '#666';
                ctx.textAlign = 'center';
                ctx.fillText('No hay datos en el período seleccionado', canvas.width / 2, canvas.height / 2);
                return;
            }
            
            // Agrupar por mes-año las transacciones filtradas
            const monthlyTotals = {};
            
            filteredTransactions.forEach(transaction => {
                const date = new Date(transaction.date);
                const monthKey = `${date.getFullYear()}-${String(date.getMonth() + 1).padStart(2, '0')}`;
                
                if (!monthlyTotals[monthKey]) {
                    monthlyTotals[monthKey] = {
                        income: 0,
                        expenses: 0,
                        month: date.getMonth(),
                        year: date.getFullYear()
                    };
                }
                
                if (transaction.amount > 0) {
                    monthlyTotals[monthKey].income += transaction.amount;
                } else {
                    monthlyTotals[monthKey].expenses += Math.abs(transaction.amount);
                }
            });
            
            // Ordenar por fecha y preparar arrays
            const sortedKeys = Object.keys(monthlyTotals).sort();
            console.log('Meses con datos:', sortedKeys);
            
            const labels = [];
            const incomeData = [];
            const expenseData = [];
            const balanceData = [];
            
            sortedKeys.forEach(key => {
                const data = monthlyTotals[key];
                const monthNames = ['Ene', 'Feb', 'Mar', 'Abr', 'May', 'Jun', 'Jul', 'Ago', 'Sep', 'Oct', 'Nov', 'Dic'];
                
                labels.push(`${monthNames[data.month]} ${data.year}`);
                incomeData.push(data.income);
                expenseData.push(data.expenses);
                balanceData.push(data.income - data.expenses);
            });
            
            console.log('Datos del gráfico:', { labels, incomeData, expenseData, balanceData });
            
            // Crear gráfico
            try {
                window.trendChart = new Chart(ctx, {
                    type: 'line',
                    data: {
                        labels: labels,
                        datasets: [
                            {
                                label: 'Ingresos',
                                data: incomeData,
                                borderColor: '#10b981',
                                backgroundColor: 'rgba(16, 185, 129, 0.1)',
                                borderWidth: 3,
                                fill: false,
                                tension: 0.2
                            },
                            {
                                label: 'Gastos',
                                data: expenseData,
                                borderColor: '#ef4444',
                                backgroundColor: 'rgba(239, 68, 68, 0.1)',
                                borderWidth: 3,
                                fill: false,
                                tension: 0.2
                            },
                            {
                                label: 'Balance',
                                data: balanceData,
                                borderColor: '#3b82f6',
                                backgroundColor: 'rgba(59, 130, 246, 0.1)',
                                borderWidth: 2,
                                fill: false,
                                tension: 0.2,
                                borderDash: [8, 4]
                            }
                        ]
                    },
                    options: {
                        responsive: true,
                        maintainAspectRatio: false,
                        plugins: {
                            title: {
                                display: true,
                                text: `Evolución Financiera (${filteredTransactions.length} transacciones)`,
                                font: {
                                    size: 14,
                                    weight: 'bold'
                                }
                            },
                            legend: {
                                position: 'top',
                                labels: {
                                    usePointStyle: true,
                                    padding: 15
                                }
                            },
                            tooltip: {
                                mode: 'index',
                                intersect: false,
                                callbacks: {
                                    label: function(context) {
                                        return `${context.dataset.label}: €${context.raw.toFixed(2)}`;
                                    }
                                }
                            }
                        },
                        scales: {
                            y: {
                                ticks: {
                                    callback: function(value) {
                                        return '€' + value.toFixed(0);
                                    }
                                },
                                grid: {
                                    color: 'rgba(0,0,0,0.1)'
                                }
                            },
                            x: {
                                grid: {
                                    color: 'rgba(0,0,0,0.1)'
                                }
                            }
                        },
                        interaction: {
                            mode: 'nearest',
                            axis: 'x',
                            intersect: false
                        }
                    }
                });
            } catch (error) {
                console.error('Error creando gráfico de tendencia:', error);
            }
        }

        // Mostrar modal de agregar transacción
        function showAddTransaction() {
            appState.editingTransaction = null;
            document.getElementById('transaction-modal-title').textContent = 'Nueva Transacción';
            clearTransactionForm();
            updateCategoryOptions(); // Llamar aquí para cargar categorías correctas
            document.getElementById('transaction-modal').classList.remove('hidden');
        }

        // Mostrar modal de agregar categoría
        function showAddCategory() {
            appState.editingCategory = null;
            document.getElementById('category-modal-title').textContent = 'Nueva Categoría';
            clearCategoryForm();
            document.getElementById('category-modal').classList.remove('hidden');
        }

        // Editar transacción
        function editTransaction(id) {
            const transaction = appState.transactions.find(t => t.id === id);
            if (!transaction) return;
            
            appState.editingTransaction = transaction;
            document.getElementById('transaction-modal-title').textContent = 'Editar Transacción';
            
            document.getElementById('transaction-description').value = transaction.description;
            document.getElementById('transaction-amount').value = Math.abs(transaction.amount);
            document.getElementById('transaction-type').value = transaction.type;
            document.getElementById('transaction-date').value = transaction.date;
            
            // Primero actualizar categorías según el tipo, luego seleccionar la categoría
            updateCategoryOptions();
            setTimeout(() => {
                document.getElementById('transaction-category').value = transaction.category;
            }, 50);
            
            document.getElementById('transaction-modal').classList.remove('hidden');
        }

        // Editar categoría
        function editCategory(id) {
            const category = appState.categories.find(c => c.id === id);
            if (!category) return;
            
            appState.editingCategory = category;
            document.getElementById('category-modal-title').textContent = 'Editar Categoría';
            
            document.getElementById('category-name').value = category.name;
            document.getElementById('category-type').value = category.type;
            document.getElementById('category-budget').value = category.budget;
            document.getElementById('category-icon').value = category.icon;
            document.getElementById('category-modal').classList.remove('hidden');
        }

        // Eliminar transacción
        function deleteTransaction(id) {
            if (confirm('¿Estás seguro de que quieres eliminar esta transacción?')) {
                appState.transactions = appState.transactions.filter(t => t.id !== id);
                saveData();
                
                // Recargar vista actual
                if (appState.activeTab === 'transactions') {
                    loadTransactions();
                } else if (appState.activeTab === 'dashboard') {
                    loadDashboard();
                } else if (appState.activeTab === 'analytics') {
                    loadAnalytics();
                }
            }
        }

        // Eliminar categoría
        function deleteCategory(id) {
            const hasTransactions = appState.transactions.some(t => t.category === id);
            if (hasTransactions) {
                alert('No se puede eliminar una categoría que tiene transacciones asociadas');
                return;
            }
            
            if (confirm('¿Estás seguro de que quieres eliminar esta categoría?')) {
                appState.categories = appState.categories.filter(c => c.id !== id);
                saveData();
                loadCategories();
            }
        }

        // Cerrar modales
        function closeTransactionModal() {
            document.getElementById('transaction-modal').classList.add('hidden');
            appState.editingTransaction = null;
        }

        function closeCategoryModal() {
            document.getElementById('category-modal').classList.add('hidden');
            appState.editingCategory = null;
        }

        // Limpiar formularios
        function clearTransactionForm() {
            document.getElementById('transaction-description').value = '';
            document.getElementById('transaction-amount').value = '';
            document.getElementById('transaction-type').value = 'expense';
            document.getElementById('transaction-date').value = new Date().toISOString().split('T')[0];
        }

        function clearCategoryForm() {
            document.getElementById('category-name').value = '';
            document.getElementById('category-type').value = 'expense';
            document.getElementById('category-budget').value = '';
            document.getElementById('category-icon').value = '';
        }

        // Actualizar opciones de categoría según el tipo
        function updateCategoryOptions() {
            const type = document.getElementById('transaction-type').value;
            const categorySelect = document.getElementById('transaction-category');
            
            categorySelect.innerHTML = '';
            
            const filteredCategories = appState.categories.filter(c => c.type === type);
            
            if (filteredCategories.length === 0) {
                const option = document.createElement('option');
                option.value = '';
                option.textContent = `No hay categorías de ${type === 'expense' ? 'gastos' : 'ingresos'} disponibles`;
                categorySelect.appendChild(option);
                return;
            }
            
            filteredCategories.forEach(category => {
                const option = document.createElement('option');
                option.value = category.id;
                option.textContent = `${category.icon} ${category.name}`;
                categorySelect.appendChild(option);
            });
        }

        // Guardar transacción
        function saveTransaction() {
            const description = document.getElementById('transaction-description').value.trim();
            const amount = parseFloat(document.getElementById('transaction-amount').value);
            const type = document.getElementById('transaction-type').value;
            const category = parseInt(document.getElementById('transaction-category').value);
            const date = document.getElementById('transaction-date').value;

            // Validaciones
            if (!description) {
                alert('Por favor ingresa una descripción');
                return;
            }
            
            if (!amount || amount <= 0) {
                alert('Por favor ingresa una cantidad válida');
                return;
            }
            
            if (!category) {
                alert('Por favor selecciona una categoría');
                return;
            }
            
            if (!date) {
                alert('Por favor selecciona una fecha');
                return;
            }

            const finalAmount = type === 'expense' ? -Math.abs(amount) : Math.abs(amount);

            if (appState.editingTransaction) {
                // Editar transacción existente
                const index = appState.transactions.findIndex(t => t.id === appState.editingTransaction.id);
                if (index !== -1) {
                    appState.transactions[index] = {
                        ...appState.editingTransaction,
                        description,
                        amount: finalAmount,
                        type,
                        category,
                        date
                    };
                }
            } else {
                // Nueva transacción
                const newTransaction = {
                    id: Date.now(),
                    description,
                    amount: finalAmount,
                    type,
                    category,
                    date
                };
                appState.transactions.push(newTransaction);
            }

            saveData();
            closeTransactionModal();
            
            // Recargar vista actual
            if (appState.activeTab === 'transactions') {
                loadTransactions();
            } else if (appState.activeTab === 'dashboard') {
                loadDashboard();
            } else if (appState.activeTab === 'analytics') {
                loadAnalytics();
            }
        }

        // Guardar categoría
        function saveCategory() {
            const name = document.getElementById('category-name').value.trim();
            const type = document.getElementById('category-type').value;
            const budget = parseFloat(document.getElementById('category-budget').value) || 0;
            const icon = document.getElementById('category-icon').value.trim() || '📂';

            if (!name) {
                alert('Por favor ingresa un nombre para la categoría');
                return;
            }

            // Generar color aleatorio
            const colors = ['#3b82f6', '#10b981', '#f59e0b', '#ef4444', '#8b5cf6', '#06b6d4', '#84cc16', '#f97316'];
            const randomColor = colors[Math.floor(Math.random() * colors.length)];

            if (appState.editingCategory) {
                // Editar categoría existente
                const index = appState.categories.findIndex(c => c.id === appState.editingCategory.id);
                if (index !== -1) {
                    appState.categories[index] = {
                        ...appState.editingCategory,
                        name,
                        type,
                        budget,
                        icon
                    };
                }
            } else {
                // Nueva categoría
                const newCategory = {
                    id: Date.now(),
                    name,
                    type,
                    budget,
                    icon,
                    color: randomColor
                };
                appState.categories.push(newCategory);
            }

            saveData();
            closeCategoryModal();
            loadCategories();
        }

        // Alternar tema
        function toggleTheme() {
            appState.darkMode = !appState.darkMode;
            updateTheme();
            localStorage.setItem('finance-theme', appState.darkMode ? 'dark' : 'light');
            
            // Recrear gráficos con el nuevo tema si estamos en la pestaña de análisis
            if (appState.activeTab === 'analytics') {
                setTimeout(() => {
                    const filtered = getFilteredTransactions();
                    createExpensesChart(filtered);
                    createTrendChart();
                }, 100);
            }
        }

        // Actualizar tema
        function updateTheme() {
            const html = document.documentElement;
            const themeIcon = document.getElementById('theme-icon');
            
            if (appState.darkMode) {
                html.classList.add('dark');
                themeIcon.textContent = '☀️';
            } else {
                html.classList.remove('dark');
                themeIcon.textContent = '🌙';
            }
        }

        // Inicializar la aplicación cuando se carga la página
        document.addEventListener('DOMContentLoaded', function() {
            initApp();
            // Configurar event listeners después de que todo esté renderizado
            setTimeout(() => {
                setupEventListeners();
            }, 100);
        });

        // Cerrar modales al hacer clic fuera de ellos
        document.addEventListener('click', function(e) {
            if (e.target.classList.contains('fixed') && e.target.classList.contains('inset-0')) {
                if (e.target.id === 'transaction-modal') {
                    closeTransactionModal();
                } else if (e.target.id === 'category-modal') {
                    closeCategoryModal();
                } else if (e.target.id === 'recurring-modal') {
                    closeRecurringModal();
                } else if (e.target.id === 'goal-modal') {
                    closeGoalModal();
                } else if (e.target.id === 'excel-import-modal') {
                    closeExcelImportModal();
                }
            }
        });

        // Atajos de teclado
        document.addEventListener('keydown', function(e) {
            // Esc para cerrar modales
            if (e.key === 'Escape') {
                closeTransactionModal();
                closeCategoryModal();
                closeRecurringModal();
                closeExcelImportModal();
            }
            
            // Ctrl/Cmd + número para cambiar pestañas
            if ((e.ctrlKey || e.metaKey) && !e.shiftKey && !e.altKey) {
                switch(e.key) {
                    case '1':
                        e.preventDefault();
                        showTab('dashboard');
                    case 'r':
                        e.preventDefault();
                        if (appState.activeTab === 'analytics') {
                            updateComparison(); // Refresh comparativas
                        }
                        break;
                    case '2':
                        e.preventDefault();
                        showTab('transactions');
                        break;
                    case '3':
                        e.preventDefault();
                        showTab('categories');
                        break;
                    case '4':
                        e.preventDefault();
                        showTab('recurring');
                        break;
                    case '5':
                        e.preventDefault();
                        showTab('analytics');
                        break;
                    case 'n':
                        e.preventDefault();
                        if (appState.activeTab === 'transactions') {
                            showAddTransaction();
                        } else if (appState.activeTab === 'categories') {
                            showAddCategory();
                        } else if (appState.activeTab === 'recurring') {
                            showAddRecurring();
                        }
                        break;
                }
            }
        });
        </div> <div id="personal-goals-section" class="main-section hidden">
            <div class="max-w-7xl mx-auto px-4 py-20 text-center">
                <span class="text-6xl mb-4 block">🎯</span>
                <h1 class="text-4xl font-bold text-card mb-4">Objetivos Personales</h1>
                <p class="text-xl text-muted">Estamos trabajando en esta sección. ¡Vuelve pronto para descubrir nuevas funcionalidades!</p>
            </div>
        </div>

        <div id="investments-section" class="main-section hidden">
            <div class="max-w-7xl mx-auto px-4 py-20 text-center">
                <span class="text-6xl mb-4 block">📈</span>
                <h1 class="text-4xl font-bold text-card mb-4">Inversiones</h1>
                <p class="text-xl text-muted">Estamos trabajando en esta sección. ¡Vuelve pronto para descubrir nuevas funcionalidades!</p>
            </div>
        </div>

    </div> ```

### Paso 4: Añadir el JavaScript para que Funcionen los Botones

Finalmente, necesitamos el código que hace la magia de cambiar entre secciones.

**Ve al final de tu archivo, justo antes de la etiqueta de cierre `</body>` (línea 1554 aprox.) y PEGA este nuevo bloque de script:**

```javascript
    <script>
        // =================================================================== //
        // ========= NUEVO SCRIPT PARA MANEJAR SECCIONES PRINCIPALES ========= //
        // =================================================================== //
        function showMainSection(sectionName) {
            // Ocultar todas las secciones principales
            document.querySelectorAll('.main-section').forEach(section => {
                section.classList.add('hidden');
            });

            // Mostrar la sección seleccionada
            const sectionToShow = document.getElementById(sectionName + '-section');
            if (sectionToShow) {
                sectionToShow.classList.remove('hidden');
            }

            // Actualizar estilos de los botones
            document.querySelectorAll('.main-section-btn').forEach(btn => {
                btn.classList.remove('bg-gray-900', 'text-white');
                btn.classList.add('text-gray-300', 'hover:bg-gray-700');
            });

            const activeButton = document.querySelector(`button[onclick="showMainSection('${sectionName}')"]`);
            if (activeButton) {
                activeButton.classList.add('bg-gray-900', 'text-white');
                activeButton.classList.remove('text-gray-300', 'hover:bg-gray-700');
            }
        }
    </script>
    </script>
</body>
</html>
